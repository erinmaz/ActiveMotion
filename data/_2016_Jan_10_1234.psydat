ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/_2016_Jan_10_1234
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'None'
p11
sS'dataNames'
p12
(lp13
sS'autoLog'
p14
I01
sS'extraInfo'
p15
(dp16
S'date'
p17
V2016_Jan_10_1234
p18
sS'expName'
p19
g11
sVsession
p20
V001
p21
sVparticipant
p22
V
ssS'loopsUnfinished'
p23
(lp24
sS'saveWideText'
p25
I01
sS'thisEntry'
p26
(dp27
sS'version'
p28
S''
sS'_paramNamesSoFar'
p29
(lp30
S'phase'
p31
asS'entries'
p32
(lp33
(dp34
g20
g21
sS'trials.thisIndex'
p35
cnumpy.core.multiarray
scalar
p36
(cnumpy
dtype
p37
(S'i4'
I0
I1
tRp38
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp39
sg22
V
sS'trials_2.thisRepN'
p40
I0
sS'trials_2.thisTrialN'
p41
I0
sS'trials.thisRepN'
p42
I0
sS'trials_2.thisTrial'
p43
NsS'trials.thisN'
p44
I0
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p45
g36
(g38
S'\x00\x00\x00\x00'
tRp46
sg31
g36
(g37
(S'f8'
I0
I1
tRp47
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp48
sS'trials.thisTrialN'
p49
I0
sS'trials_2.thisN'
p50
I0
sa(dp51
g20
g21
sS'trials.thisIndex'
p52
g36
(g38
S'\x01\x00\x00\x00'
tRp53
sg22
V
sS'trials_2.thisRepN'
p54
I0
sS'trials_2.thisTrialN'
p55
I0
sS'trials.thisRepN'
p56
I0
sS'trials_2.thisTrial'
p57
NsS'trials.thisN'
p58
I1
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p59
g46
sg31
g36
(g47
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp60
sS'trials.thisTrialN'
p61
I1
sS'trials_2.thisN'
p62
I0
sa(dp63
g20
g21
sS'trials.thisIndex'
p64
g36
(g38
S'\x00\x00\x00\x00'
tRp65
sg22
V
sS'trials_2.thisRepN'
p66
I0
sS'trials_2.thisTrialN'
p67
I0
sS'trials.thisRepN'
p68
I1
sS'trials_2.thisTrial'
p69
NsS'trials.thisN'
p70
I2
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p71
g46
sg31
g48
sS'trials.thisTrialN'
p72
I0
sS'trials_2.thisN'
p73
I0
sa(dp74
g20
g21
sS'trials.thisIndex'
p75
g36
(g38
S'\x01\x00\x00\x00'
tRp76
sg22
V
sS'trials_2.thisRepN'
p77
I0
sS'trials_2.thisTrialN'
p78
I0
sS'trials.thisRepN'
p79
I1
sS'trials_2.thisTrial'
p80
NsS'trials.thisN'
p81
I3
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p82
g46
sg31
g60
sS'trials.thisTrialN'
p83
I1
sS'trials_2.thisN'
p84
I0
sa(dp85
g20
g21
sS'trials.thisIndex'
p86
g36
(g38
S'\x00\x00\x00\x00'
tRp87
sg22
V
sS'trials_2.thisRepN'
p88
I0
sS'trials_2.thisTrialN'
p89
I0
sS'trials.thisRepN'
p90
I2
sS'trials_2.thisTrial'
p91
NsS'trials.thisN'
p92
I4
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p93
g46
sg31
g48
sS'trials.thisTrialN'
p94
I0
sS'trials_2.thisN'
p95
I0
sa(dp96
g20
g21
sS'trials.thisIndex'
p97
g36
(g38
S'\x01\x00\x00\x00'
tRp98
sg22
V
sS'trials_2.thisRepN'
p99
I0
sS'trials_2.thisTrialN'
p100
I0
sS'trials.thisRepN'
p101
I2
sS'trials_2.thisTrial'
p102
NsS'trials.thisN'
p103
I5
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p104
g46
sg31
g60
sS'trials.thisTrialN'
p105
I1
sS'trials_2.thisN'
p106
I0
sa(dp107
g20
g21
sS'trials.thisIndex'
p108
g36
(g38
S'\x00\x00\x00\x00'
tRp109
sg22
V
sS'trials_2.thisRepN'
p110
I0
sS'trials_2.thisTrialN'
p111
I0
sS'trials.thisRepN'
p112
I3
sS'trials_2.thisTrial'
p113
NsS'trials.thisN'
p114
I6
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p115
g46
sg31
g48
sS'trials.thisTrialN'
p116
I0
sS'trials_2.thisN'
p117
I0
sa(dp118
g20
g21
sS'trials.thisIndex'
p119
g36
(g38
S'\x01\x00\x00\x00'
tRp120
sg22
V
sS'trials_2.thisRepN'
p121
I0
sS'trials_2.thisTrialN'
p122
I0
sS'trials.thisRepN'
p123
I3
sS'trials_2.thisTrial'
p124
NsS'trials.thisN'
p125
I7
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p126
g46
sg31
g60
sS'trials.thisTrialN'
p127
I1
sS'trials_2.thisN'
p128
I0
sa(dp129
g20
g21
sS'trials.thisIndex'
p130
g36
(g38
S'\x00\x00\x00\x00'
tRp131
sg22
V
sS'trials_2.thisRepN'
p132
I0
sS'trials_2.thisTrialN'
p133
I0
sS'trials.thisRepN'
p134
I4
sS'trials_2.thisTrial'
p135
NsS'trials.thisN'
p136
I8
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p137
g46
sg31
g48
sS'trials.thisTrialN'
p138
I0
sS'trials_2.thisN'
p139
I0
sa(dp140
g20
g21
sS'trials.thisIndex'
p141
g36
(g38
S'\x01\x00\x00\x00'
tRp142
sg22
V
sS'trials_2.thisRepN'
p143
I0
sS'trials_2.thisTrialN'
p144
I0
sS'trials.thisRepN'
p145
I4
sS'trials_2.thisTrial'
p146
NsS'trials.thisN'
p147
I9
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p148
g46
sg31
g60
sS'trials.thisTrialN'
p149
I1
sS'trials_2.thisN'
p150
I0
sa(dp151
g20
g21
sS'trials.thisIndex'
p152
g36
(g38
S'\x00\x00\x00\x00'
tRp153
sg22
V
sS'trials_2.thisRepN'
p154
I0
sS'trials_2.thisTrialN'
p155
I0
sS'trials.thisRepN'
p156
I5
sS'trials_2.thisTrial'
p157
NsS'trials.thisN'
p158
I10
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p159
g46
sg31
g48
sS'trials.thisTrialN'
p160
I0
sS'trials_2.thisN'
p161
I0
sa(dp162
g20
g21
sS'trials.thisIndex'
p163
g36
(g38
S'\x01\x00\x00\x00'
tRp164
sg22
V
sS'trials_2.thisRepN'
p165
I0
sS'trials_2.thisTrialN'
p166
I0
sS'trials.thisRepN'
p167
I5
sS'trials_2.thisTrial'
p168
NsS'trials.thisN'
p169
I11
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p170
g46
sg31
g60
sS'trials.thisTrialN'
p171
I1
sS'trials_2.thisN'
p172
I0
sa(dp173
g20
g21
sS'trials.thisIndex'
p174
g36
(g38
S'\x00\x00\x00\x00'
tRp175
sg22
V
sS'trials_2.thisRepN'
p176
I0
sS'trials_2.thisTrialN'
p177
I0
sS'trials.thisRepN'
p178
I6
sS'trials_2.thisTrial'
p179
NsS'trials.thisN'
p180
I12
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p181
g46
sg31
g48
sS'trials.thisTrialN'
p182
I0
sS'trials_2.thisN'
p183
I0
sa(dp184
g20
g21
sS'trials.thisIndex'
p185
g36
(g38
S'\x01\x00\x00\x00'
tRp186
sg22
V
sS'trials_2.thisRepN'
p187
I0
sS'trials_2.thisTrialN'
p188
I0
sS'trials.thisRepN'
p189
I6
sS'trials_2.thisTrial'
p190
NsS'trials.thisN'
p191
I13
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p192
g46
sg31
g60
sS'trials.thisTrialN'
p193
I1
sS'trials_2.thisN'
p194
I0
sa(dp195
g20
g21
sS'trials.thisIndex'
p196
g36
(g38
S'\x00\x00\x00\x00'
tRp197
sg22
V
sS'trials_2.thisRepN'
p198
I0
sS'trials_2.thisTrialN'
p199
I0
sS'trials.thisRepN'
p200
I7
sS'trials_2.thisTrial'
p201
NsS'trials.thisN'
p202
I14
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p203
g46
sg31
g48
sS'trials.thisTrialN'
p204
I0
sS'trials_2.thisN'
p205
I0
sa(dp206
g20
g21
sS'trials.thisIndex'
p207
g36
(g38
S'\x01\x00\x00\x00'
tRp208
sg22
V
sS'trials_2.thisRepN'
p209
I0
sS'trials_2.thisTrialN'
p210
I0
sS'trials.thisRepN'
p211
I7
sS'trials_2.thisTrial'
p212
NsS'trials.thisN'
p213
I15
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p214
g46
sg31
g60
sS'trials.thisTrialN'
p215
I1
sS'trials_2.thisN'
p216
I0
sa(dp217
g20
g21
sS'trials.thisIndex'
p218
g36
(g38
S'\x00\x00\x00\x00'
tRp219
sg22
V
sS'trials_2.thisRepN'
p220
I0
sS'trials_2.thisTrialN'
p221
I0
sS'trials.thisRepN'
p222
I8
sS'trials_2.thisTrial'
p223
NsS'trials.thisN'
p224
I16
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p225
g46
sg31
g48
sS'trials.thisTrialN'
p226
I0
sS'trials_2.thisN'
p227
I0
sa(dp228
g20
g21
sS'trials.thisIndex'
p229
g36
(g38
S'\x01\x00\x00\x00'
tRp230
sg22
V
sS'trials_2.thisRepN'
p231
I0
sS'trials_2.thisTrialN'
p232
I0
sS'trials.thisRepN'
p233
I8
sS'trials_2.thisTrial'
p234
NsS'trials.thisN'
p235
I17
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p236
g46
sg31
g60
sS'trials.thisTrialN'
p237
I1
sS'trials_2.thisN'
p238
I0
sa(dp239
g20
g21
sS'trials.thisIndex'
p240
g36
(g38
S'\x00\x00\x00\x00'
tRp241
sg22
V
sS'trials_2.thisRepN'
p242
I0
sS'trials_2.thisTrialN'
p243
I0
sS'trials.thisRepN'
p244
I9
sS'trials_2.thisTrial'
p245
NsS'trials.thisN'
p246
I18
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p247
g46
sg31
g48
sS'trials.thisTrialN'
p248
I0
sS'trials_2.thisN'
p249
I0
sa(dp250
g20
g21
sS'trials.thisIndex'
p251
g36
(g38
S'\x01\x00\x00\x00'
tRp252
sg22
V
sS'trials_2.thisRepN'
p253
I0
sS'trials_2.thisTrialN'
p254
I0
sS'trials.thisRepN'
p255
I9
sS'trials_2.thisTrial'
p256
NsS'trials.thisN'
p257
I19
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p258
g46
sg31
g60
sS'trials.thisTrialN'
p259
I1
sS'trials_2.thisN'
p260
I0
sa(dp261
g20
g21
sS'trials.thisIndex'
p262
g36
(g38
S'\x00\x00\x00\x00'
tRp263
sg22
V
sS'trials_2.thisRepN'
p264
I0
sS'trials_2.thisTrialN'
p265
I0
sS'trials.thisRepN'
p266
I10
sS'trials_2.thisTrial'
p267
NsS'trials.thisN'
p268
I20
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p269
g46
sg31
g48
sS'trials.thisTrialN'
p270
I0
sS'trials_2.thisN'
p271
I0
sa(dp272
g20
g21
sS'trials.thisIndex'
p273
g36
(g38
S'\x01\x00\x00\x00'
tRp274
sg22
V
sS'trials_2.thisRepN'
p275
I0
sS'trials_2.thisTrialN'
p276
I0
sS'trials.thisRepN'
p277
I10
sS'trials_2.thisTrial'
p278
NsS'trials.thisN'
p279
I21
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p280
g46
sg31
g60
sS'trials.thisTrialN'
p281
I1
sS'trials_2.thisN'
p282
I0
sa(dp283
g20
g21
sS'trials.thisIndex'
p284
g36
(g38
S'\x00\x00\x00\x00'
tRp285
sg22
V
sS'trials_2.thisRepN'
p286
I0
sS'trials_2.thisTrialN'
p287
I0
sS'trials.thisRepN'
p288
I11
sS'trials_2.thisTrial'
p289
NsS'trials.thisN'
p290
I22
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p291
g46
sg31
g48
sS'trials.thisTrialN'
p292
I0
sS'trials_2.thisN'
p293
I0
sa(dp294
g20
g21
sS'trials.thisIndex'
p295
g36
(g38
S'\x01\x00\x00\x00'
tRp296
sg22
V
sS'trials_2.thisRepN'
p297
I0
sS'trials_2.thisTrialN'
p298
I0
sS'trials.thisRepN'
p299
I11
sS'trials_2.thisTrial'
p300
NsS'trials.thisN'
p301
I23
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p302
g46
sg31
g60
sS'trials.thisTrialN'
p303
I1
sS'trials_2.thisN'
p304
I0
sa(dp305
g20
g21
sS'trials.thisIndex'
p306
g36
(g38
S'\x00\x00\x00\x00'
tRp307
sg22
V
sS'trials_2.thisRepN'
p308
I0
sS'trials_2.thisTrialN'
p309
I0
sS'trials.thisRepN'
p310
I12
sS'trials_2.thisTrial'
p311
NsS'trials.thisN'
p312
I24
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p313
g46
sg31
g48
sS'trials.thisTrialN'
p314
I0
sS'trials_2.thisN'
p315
I0
sa(dp316
g20
g21
sS'trials.thisIndex'
p317
g36
(g38
S'\x01\x00\x00\x00'
tRp318
sg22
V
sS'trials_2.thisRepN'
p319
I0
sS'trials_2.thisTrialN'
p320
I0
sS'trials.thisRepN'
p321
I12
sS'trials_2.thisTrial'
p322
NsS'trials.thisN'
p323
I25
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p324
g46
sg31
g60
sS'trials.thisTrialN'
p325
I1
sS'trials_2.thisN'
p326
I0
sa(dp327
g20
g21
sS'trials.thisIndex'
p328
g36
(g38
S'\x00\x00\x00\x00'
tRp329
sg22
V
sS'trials_2.thisRepN'
p330
I0
sS'trials_2.thisTrialN'
p331
I0
sS'trials.thisRepN'
p332
I13
sS'trials_2.thisTrial'
p333
NsS'trials.thisN'
p334
I26
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p335
g46
sg31
g48
sS'trials.thisTrialN'
p336
I0
sS'trials_2.thisN'
p337
I0
sa(dp338
g20
g21
sS'trials.thisIndex'
p339
g36
(g38
S'\x01\x00\x00\x00'
tRp340
sg22
V
sS'trials_2.thisRepN'
p341
I0
sS'trials_2.thisTrialN'
p342
I0
sS'trials.thisRepN'
p343
I13
sS'trials_2.thisTrial'
p344
NsS'trials.thisN'
p345
I27
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p346
g46
sg31
g60
sS'trials.thisTrialN'
p347
I1
sS'trials_2.thisN'
p348
I0
sa(dp349
g20
g21
sS'trials.thisIndex'
p350
g36
(g38
S'\x00\x00\x00\x00'
tRp351
sg22
V
sS'trials_2.thisRepN'
p352
I0
sS'trials_2.thisTrialN'
p353
I0
sS'trials.thisRepN'
p354
I14
sS'trials_2.thisTrial'
p355
NsS'trials.thisN'
p356
I28
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p357
g46
sg31
g48
sS'trials.thisTrialN'
p358
I0
sS'trials_2.thisN'
p359
I0
sa(dp360
g20
g21
sS'trials.thisIndex'
p361
g36
(g38
S'\x01\x00\x00\x00'
tRp362
sg22
V
sS'trials_2.thisRepN'
p363
I0
sS'trials_2.thisTrialN'
p364
I0
sS'trials.thisRepN'
p365
I14
sS'trials_2.thisTrial'
p366
NsS'trials.thisN'
p367
I29
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p368
g46
sg31
g60
sS'trials.thisTrialN'
p369
I1
sS'trials_2.thisN'
p370
I0
sa(dp371
g20
g21
sS'trials.thisIndex'
p372
g36
(g38
S'\x00\x00\x00\x00'
tRp373
sg22
V
sS'trials_2.thisRepN'
p374
I0
sS'trials_2.thisTrialN'
p375
I0
sS'trials.thisRepN'
p376
I15
sS'trials_2.thisTrial'
p377
NsS'trials.thisN'
p378
I30
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p379
g46
sg31
g48
sS'trials.thisTrialN'
p380
I0
sS'trials_2.thisN'
p381
I0
sa(dp382
g20
g21
sS'trials.thisIndex'
p383
g36
(g38
S'\x01\x00\x00\x00'
tRp384
sg22
V
sS'trials_2.thisRepN'
p385
I0
sS'trials_2.thisTrialN'
p386
I0
sS'trials.thisRepN'
p387
I15
sS'trials_2.thisTrial'
p388
NsS'trials.thisN'
p389
I31
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p390
g46
sg31
g60
sS'trials.thisTrialN'
p391
I1
sS'trials_2.thisN'
p392
I0
sa(dp393
g20
g21
sS'trials.thisIndex'
p394
g36
(g38
S'\x00\x00\x00\x00'
tRp395
sg22
V
sS'trials_2.thisRepN'
p396
I0
sS'trials_2.thisTrialN'
p397
I0
sS'trials.thisRepN'
p398
I16
sS'trials_2.thisTrial'
p399
NsS'trials.thisN'
p400
I32
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p401
g46
sg31
g48
sS'trials.thisTrialN'
p402
I0
sS'trials_2.thisN'
p403
I0
sa(dp404
g20
g21
sS'trials.thisIndex'
p405
g36
(g38
S'\x01\x00\x00\x00'
tRp406
sg22
V
sS'trials_2.thisRepN'
p407
I0
sS'trials_2.thisTrialN'
p408
I0
sS'trials.thisRepN'
p409
I16
sS'trials_2.thisTrial'
p410
NsS'trials.thisN'
p411
I33
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p412
g46
sg31
g60
sS'trials.thisTrialN'
p413
I1
sS'trials_2.thisN'
p414
I0
sa(dp415
g20
g21
sS'trials.thisIndex'
p416
g36
(g38
S'\x00\x00\x00\x00'
tRp417
sg22
V
sS'trials_2.thisRepN'
p418
I0
sS'trials_2.thisTrialN'
p419
I0
sS'trials.thisRepN'
p420
I17
sS'trials_2.thisTrial'
p421
NsS'trials.thisN'
p422
I34
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p423
g46
sg31
g48
sS'trials.thisTrialN'
p424
I0
sS'trials_2.thisN'
p425
I0
sa(dp426
g20
g21
sS'trials.thisIndex'
p427
g36
(g38
S'\x01\x00\x00\x00'
tRp428
sg22
V
sS'trials_2.thisRepN'
p429
I0
sS'trials_2.thisTrialN'
p430
I0
sS'trials.thisRepN'
p431
I17
sS'trials_2.thisTrial'
p432
NsS'trials.thisN'
p433
I35
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p434
g46
sg31
g60
sS'trials.thisTrialN'
p435
I1
sS'trials_2.thisN'
p436
I0
sa(dp437
g20
g21
sS'trials.thisIndex'
p438
g36
(g38
S'\x00\x00\x00\x00'
tRp439
sg22
V
sS'trials_2.thisRepN'
p440
I0
sS'trials_2.thisTrialN'
p441
I0
sS'trials.thisRepN'
p442
I18
sS'trials_2.thisTrial'
p443
NsS'trials.thisN'
p444
I36
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p445
g46
sg31
g48
sS'trials.thisTrialN'
p446
I0
sS'trials_2.thisN'
p447
I0
sa(dp448
g20
g21
sS'trials.thisIndex'
p449
g36
(g38
S'\x01\x00\x00\x00'
tRp450
sg22
V
sS'trials_2.thisRepN'
p451
I0
sS'trials_2.thisTrialN'
p452
I0
sS'trials.thisRepN'
p453
I18
sS'trials_2.thisTrial'
p454
NsS'trials.thisN'
p455
I37
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p456
g46
sg31
g60
sS'trials.thisTrialN'
p457
I1
sS'trials_2.thisN'
p458
I0
sa(dp459
g20
g21
sS'trials.thisIndex'
p460
g36
(g38
S'\x00\x00\x00\x00'
tRp461
sg22
V
sS'trials_2.thisRepN'
p462
I0
sS'trials_2.thisTrialN'
p463
I0
sS'trials.thisRepN'
p464
I19
sS'trials_2.thisTrial'
p465
NsS'trials.thisN'
p466
I38
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p467
g46
sg31
g48
sS'trials.thisTrialN'
p468
I0
sS'trials_2.thisN'
p469
I0
sa(dp470
g20
g21
sS'trials.thisIndex'
p471
g36
(g38
S'\x01\x00\x00\x00'
tRp472
sg22
V
sS'trials_2.thisRepN'
p473
I0
sS'trials_2.thisTrialN'
p474
I0
sS'trials.thisRepN'
p475
I19
sS'trials_2.thisTrial'
p476
NsS'trials.thisN'
p477
I39
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p478
g46
sg31
g60
sS'trials.thisTrialN'
p479
I1
sS'trials_2.thisN'
p480
I0
sa(dp481
g20
g21
sS'trials.thisIndex'
p482
g36
(g38
S'\x00\x00\x00\x00'
tRp483
sg22
V
sS'trials_2.thisRepN'
p484
I0
sS'trials_2.thisTrialN'
p485
I0
sS'trials.thisRepN'
p486
I20
sS'trials_2.thisTrial'
p487
NsS'trials.thisN'
p488
I40
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p489
g46
sg31
g48
sS'trials.thisTrialN'
p490
I0
sS'trials_2.thisN'
p491
I0
sa(dp492
g20
g21
sS'trials.thisIndex'
p493
g36
(g38
S'\x01\x00\x00\x00'
tRp494
sg22
V
sS'trials_2.thisRepN'
p495
I0
sS'trials_2.thisTrialN'
p496
I0
sS'trials.thisRepN'
p497
I20
sS'trials_2.thisTrial'
p498
NsS'trials.thisN'
p499
I41
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p500
g46
sg31
g60
sS'trials.thisTrialN'
p501
I1
sS'trials_2.thisN'
p502
I0
sa(dp503
g20
g21
sS'trials.thisIndex'
p504
g36
(g38
S'\x00\x00\x00\x00'
tRp505
sg22
V
sS'trials_2.thisRepN'
p506
I0
sS'trials_2.thisTrialN'
p507
I0
sS'trials.thisRepN'
p508
I21
sS'trials_2.thisTrial'
p509
NsS'trials.thisN'
p510
I42
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p511
g46
sg31
g48
sS'trials.thisTrialN'
p512
I0
sS'trials_2.thisN'
p513
I0
sa(dp514
g20
g21
sS'trials.thisIndex'
p515
g36
(g38
S'\x01\x00\x00\x00'
tRp516
sg22
V
sS'trials_2.thisRepN'
p517
I0
sS'trials_2.thisTrialN'
p518
I0
sS'trials.thisRepN'
p519
I21
sS'trials_2.thisTrial'
p520
NsS'trials.thisN'
p521
I43
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p522
g46
sg31
g60
sS'trials.thisTrialN'
p523
I1
sS'trials_2.thisN'
p524
I0
sa(dp525
g20
g21
sS'trials.thisIndex'
p526
g36
(g38
S'\x00\x00\x00\x00'
tRp527
sg22
V
sS'trials_2.thisRepN'
p528
I0
sS'trials_2.thisTrialN'
p529
I0
sS'trials.thisRepN'
p530
I22
sS'trials_2.thisTrial'
p531
NsS'trials.thisN'
p532
I44
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p533
g46
sg31
g48
sS'trials.thisTrialN'
p534
I0
sS'trials_2.thisN'
p535
I0
sa(dp536
g20
g21
sS'trials.thisIndex'
p537
g36
(g38
S'\x01\x00\x00\x00'
tRp538
sg22
V
sS'trials_2.thisRepN'
p539
I0
sS'trials_2.thisTrialN'
p540
I0
sS'trials.thisRepN'
p541
I22
sS'trials_2.thisTrial'
p542
NsS'trials.thisN'
p543
I45
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p544
g46
sg31
g60
sS'trials.thisTrialN'
p545
I1
sS'trials_2.thisN'
p546
I0
sa(dp547
g20
g21
sS'trials.thisIndex'
p548
g36
(g38
S'\x00\x00\x00\x00'
tRp549
sg22
V
sS'trials_2.thisRepN'
p550
I0
sS'trials_2.thisTrialN'
p551
I0
sS'trials.thisRepN'
p552
I23
sS'trials_2.thisTrial'
p553
NsS'trials.thisN'
p554
I46
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p555
g46
sg31
g48
sS'trials.thisTrialN'
p556
I0
sS'trials_2.thisN'
p557
I0
sa(dp558
g20
g21
sS'trials.thisIndex'
p559
g36
(g38
S'\x01\x00\x00\x00'
tRp560
sg22
V
sS'trials_2.thisRepN'
p561
I0
sS'trials_2.thisTrialN'
p562
I0
sS'trials.thisRepN'
p563
I23
sS'trials_2.thisTrial'
p564
NsS'trials.thisN'
p565
I47
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p566
g46
sg31
g60
sS'trials.thisTrialN'
p567
I1
sS'trials_2.thisN'
p568
I0
sa(dp569
g20
g21
sS'trials.thisIndex'
p570
g36
(g38
S'\x00\x00\x00\x00'
tRp571
sg22
V
sS'trials_2.thisRepN'
p572
I0
sS'trials_2.thisTrialN'
p573
I0
sS'trials.thisRepN'
p574
I24
sS'trials_2.thisTrial'
p575
NsS'trials.thisN'
p576
I48
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p577
g46
sg31
g48
sS'trials.thisTrialN'
p578
I0
sS'trials_2.thisN'
p579
I0
sa(dp580
g20
g21
sS'trials.thisIndex'
p581
g36
(g38
S'\x01\x00\x00\x00'
tRp582
sg22
V
sS'trials_2.thisRepN'
p583
I0
sS'trials_2.thisTrialN'
p584
I0
sS'trials.thisRepN'
p585
I24
sS'trials_2.thisTrial'
p586
NsS'trials.thisN'
p587
I49
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p588
g46
sg31
g60
sS'trials.thisTrialN'
p589
I1
sS'trials_2.thisN'
p590
I0
sa(dp591
g20
g21
sS'trials.thisIndex'
p592
g36
(g38
S'\x00\x00\x00\x00'
tRp593
sg22
V
sS'trials_2.thisRepN'
p594
I0
sS'trials_2.thisTrialN'
p595
I0
sS'trials.thisRepN'
p596
I25
sS'trials_2.thisTrial'
p597
NsS'trials.thisN'
p598
I50
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p599
g46
sg31
g48
sS'trials.thisTrialN'
p600
I0
sS'trials_2.thisN'
p601
I0
sa(dp602
g20
g21
sS'trials.thisIndex'
p603
g36
(g38
S'\x01\x00\x00\x00'
tRp604
sg22
V
sS'trials_2.thisRepN'
p605
I0
sS'trials_2.thisTrialN'
p606
I0
sS'trials.thisRepN'
p607
I25
sS'trials_2.thisTrial'
p608
NsS'trials.thisN'
p609
I51
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p610
g46
sg31
g60
sS'trials.thisTrialN'
p611
I1
sS'trials_2.thisN'
p612
I0
sa(dp613
g20
g21
sS'trials.thisIndex'
p614
g36
(g38
S'\x00\x00\x00\x00'
tRp615
sg22
V
sS'trials_2.thisRepN'
p616
I0
sS'trials_2.thisTrialN'
p617
I0
sS'trials.thisRepN'
p618
I26
sS'trials_2.thisTrial'
p619
NsS'trials.thisN'
p620
I52
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p621
g46
sg31
g48
sS'trials.thisTrialN'
p622
I0
sS'trials_2.thisN'
p623
I0
sa(dp624
g20
g21
sS'trials.thisIndex'
p625
g36
(g38
S'\x01\x00\x00\x00'
tRp626
sg22
V
sS'trials_2.thisRepN'
p627
I0
sS'trials_2.thisTrialN'
p628
I0
sS'trials.thisRepN'
p629
I26
sS'trials_2.thisTrial'
p630
NsS'trials.thisN'
p631
I53
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p632
g46
sg31
g60
sS'trials.thisTrialN'
p633
I1
sS'trials_2.thisN'
p634
I0
sa(dp635
g20
g21
sS'trials.thisIndex'
p636
g36
(g38
S'\x00\x00\x00\x00'
tRp637
sg22
V
sS'trials_2.thisRepN'
p638
I0
sS'trials_2.thisTrialN'
p639
I0
sS'trials.thisRepN'
p640
I27
sS'trials_2.thisTrial'
p641
NsS'trials.thisN'
p642
I54
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p643
g46
sg31
g48
sS'trials.thisTrialN'
p644
I0
sS'trials_2.thisN'
p645
I0
sa(dp646
g20
g21
sS'trials.thisIndex'
p647
g36
(g38
S'\x01\x00\x00\x00'
tRp648
sg22
V
sS'trials_2.thisRepN'
p649
I0
sS'trials_2.thisTrialN'
p650
I0
sS'trials.thisRepN'
p651
I27
sS'trials_2.thisTrial'
p652
NsS'trials.thisN'
p653
I55
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p654
g46
sg31
g60
sS'trials.thisTrialN'
p655
I1
sS'trials_2.thisN'
p656
I0
sa(dp657
g20
g21
sS'trials.thisIndex'
p658
g36
(g38
S'\x00\x00\x00\x00'
tRp659
sg22
V
sS'trials_2.thisRepN'
p660
I0
sS'trials_2.thisTrialN'
p661
I0
sS'trials.thisRepN'
p662
I28
sS'trials_2.thisTrial'
p663
NsS'trials.thisN'
p664
I56
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p665
g46
sg31
g48
sS'trials.thisTrialN'
p666
I0
sS'trials_2.thisN'
p667
I0
sa(dp668
g20
g21
sS'trials.thisIndex'
p669
g36
(g38
S'\x01\x00\x00\x00'
tRp670
sg22
V
sS'trials_2.thisRepN'
p671
I0
sS'trials_2.thisTrialN'
p672
I0
sS'trials.thisRepN'
p673
I28
sS'trials_2.thisTrial'
p674
NsS'trials.thisN'
p675
I57
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p676
g46
sg31
g60
sS'trials.thisTrialN'
p677
I1
sS'trials_2.thisN'
p678
I0
sa(dp679
g20
g21
sS'trials.thisIndex'
p680
g36
(g38
S'\x00\x00\x00\x00'
tRp681
sg22
V
sS'trials_2.thisRepN'
p682
I0
sS'trials_2.thisTrialN'
p683
I0
sS'trials.thisRepN'
p684
I29
sS'trials_2.thisTrial'
p685
NsS'trials.thisN'
p686
I58
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p687
g46
sg31
g48
sS'trials.thisTrialN'
p688
I0
sS'trials_2.thisN'
p689
I0
sa(dp690
g20
g21
sS'trials.thisIndex'
p691
g36
(g38
S'\x01\x00\x00\x00'
tRp692
sg22
V
sS'trials_2.thisRepN'
p693
I0
sS'trials_2.thisTrialN'
p694
I0
sS'trials.thisRepN'
p695
I29
sS'trials_2.thisTrial'
p696
NsS'trials.thisN'
p697
I59
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p698
g46
sg31
g60
sS'trials.thisTrialN'
p699
I1
sS'trials_2.thisN'
p700
I0
sa(dp701
g20
g21
sS'trials.thisIndex'
p702
g36
(g38
S'\x00\x00\x00\x00'
tRp703
sg22
V
sS'trials_2.thisRepN'
p704
I0
sS'trials_2.thisTrialN'
p705
I0
sS'trials.thisRepN'
p706
I30
sS'trials_2.thisTrial'
p707
NsS'trials.thisN'
p708
I60
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p709
g46
sg31
g48
sS'trials.thisTrialN'
p710
I0
sS'trials_2.thisN'
p711
I0
sa(dp712
g20
g21
sS'trials.thisIndex'
p713
g36
(g38
S'\x01\x00\x00\x00'
tRp714
sg22
V
sS'trials_2.thisRepN'
p715
I0
sS'trials_2.thisTrialN'
p716
I0
sS'trials.thisRepN'
p717
I30
sS'trials_2.thisTrial'
p718
NsS'trials.thisN'
p719
I61
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p720
g46
sg31
g60
sS'trials.thisTrialN'
p721
I1
sS'trials_2.thisN'
p722
I0
sa(dp723
g20
g21
sS'trials.thisIndex'
p724
g36
(g38
S'\x00\x00\x00\x00'
tRp725
sg22
V
sS'trials_2.thisRepN'
p726
I0
sS'trials_2.thisTrialN'
p727
I0
sS'trials.thisRepN'
p728
I31
sS'trials_2.thisTrial'
p729
NsS'trials.thisN'
p730
I62
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p731
g46
sg31
g48
sS'trials.thisTrialN'
p732
I0
sS'trials_2.thisN'
p733
I0
sa(dp734
g20
g21
sS'trials.thisIndex'
p735
g36
(g38
S'\x01\x00\x00\x00'
tRp736
sg22
V
sS'trials_2.thisRepN'
p737
I0
sS'trials_2.thisTrialN'
p738
I0
sS'trials.thisRepN'
p739
I31
sS'trials_2.thisTrial'
p740
NsS'trials.thisN'
p741
I63
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p742
g46
sg31
g60
sS'trials.thisTrialN'
p743
I1
sS'trials_2.thisN'
p744
I0
sa(dp745
g20
g21
sS'trials.thisIndex'
p746
g36
(g38
S'\x00\x00\x00\x00'
tRp747
sg22
V
sS'trials_2.thisRepN'
p748
I0
sS'trials_2.thisTrialN'
p749
I0
sS'trials.thisRepN'
p750
I32
sS'trials_2.thisTrial'
p751
NsS'trials.thisN'
p752
I64
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p753
g46
sg31
g48
sS'trials.thisTrialN'
p754
I0
sS'trials_2.thisN'
p755
I0
sa(dp756
g20
g21
sS'trials.thisIndex'
p757
g36
(g38
S'\x01\x00\x00\x00'
tRp758
sg22
V
sS'trials_2.thisRepN'
p759
I0
sS'trials_2.thisTrialN'
p760
I0
sS'trials.thisRepN'
p761
I32
sS'trials_2.thisTrial'
p762
NsS'trials.thisN'
p763
I65
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p764
g46
sg31
g60
sS'trials.thisTrialN'
p765
I1
sS'trials_2.thisN'
p766
I0
sa(dp767
g20
g21
sS'trials.thisIndex'
p768
g36
(g38
S'\x00\x00\x00\x00'
tRp769
sg22
V
sS'trials_2.thisRepN'
p770
I0
sS'trials_2.thisTrialN'
p771
I0
sS'trials.thisRepN'
p772
I33
sS'trials_2.thisTrial'
p773
NsS'trials.thisN'
p774
I66
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p775
g46
sg31
g48
sS'trials.thisTrialN'
p776
I0
sS'trials_2.thisN'
p777
I0
sa(dp778
g20
g21
sS'trials.thisIndex'
p779
g36
(g38
S'\x01\x00\x00\x00'
tRp780
sg22
V
sS'trials_2.thisRepN'
p781
I0
sS'trials_2.thisTrialN'
p782
I0
sS'trials.thisRepN'
p783
I33
sS'trials_2.thisTrial'
p784
NsS'trials.thisN'
p785
I67
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p786
g46
sg31
g60
sS'trials.thisTrialN'
p787
I1
sS'trials_2.thisN'
p788
I0
sa(dp789
g20
g21
sS'trials.thisIndex'
p790
g36
(g38
S'\x00\x00\x00\x00'
tRp791
sg22
V
sS'trials_2.thisRepN'
p792
I0
sS'trials_2.thisTrialN'
p793
I0
sS'trials.thisRepN'
p794
I34
sS'trials_2.thisTrial'
p795
NsS'trials.thisN'
p796
I68
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p797
g46
sg31
g48
sS'trials.thisTrialN'
p798
I0
sS'trials_2.thisN'
p799
I0
sa(dp800
g20
g21
sS'trials.thisIndex'
p801
g36
(g38
S'\x01\x00\x00\x00'
tRp802
sg22
V
sS'trials_2.thisRepN'
p803
I0
sS'trials_2.thisTrialN'
p804
I0
sS'trials.thisRepN'
p805
I34
sS'trials_2.thisTrial'
p806
NsS'trials.thisN'
p807
I69
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p808
g46
sg31
g60
sS'trials.thisTrialN'
p809
I1
sS'trials_2.thisN'
p810
I0
sa(dp811
g20
g21
sS'trials.thisIndex'
p812
g36
(g38
S'\x00\x00\x00\x00'
tRp813
sg22
V
sS'trials_2.thisRepN'
p814
I0
sS'trials_2.thisTrialN'
p815
I0
sS'trials.thisRepN'
p816
I35
sS'trials_2.thisTrial'
p817
NsS'trials.thisN'
p818
I70
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p819
g46
sg31
g48
sS'trials.thisTrialN'
p820
I0
sS'trials_2.thisN'
p821
I0
sa(dp822
g20
g21
sS'trials.thisIndex'
p823
g36
(g38
S'\x01\x00\x00\x00'
tRp824
sg22
V
sS'trials_2.thisRepN'
p825
I0
sS'trials_2.thisTrialN'
p826
I0
sS'trials.thisRepN'
p827
I35
sS'trials_2.thisTrial'
p828
NsS'trials.thisN'
p829
I71
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p830
g46
sg31
g60
sS'trials.thisTrialN'
p831
I1
sS'trials_2.thisN'
p832
I0
sa(dp833
g20
g21
sS'trials.thisIndex'
p834
g36
(g38
S'\x00\x00\x00\x00'
tRp835
sg22
V
sS'trials_2.thisRepN'
p836
I0
sS'trials_2.thisTrialN'
p837
I0
sS'trials.thisRepN'
p838
I36
sS'trials_2.thisTrial'
p839
NsS'trials.thisN'
p840
I72
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p841
g46
sg31
g48
sS'trials.thisTrialN'
p842
I0
sS'trials_2.thisN'
p843
I0
sa(dp844
g20
g21
sS'trials.thisIndex'
p845
g36
(g38
S'\x01\x00\x00\x00'
tRp846
sg22
V
sS'trials_2.thisRepN'
p847
I0
sS'trials_2.thisTrialN'
p848
I0
sS'trials.thisRepN'
p849
I36
sS'trials_2.thisTrial'
p850
NsS'trials.thisN'
p851
I73
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p852
g46
sg31
g60
sS'trials.thisTrialN'
p853
I1
sS'trials_2.thisN'
p854
I0
sa(dp855
g20
g21
sS'trials.thisIndex'
p856
g36
(g38
S'\x00\x00\x00\x00'
tRp857
sg22
V
sS'trials_2.thisRepN'
p858
I0
sS'trials_2.thisTrialN'
p859
I0
sS'trials.thisRepN'
p860
I37
sS'trials_2.thisTrial'
p861
NsS'trials.thisN'
p862
I74
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p863
g46
sg31
g48
sS'trials.thisTrialN'
p864
I0
sS'trials_2.thisN'
p865
I0
sa(dp866
g20
g21
sS'trials.thisIndex'
p867
g36
(g38
S'\x01\x00\x00\x00'
tRp868
sg22
V
sS'trials_2.thisRepN'
p869
I0
sS'trials_2.thisTrialN'
p870
I0
sS'trials.thisRepN'
p871
I37
sS'trials_2.thisTrial'
p872
NsS'trials.thisN'
p873
I75
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p874
g46
sg31
g60
sS'trials.thisTrialN'
p875
I1
sS'trials_2.thisN'
p876
I0
sa(dp877
g20
g21
sS'trials.thisIndex'
p878
g36
(g38
S'\x00\x00\x00\x00'
tRp879
sg22
V
sS'trials_2.thisRepN'
p880
I0
sS'trials_2.thisTrialN'
p881
I0
sS'trials.thisRepN'
p882
I38
sS'trials_2.thisTrial'
p883
NsS'trials.thisN'
p884
I76
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p885
g46
sg31
g48
sS'trials.thisTrialN'
p886
I0
sS'trials_2.thisN'
p887
I0
sa(dp888
g20
g21
sS'trials.thisIndex'
p889
g36
(g38
S'\x01\x00\x00\x00'
tRp890
sg22
V
sS'trials_2.thisRepN'
p891
I0
sS'trials_2.thisTrialN'
p892
I0
sS'trials.thisRepN'
p893
I38
sS'trials_2.thisTrial'
p894
NsS'trials.thisN'
p895
I77
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p896
g46
sg31
g60
sS'trials.thisTrialN'
p897
I1
sS'trials_2.thisN'
p898
I0
sa(dp899
g20
g21
sS'trials.thisIndex'
p900
g36
(g38
S'\x00\x00\x00\x00'
tRp901
sg22
V
sS'trials_2.thisRepN'
p902
I0
sS'trials_2.thisTrialN'
p903
I0
sS'trials.thisRepN'
p904
I39
sS'trials_2.thisTrial'
p905
NsS'trials.thisN'
p906
I78
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p907
g46
sg31
g48
sS'trials.thisTrialN'
p908
I0
sS'trials_2.thisN'
p909
I0
sa(dp910
g20
g21
sS'trials.thisIndex'
p911
g36
(g38
S'\x01\x00\x00\x00'
tRp912
sg22
V
sS'trials_2.thisRepN'
p913
I0
sS'trials_2.thisTrialN'
p914
I0
sS'trials.thisRepN'
p915
I39
sS'trials_2.thisTrial'
p916
NsS'trials.thisN'
p917
I79
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p918
g46
sg31
g60
sS'trials.thisTrialN'
p919
I1
sS'trials_2.thisN'
p920
I0
sa(dp921
g20
g21
sS'trials.thisIndex'
p922
g36
(g38
S'\x00\x00\x00\x00'
tRp923
sg22
V
sS'trials_2.thisRepN'
p924
I0
sS'trials_2.thisTrialN'
p925
I0
sS'trials.thisRepN'
p926
I40
sS'trials_2.thisTrial'
p927
NsS'trials.thisN'
p928
I80
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p929
g46
sg31
g48
sS'trials.thisTrialN'
p930
I0
sS'trials_2.thisN'
p931
I0
sa(dp932
g20
g21
sS'trials.thisIndex'
p933
g36
(g38
S'\x01\x00\x00\x00'
tRp934
sg22
V
sS'trials_2.thisRepN'
p935
I0
sS'trials_2.thisTrialN'
p936
I0
sS'trials.thisRepN'
p937
I40
sS'trials_2.thisTrial'
p938
NsS'trials.thisN'
p939
I81
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p940
g46
sg31
g60
sS'trials.thisTrialN'
p941
I1
sS'trials_2.thisN'
p942
I0
sa(dp943
g20
g21
sS'trials.thisIndex'
p944
g36
(g38
S'\x00\x00\x00\x00'
tRp945
sg22
V
sS'trials_2.thisRepN'
p946
I0
sS'trials_2.thisTrialN'
p947
I0
sS'trials.thisRepN'
p948
I41
sS'trials_2.thisTrial'
p949
NsS'trials.thisN'
p950
I82
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p951
g46
sg31
g48
sS'trials.thisTrialN'
p952
I0
sS'trials_2.thisN'
p953
I0
sa(dp954
g20
g21
sS'trials.thisIndex'
p955
g36
(g38
S'\x01\x00\x00\x00'
tRp956
sg22
V
sS'trials_2.thisRepN'
p957
I0
sS'trials_2.thisTrialN'
p958
I0
sS'trials.thisRepN'
p959
I41
sS'trials_2.thisTrial'
p960
NsS'trials.thisN'
p961
I83
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p962
g46
sg31
g60
sS'trials.thisTrialN'
p963
I1
sS'trials_2.thisN'
p964
I0
sa(dp965
g20
g21
sS'trials.thisIndex'
p966
g36
(g38
S'\x00\x00\x00\x00'
tRp967
sg22
V
sS'trials_2.thisRepN'
p968
I0
sS'trials_2.thisTrialN'
p969
I0
sS'trials.thisRepN'
p970
I42
sS'trials_2.thisTrial'
p971
NsS'trials.thisN'
p972
I84
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p973
g46
sg31
g48
sS'trials.thisTrialN'
p974
I0
sS'trials_2.thisN'
p975
I0
sa(dp976
g20
g21
sS'trials.thisIndex'
p977
g36
(g38
S'\x01\x00\x00\x00'
tRp978
sg22
V
sS'trials_2.thisRepN'
p979
I0
sS'trials_2.thisTrialN'
p980
I0
sS'trials.thisRepN'
p981
I42
sS'trials_2.thisTrial'
p982
NsS'trials.thisN'
p983
I85
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p984
g46
sg31
g60
sS'trials.thisTrialN'
p985
I1
sS'trials_2.thisN'
p986
I0
sa(dp987
g20
g21
sS'trials.thisIndex'
p988
g36
(g38
S'\x00\x00\x00\x00'
tRp989
sg22
V
sS'trials_2.thisRepN'
p990
I0
sS'trials_2.thisTrialN'
p991
I0
sS'trials.thisRepN'
p992
I43
sS'trials_2.thisTrial'
p993
NsS'trials.thisN'
p994
I86
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p995
g46
sg31
g48
sS'trials.thisTrialN'
p996
I0
sS'trials_2.thisN'
p997
I0
sa(dp998
g20
g21
sS'trials.thisIndex'
p999
g36
(g38
S'\x01\x00\x00\x00'
tRp1000
sg22
V
sS'trials_2.thisRepN'
p1001
I0
sS'trials_2.thisTrialN'
p1002
I0
sS'trials.thisRepN'
p1003
I43
sS'trials_2.thisTrial'
p1004
NsS'trials.thisN'
p1005
I87
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1006
g46
sg31
g60
sS'trials.thisTrialN'
p1007
I1
sS'trials_2.thisN'
p1008
I0
sa(dp1009
g20
g21
sS'trials.thisIndex'
p1010
g36
(g38
S'\x00\x00\x00\x00'
tRp1011
sg22
V
sS'trials_2.thisRepN'
p1012
I0
sS'trials_2.thisTrialN'
p1013
I0
sS'trials.thisRepN'
p1014
I44
sS'trials_2.thisTrial'
p1015
NsS'trials.thisN'
p1016
I88
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1017
g46
sg31
g48
sS'trials.thisTrialN'
p1018
I0
sS'trials_2.thisN'
p1019
I0
sa(dp1020
g20
g21
sS'trials.thisIndex'
p1021
g36
(g38
S'\x01\x00\x00\x00'
tRp1022
sg22
V
sS'trials_2.thisRepN'
p1023
I0
sS'trials_2.thisTrialN'
p1024
I0
sS'trials.thisRepN'
p1025
I44
sS'trials_2.thisTrial'
p1026
NsS'trials.thisN'
p1027
I89
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1028
g46
sg31
g60
sS'trials.thisTrialN'
p1029
I1
sS'trials_2.thisN'
p1030
I0
sa(dp1031
g20
g21
sS'trials.thisIndex'
p1032
g36
(g38
S'\x00\x00\x00\x00'
tRp1033
sg22
V
sS'trials_2.thisRepN'
p1034
I0
sS'trials_2.thisTrialN'
p1035
I0
sS'trials.thisRepN'
p1036
I45
sS'trials_2.thisTrial'
p1037
NsS'trials.thisN'
p1038
I90
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1039
g46
sg31
g48
sS'trials.thisTrialN'
p1040
I0
sS'trials_2.thisN'
p1041
I0
sa(dp1042
g20
g21
sS'trials.thisIndex'
p1043
g36
(g38
S'\x01\x00\x00\x00'
tRp1044
sg22
V
sS'trials_2.thisRepN'
p1045
I0
sS'trials_2.thisTrialN'
p1046
I0
sS'trials.thisRepN'
p1047
I45
sS'trials_2.thisTrial'
p1048
NsS'trials.thisN'
p1049
I91
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1050
g46
sg31
g60
sS'trials.thisTrialN'
p1051
I1
sS'trials_2.thisN'
p1052
I0
sa(dp1053
g20
g21
sS'trials.thisIndex'
p1054
g36
(g38
S'\x00\x00\x00\x00'
tRp1055
sg22
V
sS'trials_2.thisRepN'
p1056
I0
sS'trials_2.thisTrialN'
p1057
I0
sS'trials.thisRepN'
p1058
I46
sS'trials_2.thisTrial'
p1059
NsS'trials.thisN'
p1060
I92
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1061
g46
sg31
g48
sS'trials.thisTrialN'
p1062
I0
sS'trials_2.thisN'
p1063
I0
sa(dp1064
g20
g21
sS'trials.thisIndex'
p1065
g36
(g38
S'\x01\x00\x00\x00'
tRp1066
sg22
V
sS'trials_2.thisRepN'
p1067
I0
sS'trials_2.thisTrialN'
p1068
I0
sS'trials.thisRepN'
p1069
I46
sS'trials_2.thisTrial'
p1070
NsS'trials.thisN'
p1071
I93
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1072
g46
sg31
g60
sS'trials.thisTrialN'
p1073
I1
sS'trials_2.thisN'
p1074
I0
sa(dp1075
g20
g21
sS'trials.thisIndex'
p1076
g36
(g38
S'\x00\x00\x00\x00'
tRp1077
sg22
V
sS'trials_2.thisRepN'
p1078
I0
sS'trials_2.thisTrialN'
p1079
I0
sS'trials.thisRepN'
p1080
I47
sS'trials_2.thisTrial'
p1081
NsS'trials.thisN'
p1082
I94
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1083
g46
sg31
g48
sS'trials.thisTrialN'
p1084
I0
sS'trials_2.thisN'
p1085
I0
sa(dp1086
g20
g21
sS'trials.thisIndex'
p1087
g36
(g38
S'\x01\x00\x00\x00'
tRp1088
sg22
V
sS'trials_2.thisRepN'
p1089
I0
sS'trials_2.thisTrialN'
p1090
I0
sS'trials.thisRepN'
p1091
I47
sS'trials_2.thisTrial'
p1092
NsS'trials.thisN'
p1093
I95
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1094
g46
sg31
g60
sS'trials.thisTrialN'
p1095
I1
sS'trials_2.thisN'
p1096
I0
sa(dp1097
g20
g21
sS'trials.thisIndex'
p1098
g36
(g38
S'\x00\x00\x00\x00'
tRp1099
sg22
V
sS'trials_2.thisRepN'
p1100
I0
sS'trials_2.thisTrialN'
p1101
I0
sS'trials.thisRepN'
p1102
I48
sS'trials_2.thisTrial'
p1103
NsS'trials.thisN'
p1104
I96
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1105
g46
sg31
g48
sS'trials.thisTrialN'
p1106
I0
sS'trials_2.thisN'
p1107
I0
sa(dp1108
g20
g21
sS'trials.thisIndex'
p1109
g36
(g38
S'\x01\x00\x00\x00'
tRp1110
sg22
V
sS'trials_2.thisRepN'
p1111
I0
sS'trials_2.thisTrialN'
p1112
I0
sS'trials.thisRepN'
p1113
I48
sS'trials_2.thisTrial'
p1114
NsS'trials.thisN'
p1115
I97
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1116
g46
sg31
g60
sS'trials.thisTrialN'
p1117
I1
sS'trials_2.thisN'
p1118
I0
sa(dp1119
g20
g21
sS'trials.thisIndex'
p1120
g36
(g38
S'\x00\x00\x00\x00'
tRp1121
sg22
V
sS'trials_2.thisRepN'
p1122
I0
sS'trials_2.thisTrialN'
p1123
I0
sS'trials.thisRepN'
p1124
I49
sS'trials_2.thisTrial'
p1125
NsS'trials.thisN'
p1126
I98
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1127
g46
sg31
g48
sS'trials.thisTrialN'
p1128
I0
sS'trials_2.thisN'
p1129
I0
sa(dp1130
g20
g21
sS'trials.thisIndex'
p1131
g36
(g38
S'\x01\x00\x00\x00'
tRp1132
sg22
V
sS'trials_2.thisRepN'
p1133
I0
sS'trials_2.thisTrialN'
p1134
I0
sS'trials.thisRepN'
p1135
I49
sS'trials_2.thisTrial'
p1136
NsS'trials.thisN'
p1137
I99
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1138
g46
sg31
g60
sS'trials.thisTrialN'
p1139
I1
sS'trials_2.thisN'
p1140
I0
sa(dp1141
g20
g21
sS'trials.thisIndex'
p1142
g36
(g38
S'\x00\x00\x00\x00'
tRp1143
sg22
V
sS'trials_2.thisRepN'
p1144
I0
sS'trials_2.thisTrialN'
p1145
I0
sS'trials.thisRepN'
p1146
I50
sS'trials_2.thisTrial'
p1147
NsS'trials.thisN'
p1148
I100
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1149
g46
sg31
g48
sS'trials.thisTrialN'
p1150
I0
sS'trials_2.thisN'
p1151
I0
sa(dp1152
g20
g21
sS'trials.thisIndex'
p1153
g36
(g38
S'\x01\x00\x00\x00'
tRp1154
sg22
V
sS'trials_2.thisRepN'
p1155
I0
sS'trials_2.thisTrialN'
p1156
I0
sS'trials.thisRepN'
p1157
I50
sS'trials_2.thisTrial'
p1158
NsS'trials.thisN'
p1159
I101
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1160
g46
sg31
g60
sS'trials.thisTrialN'
p1161
I1
sS'trials_2.thisN'
p1162
I0
sa(dp1163
g20
g21
sS'trials.thisIndex'
p1164
g36
(g38
S'\x00\x00\x00\x00'
tRp1165
sg22
V
sS'trials_2.thisRepN'
p1166
I0
sS'trials_2.thisTrialN'
p1167
I0
sS'trials.thisRepN'
p1168
I51
sS'trials_2.thisTrial'
p1169
NsS'trials.thisN'
p1170
I102
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1171
g46
sg31
g48
sS'trials.thisTrialN'
p1172
I0
sS'trials_2.thisN'
p1173
I0
sa(dp1174
g20
g21
sS'trials.thisIndex'
p1175
g36
(g38
S'\x01\x00\x00\x00'
tRp1176
sg22
V
sS'trials_2.thisRepN'
p1177
I0
sS'trials_2.thisTrialN'
p1178
I0
sS'trials.thisRepN'
p1179
I51
sS'trials_2.thisTrial'
p1180
NsS'trials.thisN'
p1181
I103
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1182
g46
sg31
g60
sS'trials.thisTrialN'
p1183
I1
sS'trials_2.thisN'
p1184
I0
sa(dp1185
g20
g21
sS'trials.thisIndex'
p1186
g36
(g38
S'\x00\x00\x00\x00'
tRp1187
sg22
V
sS'trials_2.thisRepN'
p1188
I0
sS'trials_2.thisTrialN'
p1189
I0
sS'trials.thisRepN'
p1190
I52
sS'trials_2.thisTrial'
p1191
NsS'trials.thisN'
p1192
I104
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1193
g46
sg31
g48
sS'trials.thisTrialN'
p1194
I0
sS'trials_2.thisN'
p1195
I0
sa(dp1196
g20
g21
sS'trials.thisIndex'
p1197
g36
(g38
S'\x01\x00\x00\x00'
tRp1198
sg22
V
sS'trials_2.thisRepN'
p1199
I0
sS'trials_2.thisTrialN'
p1200
I0
sS'trials.thisRepN'
p1201
I52
sS'trials_2.thisTrial'
p1202
NsS'trials.thisN'
p1203
I105
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1204
g46
sg31
g60
sS'trials.thisTrialN'
p1205
I1
sS'trials_2.thisN'
p1206
I0
sa(dp1207
g20
g21
sS'trials.thisIndex'
p1208
g36
(g38
S'\x00\x00\x00\x00'
tRp1209
sg22
V
sS'trials_2.thisRepN'
p1210
I0
sS'trials_2.thisTrialN'
p1211
I0
sS'trials.thisRepN'
p1212
I53
sS'trials_2.thisTrial'
p1213
NsS'trials.thisN'
p1214
I106
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1215
g46
sg31
g48
sS'trials.thisTrialN'
p1216
I0
sS'trials_2.thisN'
p1217
I0
sa(dp1218
g20
g21
sS'trials.thisIndex'
p1219
g36
(g38
S'\x01\x00\x00\x00'
tRp1220
sg22
V
sS'trials_2.thisRepN'
p1221
I0
sS'trials_2.thisTrialN'
p1222
I0
sS'trials.thisRepN'
p1223
I53
sS'trials_2.thisTrial'
p1224
NsS'trials.thisN'
p1225
I107
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1226
g46
sg31
g60
sS'trials.thisTrialN'
p1227
I1
sS'trials_2.thisN'
p1228
I0
sa(dp1229
g20
g21
sS'trials.thisIndex'
p1230
g36
(g38
S'\x00\x00\x00\x00'
tRp1231
sg22
V
sS'trials_2.thisRepN'
p1232
I0
sS'trials_2.thisTrialN'
p1233
I0
sS'trials.thisRepN'
p1234
I54
sS'trials_2.thisTrial'
p1235
NsS'trials.thisN'
p1236
I108
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1237
g46
sg31
g48
sS'trials.thisTrialN'
p1238
I0
sS'trials_2.thisN'
p1239
I0
sa(dp1240
g20
g21
sS'trials.thisIndex'
p1241
g36
(g38
S'\x01\x00\x00\x00'
tRp1242
sg22
V
sS'trials_2.thisRepN'
p1243
I0
sS'trials_2.thisTrialN'
p1244
I0
sS'trials.thisRepN'
p1245
I54
sS'trials_2.thisTrial'
p1246
NsS'trials.thisN'
p1247
I109
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1248
g46
sg31
g60
sS'trials.thisTrialN'
p1249
I1
sS'trials_2.thisN'
p1250
I0
sa(dp1251
g20
g21
sS'trials.thisIndex'
p1252
g36
(g38
S'\x00\x00\x00\x00'
tRp1253
sg22
V
sS'trials_2.thisRepN'
p1254
I0
sS'trials_2.thisTrialN'
p1255
I0
sS'trials.thisRepN'
p1256
I55
sS'trials_2.thisTrial'
p1257
NsS'trials.thisN'
p1258
I110
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1259
g46
sg31
g48
sS'trials.thisTrialN'
p1260
I0
sS'trials_2.thisN'
p1261
I0
sa(dp1262
g20
g21
sS'trials.thisIndex'
p1263
g36
(g38
S'\x01\x00\x00\x00'
tRp1264
sg22
V
sS'trials_2.thisRepN'
p1265
I0
sS'trials_2.thisTrialN'
p1266
I0
sS'trials.thisRepN'
p1267
I55
sS'trials_2.thisTrial'
p1268
NsS'trials.thisN'
p1269
I111
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1270
g46
sg31
g60
sS'trials.thisTrialN'
p1271
I1
sS'trials_2.thisN'
p1272
I0
sa(dp1273
g20
g21
sS'trials.thisIndex'
p1274
g36
(g38
S'\x00\x00\x00\x00'
tRp1275
sg22
V
sS'trials_2.thisRepN'
p1276
I0
sS'trials_2.thisTrialN'
p1277
I0
sS'trials.thisRepN'
p1278
I56
sS'trials_2.thisTrial'
p1279
NsS'trials.thisN'
p1280
I112
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1281
g46
sg31
g48
sS'trials.thisTrialN'
p1282
I0
sS'trials_2.thisN'
p1283
I0
sa(dp1284
g20
g21
sS'trials.thisIndex'
p1285
g36
(g38
S'\x01\x00\x00\x00'
tRp1286
sg22
V
sS'trials_2.thisRepN'
p1287
I0
sS'trials_2.thisTrialN'
p1288
I0
sS'trials.thisRepN'
p1289
I56
sS'trials_2.thisTrial'
p1290
NsS'trials.thisN'
p1291
I113
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1292
g46
sg31
g60
sS'trials.thisTrialN'
p1293
I1
sS'trials_2.thisN'
p1294
I0
sa(dp1295
g20
g21
sS'trials.thisIndex'
p1296
g36
(g38
S'\x00\x00\x00\x00'
tRp1297
sg22
V
sS'trials_2.thisRepN'
p1298
I0
sS'trials_2.thisTrialN'
p1299
I0
sS'trials.thisRepN'
p1300
I57
sS'trials_2.thisTrial'
p1301
NsS'trials.thisN'
p1302
I114
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1303
g46
sg31
g48
sS'trials.thisTrialN'
p1304
I0
sS'trials_2.thisN'
p1305
I0
sa(dp1306
g20
g21
sS'trials.thisIndex'
p1307
g36
(g38
S'\x01\x00\x00\x00'
tRp1308
sg22
V
sS'trials_2.thisRepN'
p1309
I0
sS'trials_2.thisTrialN'
p1310
I0
sS'trials.thisRepN'
p1311
I57
sS'trials_2.thisTrial'
p1312
NsS'trials.thisN'
p1313
I115
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1314
g46
sg31
g60
sS'trials.thisTrialN'
p1315
I1
sS'trials_2.thisN'
p1316
I0
sa(dp1317
g20
g21
sS'trials.thisIndex'
p1318
g36
(g38
S'\x00\x00\x00\x00'
tRp1319
sg22
V
sS'trials_2.thisRepN'
p1320
I0
sS'trials_2.thisTrialN'
p1321
I0
sS'trials.thisRepN'
p1322
I58
sS'trials_2.thisTrial'
p1323
NsS'trials.thisN'
p1324
I116
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1325
g46
sg31
g48
sS'trials.thisTrialN'
p1326
I0
sS'trials_2.thisN'
p1327
I0
sa(dp1328
g20
g21
sS'trials.thisIndex'
p1329
g36
(g38
S'\x01\x00\x00\x00'
tRp1330
sg22
V
sS'trials_2.thisRepN'
p1331
I0
sS'trials_2.thisTrialN'
p1332
I0
sS'trials.thisRepN'
p1333
I58
sS'trials_2.thisTrial'
p1334
NsS'trials.thisN'
p1335
I117
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1336
g46
sg31
g60
sS'trials.thisTrialN'
p1337
I1
sS'trials_2.thisN'
p1338
I0
sa(dp1339
g20
g21
sS'trials.thisIndex'
p1340
g36
(g38
S'\x00\x00\x00\x00'
tRp1341
sg22
V
sS'trials_2.thisRepN'
p1342
I0
sS'trials_2.thisTrialN'
p1343
I0
sS'trials.thisRepN'
p1344
I59
sS'trials_2.thisTrial'
p1345
NsS'trials.thisN'
p1346
I118
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1347
g46
sg31
g48
sS'trials.thisTrialN'
p1348
I0
sS'trials_2.thisN'
p1349
I0
sa(dp1350
g20
g21
sS'trials.thisIndex'
p1351
g36
(g38
S'\x01\x00\x00\x00'
tRp1352
sg22
V
sS'trials_2.thisRepN'
p1353
I0
sS'trials_2.thisTrialN'
p1354
I0
sS'trials.thisRepN'
p1355
I59
sS'trials_2.thisTrial'
p1356
NsS'trials.thisN'
p1357
I119
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1358
g46
sg31
g60
sS'trials.thisTrialN'
p1359
I1
sS'trials_2.thisN'
p1360
I0
sa(dp1361
g20
g21
sS'trials.thisIndex'
p1362
g36
(g38
S'\x00\x00\x00\x00'
tRp1363
sg22
V
sS'trials_2.thisRepN'
p1364
I0
sS'trials_2.thisTrialN'
p1365
I0
sS'trials.thisRepN'
p1366
I60
sS'trials_2.thisTrial'
p1367
NsS'trials.thisN'
p1368
I120
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1369
g46
sg31
g48
sS'trials.thisTrialN'
p1370
I0
sS'trials_2.thisN'
p1371
I0
sa(dp1372
g20
g21
sS'trials.thisIndex'
p1373
g36
(g38
S'\x01\x00\x00\x00'
tRp1374
sg22
V
sS'trials_2.thisRepN'
p1375
I0
sS'trials_2.thisTrialN'
p1376
I0
sS'trials.thisRepN'
p1377
I60
sS'trials_2.thisTrial'
p1378
NsS'trials.thisN'
p1379
I121
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1380
g46
sg31
g60
sS'trials.thisTrialN'
p1381
I1
sS'trials_2.thisN'
p1382
I0
sa(dp1383
g20
g21
sS'trials.thisIndex'
p1384
g36
(g38
S'\x00\x00\x00\x00'
tRp1385
sg22
V
sS'trials_2.thisRepN'
p1386
I0
sS'trials_2.thisTrialN'
p1387
I0
sS'trials.thisRepN'
p1388
I61
sS'trials_2.thisTrial'
p1389
NsS'trials.thisN'
p1390
I122
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1391
g46
sg31
g48
sS'trials.thisTrialN'
p1392
I0
sS'trials_2.thisN'
p1393
I0
sa(dp1394
g20
g21
sS'trials.thisIndex'
p1395
g36
(g38
S'\x01\x00\x00\x00'
tRp1396
sg22
V
sS'trials_2.thisRepN'
p1397
I0
sS'trials_2.thisTrialN'
p1398
I0
sS'trials.thisRepN'
p1399
I61
sS'trials_2.thisTrial'
p1400
NsS'trials.thisN'
p1401
I123
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1402
g46
sg31
g60
sS'trials.thisTrialN'
p1403
I1
sS'trials_2.thisN'
p1404
I0
sa(dp1405
g20
g21
sS'trials.thisIndex'
p1406
g36
(g38
S'\x00\x00\x00\x00'
tRp1407
sg22
V
sS'trials_2.thisRepN'
p1408
I0
sS'trials_2.thisTrialN'
p1409
I0
sS'trials.thisRepN'
p1410
I62
sS'trials_2.thisTrial'
p1411
NsS'trials.thisN'
p1412
I124
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1413
g46
sg31
g48
sS'trials.thisTrialN'
p1414
I0
sS'trials_2.thisN'
p1415
I0
sa(dp1416
g20
g21
sS'trials.thisIndex'
p1417
g36
(g38
S'\x01\x00\x00\x00'
tRp1418
sg22
V
sS'trials_2.thisRepN'
p1419
I0
sS'trials_2.thisTrialN'
p1420
I0
sS'trials.thisRepN'
p1421
I62
sS'trials_2.thisTrial'
p1422
NsS'trials.thisN'
p1423
I125
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1424
g46
sg31
g60
sS'trials.thisTrialN'
p1425
I1
sS'trials_2.thisN'
p1426
I0
sa(dp1427
g20
g21
sS'trials.thisIndex'
p1428
g36
(g38
S'\x00\x00\x00\x00'
tRp1429
sg22
V
sS'trials_2.thisRepN'
p1430
I0
sS'trials_2.thisTrialN'
p1431
I0
sS'trials.thisRepN'
p1432
I63
sS'trials_2.thisTrial'
p1433
NsS'trials.thisN'
p1434
I126
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1435
g46
sg31
g48
sS'trials.thisTrialN'
p1436
I0
sS'trials_2.thisN'
p1437
I0
sa(dp1438
g20
g21
sS'trials.thisIndex'
p1439
g36
(g38
S'\x01\x00\x00\x00'
tRp1440
sg22
V
sS'trials_2.thisRepN'
p1441
I0
sS'trials_2.thisTrialN'
p1442
I0
sS'trials.thisRepN'
p1443
I63
sS'trials_2.thisTrial'
p1444
NsS'trials.thisN'
p1445
I127
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1446
g46
sg31
g60
sS'trials.thisTrialN'
p1447
I1
sS'trials_2.thisN'
p1448
I0
sa(dp1449
g20
g21
sS'trials.thisIndex'
p1450
g36
(g38
S'\x00\x00\x00\x00'
tRp1451
sg22
V
sS'trials_2.thisRepN'
p1452
I0
sS'trials_2.thisTrialN'
p1453
I0
sS'trials.thisRepN'
p1454
I64
sS'trials_2.thisTrial'
p1455
NsS'trials.thisN'
p1456
I128
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1457
g46
sg31
g48
sS'trials.thisTrialN'
p1458
I0
sS'trials_2.thisN'
p1459
I0
sa(dp1460
g20
g21
sS'trials.thisIndex'
p1461
g36
(g38
S'\x01\x00\x00\x00'
tRp1462
sg22
V
sS'trials_2.thisRepN'
p1463
I0
sS'trials_2.thisTrialN'
p1464
I0
sS'trials.thisRepN'
p1465
I64
sS'trials_2.thisTrial'
p1466
NsS'trials.thisN'
p1467
I129
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1468
g46
sg31
g60
sS'trials.thisTrialN'
p1469
I1
sS'trials_2.thisN'
p1470
I0
sa(dp1471
g20
g21
sS'trials.thisIndex'
p1472
g36
(g38
S'\x00\x00\x00\x00'
tRp1473
sg22
V
sS'trials_2.thisRepN'
p1474
I0
sS'trials_2.thisTrialN'
p1475
I0
sS'trials.thisRepN'
p1476
I65
sS'trials_2.thisTrial'
p1477
NsS'trials.thisN'
p1478
I130
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1479
g46
sg31
g48
sS'trials.thisTrialN'
p1480
I0
sS'trials_2.thisN'
p1481
I0
sa(dp1482
g20
g21
sS'trials.thisIndex'
p1483
g36
(g38
S'\x01\x00\x00\x00'
tRp1484
sg22
V
sS'trials_2.thisRepN'
p1485
I0
sS'trials_2.thisTrialN'
p1486
I0
sS'trials.thisRepN'
p1487
I65
sS'trials_2.thisTrial'
p1488
NsS'trials.thisN'
p1489
I131
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1490
g46
sg31
g60
sS'trials.thisTrialN'
p1491
I1
sS'trials_2.thisN'
p1492
I0
sa(dp1493
g20
g21
sS'trials.thisIndex'
p1494
g36
(g38
S'\x00\x00\x00\x00'
tRp1495
sg22
V
sS'trials_2.thisRepN'
p1496
I0
sS'trials_2.thisTrialN'
p1497
I0
sS'trials.thisRepN'
p1498
I66
sS'trials_2.thisTrial'
p1499
NsS'trials.thisN'
p1500
I132
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1501
g46
sg31
g48
sS'trials.thisTrialN'
p1502
I0
sS'trials_2.thisN'
p1503
I0
sa(dp1504
g20
g21
sS'trials.thisIndex'
p1505
g36
(g38
S'\x01\x00\x00\x00'
tRp1506
sg22
V
sS'trials_2.thisRepN'
p1507
I0
sS'trials_2.thisTrialN'
p1508
I0
sS'trials.thisRepN'
p1509
I66
sS'trials_2.thisTrial'
p1510
NsS'trials.thisN'
p1511
I133
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1512
g46
sg31
g60
sS'trials.thisTrialN'
p1513
I1
sS'trials_2.thisN'
p1514
I0
sa(dp1515
g20
g21
sS'trials.thisIndex'
p1516
g36
(g38
S'\x00\x00\x00\x00'
tRp1517
sg22
V
sS'trials_2.thisRepN'
p1518
I0
sS'trials_2.thisTrialN'
p1519
I0
sS'trials.thisRepN'
p1520
I67
sS'trials_2.thisTrial'
p1521
NsS'trials.thisN'
p1522
I134
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1523
g46
sg31
g48
sS'trials.thisTrialN'
p1524
I0
sS'trials_2.thisN'
p1525
I0
sa(dp1526
g20
g21
sS'trials.thisIndex'
p1527
g36
(g38
S'\x01\x00\x00\x00'
tRp1528
sg22
V
sS'trials_2.thisRepN'
p1529
I0
sS'trials_2.thisTrialN'
p1530
I0
sS'trials.thisRepN'
p1531
I67
sS'trials_2.thisTrial'
p1532
NsS'trials.thisN'
p1533
I135
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1534
g46
sg31
g60
sS'trials.thisTrialN'
p1535
I1
sS'trials_2.thisN'
p1536
I0
sa(dp1537
g20
g21
sS'trials.thisIndex'
p1538
g36
(g38
S'\x00\x00\x00\x00'
tRp1539
sg22
V
sS'trials_2.thisRepN'
p1540
I0
sS'trials_2.thisTrialN'
p1541
I0
sS'trials.thisRepN'
p1542
I68
sS'trials_2.thisTrial'
p1543
NsS'trials.thisN'
p1544
I136
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1545
g46
sg31
g48
sS'trials.thisTrialN'
p1546
I0
sS'trials_2.thisN'
p1547
I0
sa(dp1548
g20
g21
sS'trials.thisIndex'
p1549
g36
(g38
S'\x01\x00\x00\x00'
tRp1550
sg22
V
sS'trials_2.thisRepN'
p1551
I0
sS'trials_2.thisTrialN'
p1552
I0
sS'trials.thisRepN'
p1553
I68
sS'trials_2.thisTrial'
p1554
NsS'trials.thisN'
p1555
I137
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1556
g46
sg31
g60
sS'trials.thisTrialN'
p1557
I1
sS'trials_2.thisN'
p1558
I0
sa(dp1559
g20
g21
sS'trials.thisIndex'
p1560
g36
(g38
S'\x00\x00\x00\x00'
tRp1561
sg22
V
sS'trials_2.thisRepN'
p1562
I0
sS'trials_2.thisTrialN'
p1563
I0
sS'trials.thisRepN'
p1564
I69
sS'trials_2.thisTrial'
p1565
NsS'trials.thisN'
p1566
I138
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1567
g46
sg31
g48
sS'trials.thisTrialN'
p1568
I0
sS'trials_2.thisN'
p1569
I0
sa(dp1570
g20
g21
sS'trials.thisIndex'
p1571
g36
(g38
S'\x01\x00\x00\x00'
tRp1572
sg22
V
sS'trials_2.thisRepN'
p1573
I0
sS'trials_2.thisTrialN'
p1574
I0
sS'trials.thisRepN'
p1575
I69
sS'trials_2.thisTrial'
p1576
NsS'trials.thisN'
p1577
I139
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1578
g46
sg31
g60
sS'trials.thisTrialN'
p1579
I1
sS'trials_2.thisN'
p1580
I0
sa(dp1581
g20
g21
sS'trials.thisIndex'
p1582
g36
(g38
S'\x00\x00\x00\x00'
tRp1583
sg22
V
sS'trials_2.thisRepN'
p1584
I0
sS'trials_2.thisTrialN'
p1585
I0
sS'trials.thisRepN'
p1586
I70
sS'trials_2.thisTrial'
p1587
NsS'trials.thisN'
p1588
I140
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1589
g46
sg31
g48
sS'trials.thisTrialN'
p1590
I0
sS'trials_2.thisN'
p1591
I0
sa(dp1592
g20
g21
sS'trials.thisIndex'
p1593
g36
(g38
S'\x01\x00\x00\x00'
tRp1594
sg22
V
sS'trials_2.thisRepN'
p1595
I0
sS'trials_2.thisTrialN'
p1596
I0
sS'trials.thisRepN'
p1597
I70
sS'trials_2.thisTrial'
p1598
NsS'trials.thisN'
p1599
I141
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1600
g46
sg31
g60
sS'trials.thisTrialN'
p1601
I1
sS'trials_2.thisN'
p1602
I0
sa(dp1603
g20
g21
sS'trials.thisIndex'
p1604
g36
(g38
S'\x00\x00\x00\x00'
tRp1605
sg22
V
sS'trials_2.thisRepN'
p1606
I0
sS'trials_2.thisTrialN'
p1607
I0
sS'trials.thisRepN'
p1608
I71
sS'trials_2.thisTrial'
p1609
NsS'trials.thisN'
p1610
I142
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1611
g46
sg31
g48
sS'trials.thisTrialN'
p1612
I0
sS'trials_2.thisN'
p1613
I0
sa(dp1614
g20
g21
sS'trials.thisIndex'
p1615
g36
(g38
S'\x01\x00\x00\x00'
tRp1616
sg22
V
sS'trials_2.thisRepN'
p1617
I0
sS'trials_2.thisTrialN'
p1618
I0
sS'trials.thisRepN'
p1619
I71
sS'trials_2.thisTrial'
p1620
NsS'trials.thisN'
p1621
I143
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1622
g46
sg31
g60
sS'trials.thisTrialN'
p1623
I1
sS'trials_2.thisN'
p1624
I0
sa(dp1625
g20
g21
sS'trials.thisIndex'
p1626
g36
(g38
S'\x00\x00\x00\x00'
tRp1627
sg22
V
sS'trials_2.thisRepN'
p1628
I0
sS'trials_2.thisTrialN'
p1629
I0
sS'trials.thisRepN'
p1630
I72
sS'trials_2.thisTrial'
p1631
NsS'trials.thisN'
p1632
I144
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1633
g46
sg31
g48
sS'trials.thisTrialN'
p1634
I0
sS'trials_2.thisN'
p1635
I0
sa(dp1636
g20
g21
sS'trials.thisIndex'
p1637
g36
(g38
S'\x01\x00\x00\x00'
tRp1638
sg22
V
sS'trials_2.thisRepN'
p1639
I0
sS'trials_2.thisTrialN'
p1640
I0
sS'trials.thisRepN'
p1641
I72
sS'trials_2.thisTrial'
p1642
NsS'trials.thisN'
p1643
I145
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1644
g46
sg31
g60
sS'trials.thisTrialN'
p1645
I1
sS'trials_2.thisN'
p1646
I0
sa(dp1647
g20
g21
sS'trials.thisIndex'
p1648
g36
(g38
S'\x00\x00\x00\x00'
tRp1649
sg22
V
sS'trials_2.thisRepN'
p1650
I0
sS'trials_2.thisTrialN'
p1651
I0
sS'trials.thisRepN'
p1652
I73
sS'trials_2.thisTrial'
p1653
NsS'trials.thisN'
p1654
I146
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1655
g46
sg31
g48
sS'trials.thisTrialN'
p1656
I0
sS'trials_2.thisN'
p1657
I0
sa(dp1658
g20
g21
sS'trials.thisIndex'
p1659
g36
(g38
S'\x01\x00\x00\x00'
tRp1660
sg22
V
sS'trials_2.thisRepN'
p1661
I0
sS'trials_2.thisTrialN'
p1662
I0
sS'trials.thisRepN'
p1663
I73
sS'trials_2.thisTrial'
p1664
NsS'trials.thisN'
p1665
I147
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1666
g46
sg31
g60
sS'trials.thisTrialN'
p1667
I1
sS'trials_2.thisN'
p1668
I0
sa(dp1669
g20
g21
sS'trials.thisIndex'
p1670
g36
(g38
S'\x00\x00\x00\x00'
tRp1671
sg22
V
sS'trials_2.thisRepN'
p1672
I0
sS'trials_2.thisTrialN'
p1673
I0
sS'trials.thisRepN'
p1674
I74
sS'trials_2.thisTrial'
p1675
NsS'trials.thisN'
p1676
I148
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1677
g46
sg31
g48
sS'trials.thisTrialN'
p1678
I0
sS'trials_2.thisN'
p1679
I0
sa(dp1680
g20
g21
sS'trials.thisIndex'
p1681
g36
(g38
S'\x01\x00\x00\x00'
tRp1682
sg22
V
sS'trials_2.thisRepN'
p1683
I0
sS'trials_2.thisTrialN'
p1684
I0
sS'trials.thisRepN'
p1685
I74
sS'trials_2.thisTrial'
p1686
NsS'trials.thisN'
p1687
I149
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1688
g46
sg31
g60
sS'trials.thisTrialN'
p1689
I1
sS'trials_2.thisN'
p1690
I0
sa(dp1691
g20
g21
sS'trials.thisIndex'
p1692
g36
(g38
S'\x00\x00\x00\x00'
tRp1693
sg22
V
sS'trials_2.thisRepN'
p1694
I0
sS'trials_2.thisTrialN'
p1695
I0
sS'trials.thisRepN'
p1696
I75
sS'trials_2.thisTrial'
p1697
NsS'trials.thisN'
p1698
I150
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1699
g46
sg31
g48
sS'trials.thisTrialN'
p1700
I0
sS'trials_2.thisN'
p1701
I0
sa(dp1702
g20
g21
sS'trials.thisIndex'
p1703
g36
(g38
S'\x01\x00\x00\x00'
tRp1704
sg22
V
sS'trials_2.thisRepN'
p1705
I0
sS'trials_2.thisTrialN'
p1706
I0
sS'trials.thisRepN'
p1707
I75
sS'trials_2.thisTrial'
p1708
NsS'trials.thisN'
p1709
I151
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1710
g46
sg31
g60
sS'trials.thisTrialN'
p1711
I1
sS'trials_2.thisN'
p1712
I0
sa(dp1713
g20
g21
sS'trials.thisIndex'
p1714
g36
(g38
S'\x00\x00\x00\x00'
tRp1715
sg22
V
sS'trials_2.thisRepN'
p1716
I0
sS'trials_2.thisTrialN'
p1717
I0
sS'trials.thisRepN'
p1718
I76
sS'trials_2.thisTrial'
p1719
NsS'trials.thisN'
p1720
I152
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1721
g46
sg31
g48
sS'trials.thisTrialN'
p1722
I0
sS'trials_2.thisN'
p1723
I0
sa(dp1724
g20
g21
sS'trials.thisIndex'
p1725
g36
(g38
S'\x01\x00\x00\x00'
tRp1726
sg22
V
sS'trials_2.thisRepN'
p1727
I0
sS'trials_2.thisTrialN'
p1728
I0
sS'trials.thisRepN'
p1729
I76
sS'trials_2.thisTrial'
p1730
NsS'trials.thisN'
p1731
I153
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1732
g46
sg31
g60
sS'trials.thisTrialN'
p1733
I1
sS'trials_2.thisN'
p1734
I0
sa(dp1735
g20
g21
sS'trials.thisIndex'
p1736
g36
(g38
S'\x00\x00\x00\x00'
tRp1737
sg22
V
sS'trials_2.thisRepN'
p1738
I0
sS'trials_2.thisTrialN'
p1739
I0
sS'trials.thisRepN'
p1740
I77
sS'trials_2.thisTrial'
p1741
NsS'trials.thisN'
p1742
I154
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1743
g46
sg31
g48
sS'trials.thisTrialN'
p1744
I0
sS'trials_2.thisN'
p1745
I0
sa(dp1746
g20
g21
sS'trials.thisIndex'
p1747
g36
(g38
S'\x01\x00\x00\x00'
tRp1748
sg22
V
sS'trials_2.thisRepN'
p1749
I0
sS'trials_2.thisTrialN'
p1750
I0
sS'trials.thisRepN'
p1751
I77
sS'trials_2.thisTrial'
p1752
NsS'trials.thisN'
p1753
I155
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1754
g46
sg31
g60
sS'trials.thisTrialN'
p1755
I1
sS'trials_2.thisN'
p1756
I0
sa(dp1757
g20
g21
sS'trials.thisIndex'
p1758
g36
(g38
S'\x00\x00\x00\x00'
tRp1759
sg22
V
sS'trials_2.thisRepN'
p1760
I0
sS'trials_2.thisTrialN'
p1761
I0
sS'trials.thisRepN'
p1762
I78
sS'trials_2.thisTrial'
p1763
NsS'trials.thisN'
p1764
I156
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1765
g46
sg31
g48
sS'trials.thisTrialN'
p1766
I0
sS'trials_2.thisN'
p1767
I0
sa(dp1768
g20
g21
sS'trials.thisIndex'
p1769
g36
(g38
S'\x01\x00\x00\x00'
tRp1770
sg22
V
sS'trials_2.thisRepN'
p1771
I0
sS'trials_2.thisTrialN'
p1772
I0
sS'trials.thisRepN'
p1773
I78
sS'trials_2.thisTrial'
p1774
NsS'trials.thisN'
p1775
I157
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1776
g46
sg31
g60
sS'trials.thisTrialN'
p1777
I1
sS'trials_2.thisN'
p1778
I0
sa(dp1779
g20
g21
sS'trials.thisIndex'
p1780
g36
(g38
S'\x00\x00\x00\x00'
tRp1781
sg22
V
sS'trials_2.thisRepN'
p1782
I0
sS'trials_2.thisTrialN'
p1783
I0
sS'trials.thisRepN'
p1784
I79
sS'trials_2.thisTrial'
p1785
NsS'trials.thisN'
p1786
I158
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1787
g46
sg31
g48
sS'trials.thisTrialN'
p1788
I0
sS'trials_2.thisN'
p1789
I0
sa(dp1790
g20
g21
sS'trials.thisIndex'
p1791
g36
(g38
S'\x01\x00\x00\x00'
tRp1792
sg22
V
sS'trials_2.thisRepN'
p1793
I0
sS'trials_2.thisTrialN'
p1794
I0
sS'trials.thisRepN'
p1795
I79
sS'trials_2.thisTrial'
p1796
NsS'trials.thisN'
p1797
I159
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1798
g46
sg31
g60
sS'trials.thisTrialN'
p1799
I1
sS'trials_2.thisN'
p1800
I0
sa(dp1801
g20
g21
sS'trials.thisIndex'
p1802
g36
(g38
S'\x00\x00\x00\x00'
tRp1803
sg22
V
sS'trials_2.thisRepN'
p1804
I0
sS'trials_2.thisTrialN'
p1805
I0
sS'trials.thisRepN'
p1806
I80
sS'trials_2.thisTrial'
p1807
NsS'trials.thisN'
p1808
I160
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1809
g46
sg31
g48
sS'trials.thisTrialN'
p1810
I0
sS'trials_2.thisN'
p1811
I0
sa(dp1812
g20
g21
sS'trials.thisIndex'
p1813
g36
(g38
S'\x01\x00\x00\x00'
tRp1814
sg22
V
sS'trials_2.thisRepN'
p1815
I0
sS'trials_2.thisTrialN'
p1816
I0
sS'trials.thisRepN'
p1817
I80
sS'trials_2.thisTrial'
p1818
NsS'trials.thisN'
p1819
I161
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1820
g46
sg31
g60
sS'trials.thisTrialN'
p1821
I1
sS'trials_2.thisN'
p1822
I0
sa(dp1823
g20
g21
sS'trials.thisIndex'
p1824
g36
(g38
S'\x00\x00\x00\x00'
tRp1825
sg22
V
sS'trials_2.thisRepN'
p1826
I0
sS'trials_2.thisTrialN'
p1827
I0
sS'trials.thisRepN'
p1828
I81
sS'trials_2.thisTrial'
p1829
NsS'trials.thisN'
p1830
I162
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1831
g46
sg31
g48
sS'trials.thisTrialN'
p1832
I0
sS'trials_2.thisN'
p1833
I0
sa(dp1834
g20
g21
sS'trials.thisIndex'
p1835
g36
(g38
S'\x01\x00\x00\x00'
tRp1836
sg22
V
sS'trials_2.thisRepN'
p1837
I0
sS'trials_2.thisTrialN'
p1838
I0
sS'trials.thisRepN'
p1839
I81
sS'trials_2.thisTrial'
p1840
NsS'trials.thisN'
p1841
I163
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1842
g46
sg31
g60
sS'trials.thisTrialN'
p1843
I1
sS'trials_2.thisN'
p1844
I0
sa(dp1845
g20
g21
sS'trials.thisIndex'
p1846
g36
(g38
S'\x00\x00\x00\x00'
tRp1847
sg22
V
sS'trials_2.thisRepN'
p1848
I0
sS'trials_2.thisTrialN'
p1849
I0
sS'trials.thisRepN'
p1850
I82
sS'trials_2.thisTrial'
p1851
NsS'trials.thisN'
p1852
I164
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1853
g46
sg31
g48
sS'trials.thisTrialN'
p1854
I0
sS'trials_2.thisN'
p1855
I0
sa(dp1856
g20
g21
sS'trials.thisIndex'
p1857
g36
(g38
S'\x01\x00\x00\x00'
tRp1858
sg22
V
sS'trials_2.thisRepN'
p1859
I0
sS'trials_2.thisTrialN'
p1860
I0
sS'trials.thisRepN'
p1861
I82
sS'trials_2.thisTrial'
p1862
NsS'trials.thisN'
p1863
I165
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1864
g46
sg31
g60
sS'trials.thisTrialN'
p1865
I1
sS'trials_2.thisN'
p1866
I0
sa(dp1867
g20
g21
sS'trials.thisIndex'
p1868
g36
(g38
S'\x00\x00\x00\x00'
tRp1869
sg22
V
sS'trials_2.thisRepN'
p1870
I0
sS'trials_2.thisTrialN'
p1871
I0
sS'trials.thisRepN'
p1872
I83
sS'trials_2.thisTrial'
p1873
NsS'trials.thisN'
p1874
I166
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1875
g46
sg31
g48
sS'trials.thisTrialN'
p1876
I0
sS'trials_2.thisN'
p1877
I0
sa(dp1878
g20
g21
sS'trials.thisIndex'
p1879
g36
(g38
S'\x01\x00\x00\x00'
tRp1880
sg22
V
sS'trials_2.thisRepN'
p1881
I0
sS'trials_2.thisTrialN'
p1882
I0
sS'trials.thisRepN'
p1883
I83
sS'trials_2.thisTrial'
p1884
NsS'trials.thisN'
p1885
I167
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1886
g46
sg31
g60
sS'trials.thisTrialN'
p1887
I1
sS'trials_2.thisN'
p1888
I0
sa(dp1889
g20
g21
sS'trials.thisIndex'
p1890
g36
(g38
S'\x00\x00\x00\x00'
tRp1891
sg22
V
sS'trials_2.thisRepN'
p1892
I0
sS'trials_2.thisTrialN'
p1893
I0
sS'trials.thisRepN'
p1894
I84
sS'trials_2.thisTrial'
p1895
NsS'trials.thisN'
p1896
I168
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1897
g46
sg31
g48
sS'trials.thisTrialN'
p1898
I0
sS'trials_2.thisN'
p1899
I0
sa(dp1900
g20
g21
sS'trials.thisIndex'
p1901
g36
(g38
S'\x01\x00\x00\x00'
tRp1902
sg22
V
sS'trials_2.thisRepN'
p1903
I0
sS'trials_2.thisTrialN'
p1904
I0
sS'trials.thisRepN'
p1905
I84
sS'trials_2.thisTrial'
p1906
NsS'trials.thisN'
p1907
I169
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1908
g46
sg31
g60
sS'trials.thisTrialN'
p1909
I1
sS'trials_2.thisN'
p1910
I0
sa(dp1911
g20
g21
sS'trials.thisIndex'
p1912
g36
(g38
S'\x00\x00\x00\x00'
tRp1913
sg22
V
sS'trials_2.thisRepN'
p1914
I0
sS'trials_2.thisTrialN'
p1915
I0
sS'trials.thisRepN'
p1916
I85
sS'trials_2.thisTrial'
p1917
NsS'trials.thisN'
p1918
I170
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1919
g46
sg31
g48
sS'trials.thisTrialN'
p1920
I0
sS'trials_2.thisN'
p1921
I0
sa(dp1922
g20
g21
sS'trials.thisIndex'
p1923
g36
(g38
S'\x01\x00\x00\x00'
tRp1924
sg22
V
sS'trials_2.thisRepN'
p1925
I0
sS'trials_2.thisTrialN'
p1926
I0
sS'trials.thisRepN'
p1927
I85
sS'trials_2.thisTrial'
p1928
NsS'trials.thisN'
p1929
I171
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1930
g46
sg31
g60
sS'trials.thisTrialN'
p1931
I1
sS'trials_2.thisN'
p1932
I0
sa(dp1933
g20
g21
sS'trials.thisIndex'
p1934
g36
(g38
S'\x00\x00\x00\x00'
tRp1935
sg22
V
sS'trials_2.thisRepN'
p1936
I0
sS'trials_2.thisTrialN'
p1937
I0
sS'trials.thisRepN'
p1938
I86
sS'trials_2.thisTrial'
p1939
NsS'trials.thisN'
p1940
I172
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1941
g46
sg31
g48
sS'trials.thisTrialN'
p1942
I0
sS'trials_2.thisN'
p1943
I0
sa(dp1944
g20
g21
sS'trials.thisIndex'
p1945
g36
(g38
S'\x01\x00\x00\x00'
tRp1946
sg22
V
sS'trials_2.thisRepN'
p1947
I0
sS'trials_2.thisTrialN'
p1948
I0
sS'trials.thisRepN'
p1949
I86
sS'trials_2.thisTrial'
p1950
NsS'trials.thisN'
p1951
I173
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1952
g46
sg31
g60
sS'trials.thisTrialN'
p1953
I1
sS'trials_2.thisN'
p1954
I0
sa(dp1955
g20
g21
sS'trials.thisIndex'
p1956
g36
(g38
S'\x00\x00\x00\x00'
tRp1957
sg22
V
sS'trials_2.thisRepN'
p1958
I0
sS'trials_2.thisTrialN'
p1959
I0
sS'trials.thisRepN'
p1960
I87
sS'trials_2.thisTrial'
p1961
NsS'trials.thisN'
p1962
I174
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1963
g46
sg31
g48
sS'trials.thisTrialN'
p1964
I0
sS'trials_2.thisN'
p1965
I0
sa(dp1966
g20
g21
sS'trials.thisIndex'
p1967
g36
(g38
S'\x01\x00\x00\x00'
tRp1968
sg22
V
sS'trials_2.thisRepN'
p1969
I0
sS'trials_2.thisTrialN'
p1970
I0
sS'trials.thisRepN'
p1971
I87
sS'trials_2.thisTrial'
p1972
NsS'trials.thisN'
p1973
I175
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1974
g46
sg31
g60
sS'trials.thisTrialN'
p1975
I1
sS'trials_2.thisN'
p1976
I0
sa(dp1977
g20
g21
sS'trials.thisIndex'
p1978
g36
(g38
S'\x00\x00\x00\x00'
tRp1979
sg22
V
sS'trials_2.thisRepN'
p1980
I0
sS'trials_2.thisTrialN'
p1981
I0
sS'trials.thisRepN'
p1982
I88
sS'trials_2.thisTrial'
p1983
NsS'trials.thisN'
p1984
I176
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1985
g46
sg31
g48
sS'trials.thisTrialN'
p1986
I0
sS'trials_2.thisN'
p1987
I0
sa(dp1988
g20
g21
sS'trials.thisIndex'
p1989
g36
(g38
S'\x01\x00\x00\x00'
tRp1990
sg22
V
sS'trials_2.thisRepN'
p1991
I0
sS'trials_2.thisTrialN'
p1992
I0
sS'trials.thisRepN'
p1993
I88
sS'trials_2.thisTrial'
p1994
NsS'trials.thisN'
p1995
I177
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p1996
g46
sg31
g60
sS'trials.thisTrialN'
p1997
I1
sS'trials_2.thisN'
p1998
I0
sa(dp1999
g20
g21
sS'trials.thisIndex'
p2000
g36
(g38
S'\x00\x00\x00\x00'
tRp2001
sg22
V
sS'trials_2.thisRepN'
p2002
I0
sS'trials_2.thisTrialN'
p2003
I0
sS'trials.thisRepN'
p2004
I89
sS'trials_2.thisTrial'
p2005
NsS'trials.thisN'
p2006
I178
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2007
g46
sg31
g48
sS'trials.thisTrialN'
p2008
I0
sS'trials_2.thisN'
p2009
I0
sa(dp2010
g20
g21
sS'trials.thisIndex'
p2011
g36
(g38
S'\x01\x00\x00\x00'
tRp2012
sg22
V
sS'trials_2.thisRepN'
p2013
I0
sS'trials_2.thisTrialN'
p2014
I0
sS'trials.thisRepN'
p2015
I89
sS'trials_2.thisTrial'
p2016
NsS'trials.thisN'
p2017
I179
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2018
g46
sg31
g60
sS'trials.thisTrialN'
p2019
I1
sS'trials_2.thisN'
p2020
I0
sa(dp2021
g20
g21
sS'trials.thisIndex'
p2022
g36
(g38
S'\x00\x00\x00\x00'
tRp2023
sg22
V
sS'trials_2.thisRepN'
p2024
I0
sS'trials_2.thisTrialN'
p2025
I0
sS'trials.thisRepN'
p2026
I90
sS'trials_2.thisTrial'
p2027
NsS'trials.thisN'
p2028
I180
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2029
g46
sg31
g48
sS'trials.thisTrialN'
p2030
I0
sS'trials_2.thisN'
p2031
I0
sa(dp2032
g20
g21
sS'trials.thisIndex'
p2033
g36
(g38
S'\x01\x00\x00\x00'
tRp2034
sg22
V
sS'trials_2.thisRepN'
p2035
I0
sS'trials_2.thisTrialN'
p2036
I0
sS'trials.thisRepN'
p2037
I90
sS'trials_2.thisTrial'
p2038
NsS'trials.thisN'
p2039
I181
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2040
g46
sg31
g60
sS'trials.thisTrialN'
p2041
I1
sS'trials_2.thisN'
p2042
I0
sa(dp2043
g20
g21
sS'trials.thisIndex'
p2044
g36
(g38
S'\x00\x00\x00\x00'
tRp2045
sg22
V
sS'trials_2.thisRepN'
p2046
I0
sS'trials_2.thisTrialN'
p2047
I0
sS'trials.thisRepN'
p2048
I91
sS'trials_2.thisTrial'
p2049
NsS'trials.thisN'
p2050
I182
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2051
g46
sg31
g48
sS'trials.thisTrialN'
p2052
I0
sS'trials_2.thisN'
p2053
I0
sa(dp2054
g20
g21
sS'trials.thisIndex'
p2055
g36
(g38
S'\x01\x00\x00\x00'
tRp2056
sg22
V
sS'trials_2.thisRepN'
p2057
I0
sS'trials_2.thisTrialN'
p2058
I0
sS'trials.thisRepN'
p2059
I91
sS'trials_2.thisTrial'
p2060
NsS'trials.thisN'
p2061
I183
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2062
g46
sg31
g60
sS'trials.thisTrialN'
p2063
I1
sS'trials_2.thisN'
p2064
I0
sa(dp2065
g20
g21
sS'trials.thisIndex'
p2066
g36
(g38
S'\x00\x00\x00\x00'
tRp2067
sg22
V
sS'trials_2.thisRepN'
p2068
I0
sS'trials_2.thisTrialN'
p2069
I0
sS'trials.thisRepN'
p2070
I92
sS'trials_2.thisTrial'
p2071
NsS'trials.thisN'
p2072
I184
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2073
g46
sg31
g48
sS'trials.thisTrialN'
p2074
I0
sS'trials_2.thisN'
p2075
I0
sa(dp2076
g20
g21
sS'trials.thisIndex'
p2077
g36
(g38
S'\x01\x00\x00\x00'
tRp2078
sg22
V
sS'trials_2.thisRepN'
p2079
I0
sS'trials_2.thisTrialN'
p2080
I0
sS'trials.thisRepN'
p2081
I92
sS'trials_2.thisTrial'
p2082
NsS'trials.thisN'
p2083
I185
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2084
g46
sg31
g60
sS'trials.thisTrialN'
p2085
I1
sS'trials_2.thisN'
p2086
I0
sa(dp2087
g20
g21
sS'trials.thisIndex'
p2088
g36
(g38
S'\x00\x00\x00\x00'
tRp2089
sg22
V
sS'trials_2.thisRepN'
p2090
I0
sS'trials_2.thisTrialN'
p2091
I0
sS'trials.thisRepN'
p2092
I93
sS'trials_2.thisTrial'
p2093
NsS'trials.thisN'
p2094
I186
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2095
g46
sg31
g48
sS'trials.thisTrialN'
p2096
I0
sS'trials_2.thisN'
p2097
I0
sa(dp2098
g20
g21
sS'trials.thisIndex'
p2099
g36
(g38
S'\x01\x00\x00\x00'
tRp2100
sg22
V
sS'trials_2.thisRepN'
p2101
I0
sS'trials_2.thisTrialN'
p2102
I0
sS'trials.thisRepN'
p2103
I93
sS'trials_2.thisTrial'
p2104
NsS'trials.thisN'
p2105
I187
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2106
g46
sg31
g60
sS'trials.thisTrialN'
p2107
I1
sS'trials_2.thisN'
p2108
I0
sa(dp2109
g20
g21
sS'trials.thisIndex'
p2110
g36
(g38
S'\x00\x00\x00\x00'
tRp2111
sg22
V
sS'trials_2.thisRepN'
p2112
I0
sS'trials_2.thisTrialN'
p2113
I0
sS'trials.thisRepN'
p2114
I94
sS'trials_2.thisTrial'
p2115
NsS'trials.thisN'
p2116
I188
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2117
g46
sg31
g48
sS'trials.thisTrialN'
p2118
I0
sS'trials_2.thisN'
p2119
I0
sa(dp2120
g20
g21
sS'trials.thisIndex'
p2121
g36
(g38
S'\x01\x00\x00\x00'
tRp2122
sg22
V
sS'trials_2.thisRepN'
p2123
I0
sS'trials_2.thisTrialN'
p2124
I0
sS'trials.thisRepN'
p2125
I94
sS'trials_2.thisTrial'
p2126
NsS'trials.thisN'
p2127
I189
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2128
g46
sg31
g60
sS'trials.thisTrialN'
p2129
I1
sS'trials_2.thisN'
p2130
I0
sa(dp2131
g20
g21
sS'trials.thisIndex'
p2132
g36
(g38
S'\x00\x00\x00\x00'
tRp2133
sg22
V
sS'trials_2.thisRepN'
p2134
I0
sS'trials_2.thisTrialN'
p2135
I0
sS'trials.thisRepN'
p2136
I95
sS'trials_2.thisTrial'
p2137
NsS'trials.thisN'
p2138
I190
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2139
g46
sg31
g48
sS'trials.thisTrialN'
p2140
I0
sS'trials_2.thisN'
p2141
I0
sa(dp2142
g20
g21
sS'trials.thisIndex'
p2143
g36
(g38
S'\x01\x00\x00\x00'
tRp2144
sg22
V
sS'trials_2.thisRepN'
p2145
I0
sS'trials_2.thisTrialN'
p2146
I0
sS'trials.thisRepN'
p2147
I95
sS'trials_2.thisTrial'
p2148
NsS'trials.thisN'
p2149
I191
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2150
g46
sg31
g60
sS'trials.thisTrialN'
p2151
I1
sS'trials_2.thisN'
p2152
I0
sa(dp2153
g20
g21
sS'trials.thisIndex'
p2154
g36
(g38
S'\x00\x00\x00\x00'
tRp2155
sg22
V
sS'trials_2.thisRepN'
p2156
I0
sS'trials_2.thisTrialN'
p2157
I0
sS'trials.thisRepN'
p2158
I96
sS'trials_2.thisTrial'
p2159
NsS'trials.thisN'
p2160
I192
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2161
g46
sg31
g48
sS'trials.thisTrialN'
p2162
I0
sS'trials_2.thisN'
p2163
I0
sa(dp2164
g20
g21
sS'trials.thisIndex'
p2165
g36
(g38
S'\x01\x00\x00\x00'
tRp2166
sg22
V
sS'trials_2.thisRepN'
p2167
I0
sS'trials_2.thisTrialN'
p2168
I0
sS'trials.thisRepN'
p2169
I96
sS'trials_2.thisTrial'
p2170
NsS'trials.thisN'
p2171
I193
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2172
g46
sg31
g60
sS'trials.thisTrialN'
p2173
I1
sS'trials_2.thisN'
p2174
I0
sa(dp2175
g20
g21
sS'trials.thisIndex'
p2176
g36
(g38
S'\x00\x00\x00\x00'
tRp2177
sg22
V
sS'trials_2.thisRepN'
p2178
I0
sS'trials_2.thisTrialN'
p2179
I0
sS'trials.thisRepN'
p2180
I97
sS'trials_2.thisTrial'
p2181
NsS'trials.thisN'
p2182
I194
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2183
g46
sg31
g48
sS'trials.thisTrialN'
p2184
I0
sS'trials_2.thisN'
p2185
I0
sa(dp2186
g20
g21
sS'trials.thisIndex'
p2187
g36
(g38
S'\x01\x00\x00\x00'
tRp2188
sg22
V
sS'trials_2.thisRepN'
p2189
I0
sS'trials_2.thisTrialN'
p2190
I0
sS'trials.thisRepN'
p2191
I97
sS'trials_2.thisTrial'
p2192
NsS'trials.thisN'
p2193
I195
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2194
g46
sg31
g60
sS'trials.thisTrialN'
p2195
I1
sS'trials_2.thisN'
p2196
I0
sa(dp2197
g20
g21
sS'trials.thisIndex'
p2198
g36
(g38
S'\x00\x00\x00\x00'
tRp2199
sg22
V
sS'trials_2.thisRepN'
p2200
I0
sS'trials_2.thisTrialN'
p2201
I0
sS'trials.thisRepN'
p2202
I98
sS'trials_2.thisTrial'
p2203
NsS'trials.thisN'
p2204
I196
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2205
g46
sg31
g48
sS'trials.thisTrialN'
p2206
I0
sS'trials_2.thisN'
p2207
I0
sa(dp2208
g20
g21
sS'trials.thisIndex'
p2209
g36
(g38
S'\x01\x00\x00\x00'
tRp2210
sg22
V
sS'trials_2.thisRepN'
p2211
I0
sS'trials_2.thisTrialN'
p2212
I0
sS'trials.thisRepN'
p2213
I98
sS'trials_2.thisTrial'
p2214
NsS'trials.thisN'
p2215
I197
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2216
g46
sg31
g60
sS'trials.thisTrialN'
p2217
I1
sS'trials_2.thisN'
p2218
I0
sa(dp2219
g20
g21
sS'trials.thisIndex'
p2220
g36
(g38
S'\x00\x00\x00\x00'
tRp2221
sg22
V
sS'trials_2.thisRepN'
p2222
I0
sS'trials_2.thisTrialN'
p2223
I0
sS'trials.thisRepN'
p2224
I99
sS'trials_2.thisTrial'
p2225
NsS'trials.thisN'
p2226
I198
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2227
g46
sg31
g48
sS'trials.thisTrialN'
p2228
I0
sS'trials_2.thisN'
p2229
I0
sa(dp2230
g20
g21
sS'trials.thisIndex'
p2231
g36
(g38
S'\x01\x00\x00\x00'
tRp2232
sg22
V
sS'trials_2.thisRepN'
p2233
I0
sS'trials_2.thisTrialN'
p2234
I0
sS'trials.thisRepN'
p2235
I99
sS'trials_2.thisTrial'
p2236
NsS'trials.thisN'
p2237
I199
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2238
g46
sg31
g60
sS'trials.thisTrialN'
p2239
I1
sS'trials_2.thisN'
p2240
I0
sa(dp2241
g20
g21
sS'trials.thisIndex'
p2242
g36
(g38
S'\x00\x00\x00\x00'
tRp2243
sg22
V
sS'trials_2.thisRepN'
p2244
I0
sS'trials_2.thisTrialN'
p2245
I0
sS'trials.thisRepN'
p2246
I100
sS'trials_2.thisTrial'
p2247
NsS'trials.thisN'
p2248
I200
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2249
g46
sg31
g48
sS'trials.thisTrialN'
p2250
I0
sS'trials_2.thisN'
p2251
I0
sa(dp2252
g20
g21
sS'trials.thisIndex'
p2253
g36
(g38
S'\x01\x00\x00\x00'
tRp2254
sg22
V
sS'trials_2.thisRepN'
p2255
I0
sS'trials_2.thisTrialN'
p2256
I0
sS'trials.thisRepN'
p2257
I100
sS'trials_2.thisTrial'
p2258
NsS'trials.thisN'
p2259
I201
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2260
g46
sg31
g60
sS'trials.thisTrialN'
p2261
I1
sS'trials_2.thisN'
p2262
I0
sa(dp2263
g20
g21
sS'trials.thisIndex'
p2264
g36
(g38
S'\x00\x00\x00\x00'
tRp2265
sg22
V
sS'trials_2.thisRepN'
p2266
I0
sS'trials_2.thisTrialN'
p2267
I0
sS'trials.thisRepN'
p2268
I101
sS'trials_2.thisTrial'
p2269
NsS'trials.thisN'
p2270
I202
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2271
g46
sg31
g48
sS'trials.thisTrialN'
p2272
I0
sS'trials_2.thisN'
p2273
I0
sa(dp2274
g20
g21
sS'trials.thisIndex'
p2275
g36
(g38
S'\x01\x00\x00\x00'
tRp2276
sg22
V
sS'trials_2.thisRepN'
p2277
I0
sS'trials_2.thisTrialN'
p2278
I0
sS'trials.thisRepN'
p2279
I101
sS'trials_2.thisTrial'
p2280
NsS'trials.thisN'
p2281
I203
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2282
g46
sg31
g60
sS'trials.thisTrialN'
p2283
I1
sS'trials_2.thisN'
p2284
I0
sa(dp2285
g20
g21
sS'trials.thisIndex'
p2286
g36
(g38
S'\x00\x00\x00\x00'
tRp2287
sg22
V
sS'trials_2.thisRepN'
p2288
I0
sS'trials_2.thisTrialN'
p2289
I0
sS'trials.thisRepN'
p2290
I102
sS'trials_2.thisTrial'
p2291
NsS'trials.thisN'
p2292
I204
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2293
g46
sg31
g48
sS'trials.thisTrialN'
p2294
I0
sS'trials_2.thisN'
p2295
I0
sa(dp2296
g20
g21
sS'trials.thisIndex'
p2297
g36
(g38
S'\x01\x00\x00\x00'
tRp2298
sg22
V
sS'trials_2.thisRepN'
p2299
I0
sS'trials_2.thisTrialN'
p2300
I0
sS'trials.thisRepN'
p2301
I102
sS'trials_2.thisTrial'
p2302
NsS'trials.thisN'
p2303
I205
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2304
g46
sg31
g60
sS'trials.thisTrialN'
p2305
I1
sS'trials_2.thisN'
p2306
I0
sa(dp2307
g20
g21
sS'trials.thisIndex'
p2308
g36
(g38
S'\x00\x00\x00\x00'
tRp2309
sg22
V
sS'trials_2.thisRepN'
p2310
I0
sS'trials_2.thisTrialN'
p2311
I0
sS'trials.thisRepN'
p2312
I103
sS'trials_2.thisTrial'
p2313
NsS'trials.thisN'
p2314
I206
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2315
g46
sg31
g48
sS'trials.thisTrialN'
p2316
I0
sS'trials_2.thisN'
p2317
I0
sa(dp2318
g20
g21
sS'trials.thisIndex'
p2319
g36
(g38
S'\x01\x00\x00\x00'
tRp2320
sg22
V
sS'trials_2.thisRepN'
p2321
I0
sS'trials_2.thisTrialN'
p2322
I0
sS'trials.thisRepN'
p2323
I103
sS'trials_2.thisTrial'
p2324
NsS'trials.thisN'
p2325
I207
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2326
g46
sg31
g60
sS'trials.thisTrialN'
p2327
I1
sS'trials_2.thisN'
p2328
I0
sa(dp2329
g20
g21
sS'trials.thisIndex'
p2330
g36
(g38
S'\x00\x00\x00\x00'
tRp2331
sg22
V
sS'trials_2.thisRepN'
p2332
I0
sS'trials_2.thisTrialN'
p2333
I0
sS'trials.thisRepN'
p2334
I104
sS'trials_2.thisTrial'
p2335
NsS'trials.thisN'
p2336
I208
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2337
g46
sg31
g48
sS'trials.thisTrialN'
p2338
I0
sS'trials_2.thisN'
p2339
I0
sa(dp2340
g20
g21
sS'trials.thisIndex'
p2341
g36
(g38
S'\x01\x00\x00\x00'
tRp2342
sg22
V
sS'trials_2.thisRepN'
p2343
I0
sS'trials_2.thisTrialN'
p2344
I0
sS'trials.thisRepN'
p2345
I104
sS'trials_2.thisTrial'
p2346
NsS'trials.thisN'
p2347
I209
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2348
g46
sg31
g60
sS'trials.thisTrialN'
p2349
I1
sS'trials_2.thisN'
p2350
I0
sa(dp2351
g20
g21
sS'trials.thisIndex'
p2352
g36
(g38
S'\x00\x00\x00\x00'
tRp2353
sg22
V
sS'trials_2.thisRepN'
p2354
I0
sS'trials_2.thisTrialN'
p2355
I0
sS'trials.thisRepN'
p2356
I105
sS'trials_2.thisTrial'
p2357
NsS'trials.thisN'
p2358
I210
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2359
g46
sg31
g48
sS'trials.thisTrialN'
p2360
I0
sS'trials_2.thisN'
p2361
I0
sa(dp2362
g20
g21
sS'trials.thisIndex'
p2363
g36
(g38
S'\x01\x00\x00\x00'
tRp2364
sg22
V
sS'trials_2.thisRepN'
p2365
I0
sS'trials_2.thisTrialN'
p2366
I0
sS'trials.thisRepN'
p2367
I105
sS'trials_2.thisTrial'
p2368
NsS'trials.thisN'
p2369
I211
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2370
g46
sg31
g60
sS'trials.thisTrialN'
p2371
I1
sS'trials_2.thisN'
p2372
I0
sa(dp2373
g20
g21
sS'trials.thisIndex'
p2374
g36
(g38
S'\x00\x00\x00\x00'
tRp2375
sg22
V
sS'trials_2.thisRepN'
p2376
I0
sS'trials_2.thisTrialN'
p2377
I0
sS'trials.thisRepN'
p2378
I106
sS'trials_2.thisTrial'
p2379
NsS'trials.thisN'
p2380
I212
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2381
g46
sg31
g48
sS'trials.thisTrialN'
p2382
I0
sS'trials_2.thisN'
p2383
I0
sa(dp2384
g20
g21
sS'trials.thisIndex'
p2385
g36
(g38
S'\x01\x00\x00\x00'
tRp2386
sg22
V
sS'trials_2.thisRepN'
p2387
I0
sS'trials_2.thisTrialN'
p2388
I0
sS'trials.thisRepN'
p2389
I106
sS'trials_2.thisTrial'
p2390
NsS'trials.thisN'
p2391
I213
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2392
g46
sg31
g60
sS'trials.thisTrialN'
p2393
I1
sS'trials_2.thisN'
p2394
I0
sa(dp2395
g20
g21
sS'trials.thisIndex'
p2396
g36
(g38
S'\x00\x00\x00\x00'
tRp2397
sg22
V
sS'trials_2.thisRepN'
p2398
I0
sS'trials_2.thisTrialN'
p2399
I0
sS'trials.thisRepN'
p2400
I107
sS'trials_2.thisTrial'
p2401
NsS'trials.thisN'
p2402
I214
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2403
g46
sg31
g48
sS'trials.thisTrialN'
p2404
I0
sS'trials_2.thisN'
p2405
I0
sa(dp2406
g20
g21
sS'trials.thisIndex'
p2407
g36
(g38
S'\x01\x00\x00\x00'
tRp2408
sg22
V
sS'trials_2.thisRepN'
p2409
I0
sS'trials_2.thisTrialN'
p2410
I0
sS'trials.thisRepN'
p2411
I107
sS'trials_2.thisTrial'
p2412
NsS'trials.thisN'
p2413
I215
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2414
g46
sg31
g60
sS'trials.thisTrialN'
p2415
I1
sS'trials_2.thisN'
p2416
I0
sa(dp2417
g20
g21
sS'trials.thisIndex'
p2418
g36
(g38
S'\x00\x00\x00\x00'
tRp2419
sg22
V
sS'trials_2.thisRepN'
p2420
I0
sS'trials_2.thisTrialN'
p2421
I0
sS'trials.thisRepN'
p2422
I108
sS'trials_2.thisTrial'
p2423
NsS'trials.thisN'
p2424
I216
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2425
g46
sg31
g48
sS'trials.thisTrialN'
p2426
I0
sS'trials_2.thisN'
p2427
I0
sa(dp2428
g20
g21
sS'trials.thisIndex'
p2429
g36
(g38
S'\x01\x00\x00\x00'
tRp2430
sg22
V
sS'trials_2.thisRepN'
p2431
I0
sS'trials_2.thisTrialN'
p2432
I0
sS'trials.thisRepN'
p2433
I108
sS'trials_2.thisTrial'
p2434
NsS'trials.thisN'
p2435
I217
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2436
g46
sg31
g60
sS'trials.thisTrialN'
p2437
I1
sS'trials_2.thisN'
p2438
I0
sa(dp2439
g20
g21
sS'trials.thisIndex'
p2440
g36
(g38
S'\x00\x00\x00\x00'
tRp2441
sg22
V
sS'trials_2.thisRepN'
p2442
I0
sS'trials_2.thisTrialN'
p2443
I0
sS'trials.thisRepN'
p2444
I109
sS'trials_2.thisTrial'
p2445
NsS'trials.thisN'
p2446
I218
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2447
g46
sg31
g48
sS'trials.thisTrialN'
p2448
I0
sS'trials_2.thisN'
p2449
I0
sa(dp2450
g20
g21
sS'trials.thisIndex'
p2451
g36
(g38
S'\x01\x00\x00\x00'
tRp2452
sg22
V
sS'trials_2.thisRepN'
p2453
I0
sS'trials_2.thisTrialN'
p2454
I0
sS'trials.thisRepN'
p2455
I109
sS'trials_2.thisTrial'
p2456
NsS'trials.thisN'
p2457
I219
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2458
g46
sg31
g60
sS'trials.thisTrialN'
p2459
I1
sS'trials_2.thisN'
p2460
I0
sa(dp2461
g20
g21
sS'trials.thisIndex'
p2462
g36
(g38
S'\x00\x00\x00\x00'
tRp2463
sg22
V
sS'trials_2.thisRepN'
p2464
I0
sS'trials_2.thisTrialN'
p2465
I0
sS'trials.thisRepN'
p2466
I110
sS'trials_2.thisTrial'
p2467
NsS'trials.thisN'
p2468
I220
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2469
g46
sg31
g48
sS'trials.thisTrialN'
p2470
I0
sS'trials_2.thisN'
p2471
I0
sa(dp2472
g20
g21
sS'trials.thisIndex'
p2473
g36
(g38
S'\x01\x00\x00\x00'
tRp2474
sg22
V
sS'trials_2.thisRepN'
p2475
I0
sS'trials_2.thisTrialN'
p2476
I0
sS'trials.thisRepN'
p2477
I110
sS'trials_2.thisTrial'
p2478
NsS'trials.thisN'
p2479
I221
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2480
g46
sg31
g60
sS'trials.thisTrialN'
p2481
I1
sS'trials_2.thisN'
p2482
I0
sa(dp2483
g20
g21
sS'trials.thisIndex'
p2484
g36
(g38
S'\x00\x00\x00\x00'
tRp2485
sg22
V
sS'trials_2.thisRepN'
p2486
I0
sS'trials_2.thisTrialN'
p2487
I0
sS'trials.thisRepN'
p2488
I111
sS'trials_2.thisTrial'
p2489
NsS'trials.thisN'
p2490
I222
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2491
g46
sg31
g48
sS'trials.thisTrialN'
p2492
I0
sS'trials_2.thisN'
p2493
I0
sa(dp2494
g20
g21
sS'trials.thisIndex'
p2495
g36
(g38
S'\x01\x00\x00\x00'
tRp2496
sg22
V
sS'trials_2.thisRepN'
p2497
I0
sS'trials_2.thisTrialN'
p2498
I0
sS'trials.thisRepN'
p2499
I111
sS'trials_2.thisTrial'
p2500
NsS'trials.thisN'
p2501
I223
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2502
g46
sg31
g60
sS'trials.thisTrialN'
p2503
I1
sS'trials_2.thisN'
p2504
I0
sa(dp2505
g20
g21
sS'trials.thisIndex'
p2506
g36
(g38
S'\x00\x00\x00\x00'
tRp2507
sg22
V
sS'trials_2.thisRepN'
p2508
I0
sS'trials_2.thisTrialN'
p2509
I0
sS'trials.thisRepN'
p2510
I112
sS'trials_2.thisTrial'
p2511
NsS'trials.thisN'
p2512
I224
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2513
g46
sg31
g48
sS'trials.thisTrialN'
p2514
I0
sS'trials_2.thisN'
p2515
I0
sa(dp2516
g20
g21
sS'trials.thisIndex'
p2517
g36
(g38
S'\x01\x00\x00\x00'
tRp2518
sg22
V
sS'trials_2.thisRepN'
p2519
I0
sS'trials_2.thisTrialN'
p2520
I0
sS'trials.thisRepN'
p2521
I112
sS'trials_2.thisTrial'
p2522
NsS'trials.thisN'
p2523
I225
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2524
g46
sg31
g60
sS'trials.thisTrialN'
p2525
I1
sS'trials_2.thisN'
p2526
I0
sa(dp2527
g20
g21
sS'trials.thisIndex'
p2528
g36
(g38
S'\x00\x00\x00\x00'
tRp2529
sg22
V
sS'trials_2.thisRepN'
p2530
I0
sS'trials_2.thisTrialN'
p2531
I0
sS'trials.thisRepN'
p2532
I113
sS'trials_2.thisTrial'
p2533
NsS'trials.thisN'
p2534
I226
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2535
g46
sg31
g48
sS'trials.thisTrialN'
p2536
I0
sS'trials_2.thisN'
p2537
I0
sa(dp2538
g20
g21
sS'trials.thisIndex'
p2539
g36
(g38
S'\x01\x00\x00\x00'
tRp2540
sg22
V
sS'trials_2.thisRepN'
p2541
I0
sS'trials_2.thisTrialN'
p2542
I0
sS'trials.thisRepN'
p2543
I113
sS'trials_2.thisTrial'
p2544
NsS'trials.thisN'
p2545
I227
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2546
g46
sg31
g60
sS'trials.thisTrialN'
p2547
I1
sS'trials_2.thisN'
p2548
I0
sa(dp2549
g20
g21
sS'trials.thisIndex'
p2550
g36
(g38
S'\x00\x00\x00\x00'
tRp2551
sg22
V
sS'trials_2.thisRepN'
p2552
I0
sS'trials_2.thisTrialN'
p2553
I0
sS'trials.thisRepN'
p2554
I114
sS'trials_2.thisTrial'
p2555
NsS'trials.thisN'
p2556
I228
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2557
g46
sg31
g48
sS'trials.thisTrialN'
p2558
I0
sS'trials_2.thisN'
p2559
I0
sa(dp2560
g20
g21
sS'trials.thisIndex'
p2561
g36
(g38
S'\x01\x00\x00\x00'
tRp2562
sg22
V
sS'trials_2.thisRepN'
p2563
I0
sS'trials_2.thisTrialN'
p2564
I0
sS'trials.thisRepN'
p2565
I114
sS'trials_2.thisTrial'
p2566
NsS'trials.thisN'
p2567
I229
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2568
g46
sg31
g60
sS'trials.thisTrialN'
p2569
I1
sS'trials_2.thisN'
p2570
I0
sa(dp2571
g20
g21
sS'trials.thisIndex'
p2572
g36
(g38
S'\x00\x00\x00\x00'
tRp2573
sg22
V
sS'trials_2.thisRepN'
p2574
I0
sS'trials_2.thisTrialN'
p2575
I0
sS'trials.thisRepN'
p2576
I115
sS'trials_2.thisTrial'
p2577
NsS'trials.thisN'
p2578
I230
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2579
g46
sg31
g48
sS'trials.thisTrialN'
p2580
I0
sS'trials_2.thisN'
p2581
I0
sa(dp2582
g20
g21
sS'trials.thisIndex'
p2583
g36
(g38
S'\x01\x00\x00\x00'
tRp2584
sg22
V
sS'trials_2.thisRepN'
p2585
I0
sS'trials_2.thisTrialN'
p2586
I0
sS'trials.thisRepN'
p2587
I115
sS'trials_2.thisTrial'
p2588
NsS'trials.thisN'
p2589
I231
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2590
g46
sg31
g60
sS'trials.thisTrialN'
p2591
I1
sS'trials_2.thisN'
p2592
I0
sa(dp2593
g20
g21
sS'trials.thisIndex'
p2594
g36
(g38
S'\x00\x00\x00\x00'
tRp2595
sg22
V
sS'trials_2.thisRepN'
p2596
I0
sS'trials_2.thisTrialN'
p2597
I0
sS'trials.thisRepN'
p2598
I116
sS'trials_2.thisTrial'
p2599
NsS'trials.thisN'
p2600
I232
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2601
g46
sg31
g48
sS'trials.thisTrialN'
p2602
I0
sS'trials_2.thisN'
p2603
I0
sa(dp2604
g20
g21
sS'trials.thisIndex'
p2605
g36
(g38
S'\x01\x00\x00\x00'
tRp2606
sg22
V
sS'trials_2.thisRepN'
p2607
I0
sS'trials_2.thisTrialN'
p2608
I0
sS'trials.thisRepN'
p2609
I116
sS'trials_2.thisTrial'
p2610
NsS'trials.thisN'
p2611
I233
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2612
g46
sg31
g60
sS'trials.thisTrialN'
p2613
I1
sS'trials_2.thisN'
p2614
I0
sa(dp2615
g20
g21
sS'trials.thisIndex'
p2616
g36
(g38
S'\x00\x00\x00\x00'
tRp2617
sg22
V
sS'trials_2.thisRepN'
p2618
I0
sS'trials_2.thisTrialN'
p2619
I0
sS'trials.thisRepN'
p2620
I117
sS'trials_2.thisTrial'
p2621
NsS'trials.thisN'
p2622
I234
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2623
g46
sg31
g48
sS'trials.thisTrialN'
p2624
I0
sS'trials_2.thisN'
p2625
I0
sa(dp2626
g20
g21
sS'trials.thisIndex'
p2627
g36
(g38
S'\x01\x00\x00\x00'
tRp2628
sg22
V
sS'trials_2.thisRepN'
p2629
I0
sS'trials_2.thisTrialN'
p2630
I0
sS'trials.thisRepN'
p2631
I117
sS'trials_2.thisTrial'
p2632
NsS'trials.thisN'
p2633
I235
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2634
g46
sg31
g60
sS'trials.thisTrialN'
p2635
I1
sS'trials_2.thisN'
p2636
I0
sa(dp2637
g20
g21
sS'trials.thisIndex'
p2638
g36
(g38
S'\x00\x00\x00\x00'
tRp2639
sg22
V
sS'trials_2.thisRepN'
p2640
I0
sS'trials_2.thisTrialN'
p2641
I0
sS'trials.thisRepN'
p2642
I118
sS'trials_2.thisTrial'
p2643
NsS'trials.thisN'
p2644
I236
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2645
g46
sg31
g48
sS'trials.thisTrialN'
p2646
I0
sS'trials_2.thisN'
p2647
I0
sa(dp2648
g20
g21
sS'trials.thisIndex'
p2649
g36
(g38
S'\x01\x00\x00\x00'
tRp2650
sg22
V
sS'trials_2.thisRepN'
p2651
I0
sS'trials_2.thisTrialN'
p2652
I0
sS'trials.thisRepN'
p2653
I118
sS'trials_2.thisTrial'
p2654
NsS'trials.thisN'
p2655
I237
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2656
g46
sg31
g60
sS'trials.thisTrialN'
p2657
I1
sS'trials_2.thisN'
p2658
I0
sa(dp2659
g20
g21
sS'trials.thisIndex'
p2660
g36
(g38
S'\x00\x00\x00\x00'
tRp2661
sg22
V
sS'trials_2.thisRepN'
p2662
I0
sS'trials_2.thisTrialN'
p2663
I0
sS'trials.thisRepN'
p2664
I119
sS'trials_2.thisTrial'
p2665
NsS'trials.thisN'
p2666
I238
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2667
g46
sg31
g48
sS'trials.thisTrialN'
p2668
I0
sS'trials_2.thisN'
p2669
I0
sa(dp2670
g20
g21
sS'trials.thisIndex'
p2671
g36
(g38
S'\x01\x00\x00\x00'
tRp2672
sg22
V
sS'trials_2.thisRepN'
p2673
I0
sS'trials_2.thisTrialN'
p2674
I0
sS'trials.thisRepN'
p2675
I119
sS'trials_2.thisTrial'
p2676
NsS'trials.thisN'
p2677
I239
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2678
g46
sg31
g60
sS'trials.thisTrialN'
p2679
I1
sS'trials_2.thisN'
p2680
I0
sa(dp2681
g20
g21
sS'trials.thisIndex'
p2682
g36
(g38
S'\x00\x00\x00\x00'
tRp2683
sg22
V
sS'trials_2.thisRepN'
p2684
I0
sS'trials_2.thisTrialN'
p2685
I0
sS'trials.thisRepN'
p2686
I120
sS'trials_2.thisTrial'
p2687
NsS'trials.thisN'
p2688
I240
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2689
g46
sg31
g48
sS'trials.thisTrialN'
p2690
I0
sS'trials_2.thisN'
p2691
I0
sa(dp2692
g20
g21
sS'trials.thisIndex'
p2693
g36
(g38
S'\x01\x00\x00\x00'
tRp2694
sg22
V
sS'trials_2.thisRepN'
p2695
I0
sS'trials_2.thisTrialN'
p2696
I0
sS'trials.thisRepN'
p2697
I120
sS'trials_2.thisTrial'
p2698
NsS'trials.thisN'
p2699
I241
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2700
g46
sg31
g60
sS'trials.thisTrialN'
p2701
I1
sS'trials_2.thisN'
p2702
I0
sa(dp2703
g20
g21
sS'trials.thisIndex'
p2704
g36
(g38
S'\x00\x00\x00\x00'
tRp2705
sg22
V
sS'trials_2.thisRepN'
p2706
I0
sS'trials_2.thisTrialN'
p2707
I0
sS'trials.thisRepN'
p2708
I121
sS'trials_2.thisTrial'
p2709
NsS'trials.thisN'
p2710
I242
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2711
g46
sg31
g48
sS'trials.thisTrialN'
p2712
I0
sS'trials_2.thisN'
p2713
I0
sa(dp2714
g20
g21
sS'trials.thisIndex'
p2715
g36
(g38
S'\x01\x00\x00\x00'
tRp2716
sg22
V
sS'trials_2.thisRepN'
p2717
I0
sS'trials_2.thisTrialN'
p2718
I0
sS'trials.thisRepN'
p2719
I121
sS'trials_2.thisTrial'
p2720
NsS'trials.thisN'
p2721
I243
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2722
g46
sg31
g60
sS'trials.thisTrialN'
p2723
I1
sS'trials_2.thisN'
p2724
I0
sa(dp2725
g20
g21
sS'trials.thisIndex'
p2726
g36
(g38
S'\x00\x00\x00\x00'
tRp2727
sg22
V
sS'trials_2.thisRepN'
p2728
I0
sS'trials_2.thisTrialN'
p2729
I0
sS'trials.thisRepN'
p2730
I122
sS'trials_2.thisTrial'
p2731
NsS'trials.thisN'
p2732
I244
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2733
g46
sg31
g48
sS'trials.thisTrialN'
p2734
I0
sS'trials_2.thisN'
p2735
I0
sa(dp2736
g20
g21
sS'trials.thisIndex'
p2737
g36
(g38
S'\x01\x00\x00\x00'
tRp2738
sg22
V
sS'trials_2.thisRepN'
p2739
I0
sS'trials_2.thisTrialN'
p2740
I0
sS'trials.thisRepN'
p2741
I122
sS'trials_2.thisTrial'
p2742
NsS'trials.thisN'
p2743
I245
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2744
g46
sg31
g60
sS'trials.thisTrialN'
p2745
I1
sS'trials_2.thisN'
p2746
I0
sa(dp2747
g20
g21
sS'trials.thisIndex'
p2748
g36
(g38
S'\x00\x00\x00\x00'
tRp2749
sg22
V
sS'trials_2.thisRepN'
p2750
I0
sS'trials_2.thisTrialN'
p2751
I0
sS'trials.thisRepN'
p2752
I123
sS'trials_2.thisTrial'
p2753
NsS'trials.thisN'
p2754
I246
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2755
g46
sg31
g48
sS'trials.thisTrialN'
p2756
I0
sS'trials_2.thisN'
p2757
I0
sa(dp2758
g20
g21
sS'trials.thisIndex'
p2759
g36
(g38
S'\x01\x00\x00\x00'
tRp2760
sg22
V
sS'trials_2.thisRepN'
p2761
I0
sS'trials_2.thisTrialN'
p2762
I0
sS'trials.thisRepN'
p2763
I123
sS'trials_2.thisTrial'
p2764
NsS'trials.thisN'
p2765
I247
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2766
g46
sg31
g60
sS'trials.thisTrialN'
p2767
I1
sS'trials_2.thisN'
p2768
I0
sa(dp2769
g20
g21
sS'trials.thisIndex'
p2770
g36
(g38
S'\x00\x00\x00\x00'
tRp2771
sg22
V
sS'trials_2.thisRepN'
p2772
I0
sS'trials_2.thisTrialN'
p2773
I0
sS'trials.thisRepN'
p2774
I124
sS'trials_2.thisTrial'
p2775
NsS'trials.thisN'
p2776
I248
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2777
g46
sg31
g48
sS'trials.thisTrialN'
p2778
I0
sS'trials_2.thisN'
p2779
I0
sa(dp2780
g20
g21
sS'trials.thisIndex'
p2781
g36
(g38
S'\x01\x00\x00\x00'
tRp2782
sg22
V
sS'trials_2.thisRepN'
p2783
I0
sS'trials_2.thisTrialN'
p2784
I0
sS'trials.thisRepN'
p2785
I124
sS'trials_2.thisTrial'
p2786
NsS'trials.thisN'
p2787
I249
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2788
g46
sg31
g60
sS'trials.thisTrialN'
p2789
I1
sS'trials_2.thisN'
p2790
I0
sa(dp2791
g20
g21
sS'trials.thisIndex'
p2792
g36
(g38
S'\x00\x00\x00\x00'
tRp2793
sg22
V
sS'trials_2.thisRepN'
p2794
I0
sS'trials_2.thisTrialN'
p2795
I0
sS'trials.thisRepN'
p2796
I125
sS'trials_2.thisTrial'
p2797
NsS'trials.thisN'
p2798
I250
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2799
g46
sg31
g48
sS'trials.thisTrialN'
p2800
I0
sS'trials_2.thisN'
p2801
I0
sa(dp2802
g20
g21
sS'trials.thisIndex'
p2803
g36
(g38
S'\x01\x00\x00\x00'
tRp2804
sg22
V
sS'trials_2.thisRepN'
p2805
I0
sS'trials_2.thisTrialN'
p2806
I0
sS'trials.thisRepN'
p2807
I125
sS'trials_2.thisTrial'
p2808
NsS'trials.thisN'
p2809
I251
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2810
g46
sg31
g60
sS'trials.thisTrialN'
p2811
I1
sS'trials_2.thisN'
p2812
I0
sa(dp2813
g20
g21
sS'trials.thisIndex'
p2814
g36
(g38
S'\x00\x00\x00\x00'
tRp2815
sg22
V
sS'trials_2.thisRepN'
p2816
I0
sS'trials_2.thisTrialN'
p2817
I0
sS'trials.thisRepN'
p2818
I126
sS'trials_2.thisTrial'
p2819
NsS'trials.thisN'
p2820
I252
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2821
g46
sg31
g48
sS'trials.thisTrialN'
p2822
I0
sS'trials_2.thisN'
p2823
I0
sa(dp2824
g20
g21
sS'trials.thisIndex'
p2825
g36
(g38
S'\x01\x00\x00\x00'
tRp2826
sg22
V
sS'trials_2.thisRepN'
p2827
I0
sS'trials_2.thisTrialN'
p2828
I0
sS'trials.thisRepN'
p2829
I126
sS'trials_2.thisTrial'
p2830
NsS'trials.thisN'
p2831
I253
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2832
g46
sg31
g60
sS'trials.thisTrialN'
p2833
I1
sS'trials_2.thisN'
p2834
I0
sa(dp2835
g20
g21
sS'trials.thisIndex'
p2836
g36
(g38
S'\x00\x00\x00\x00'
tRp2837
sg22
V
sS'trials_2.thisRepN'
p2838
I0
sS'trials_2.thisTrialN'
p2839
I0
sS'trials.thisRepN'
p2840
I127
sS'trials_2.thisTrial'
p2841
NsS'trials.thisN'
p2842
I254
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2843
g46
sg31
g48
sS'trials.thisTrialN'
p2844
I0
sS'trials_2.thisN'
p2845
I0
sa(dp2846
g20
g21
sS'trials.thisIndex'
p2847
g36
(g38
S'\x01\x00\x00\x00'
tRp2848
sg22
V
sS'trials_2.thisRepN'
p2849
I0
sS'trials_2.thisTrialN'
p2850
I0
sS'trials.thisRepN'
p2851
I127
sS'trials_2.thisTrial'
p2852
NsS'trials.thisN'
p2853
I255
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2854
g46
sg31
g60
sS'trials.thisTrialN'
p2855
I1
sS'trials_2.thisN'
p2856
I0
sa(dp2857
g20
g21
sS'trials.thisIndex'
p2858
g36
(g38
S'\x00\x00\x00\x00'
tRp2859
sg22
V
sS'trials_2.thisRepN'
p2860
I0
sS'trials_2.thisTrialN'
p2861
I0
sS'trials.thisRepN'
p2862
I128
sS'trials_2.thisTrial'
p2863
NsS'trials.thisN'
p2864
I256
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2865
g46
sg31
g48
sS'trials.thisTrialN'
p2866
I0
sS'trials_2.thisN'
p2867
I0
sa(dp2868
g20
g21
sS'trials.thisIndex'
p2869
g36
(g38
S'\x01\x00\x00\x00'
tRp2870
sg22
V
sS'trials_2.thisRepN'
p2871
I0
sS'trials_2.thisTrialN'
p2872
I0
sS'trials.thisRepN'
p2873
I128
sS'trials_2.thisTrial'
p2874
NsS'trials.thisN'
p2875
I257
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2876
g46
sg31
g60
sS'trials.thisTrialN'
p2877
I1
sS'trials_2.thisN'
p2878
I0
sa(dp2879
g20
g21
sS'trials.thisIndex'
p2880
g36
(g38
S'\x00\x00\x00\x00'
tRp2881
sg22
V
sS'trials_2.thisRepN'
p2882
I0
sS'trials_2.thisTrialN'
p2883
I0
sS'trials.thisRepN'
p2884
I129
sS'trials_2.thisTrial'
p2885
NsS'trials.thisN'
p2886
I258
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2887
g46
sg31
g48
sS'trials.thisTrialN'
p2888
I0
sS'trials_2.thisN'
p2889
I0
sa(dp2890
g20
g21
sS'trials.thisIndex'
p2891
g36
(g38
S'\x01\x00\x00\x00'
tRp2892
sg22
V
sS'trials_2.thisRepN'
p2893
I0
sS'trials_2.thisTrialN'
p2894
I0
sS'trials.thisRepN'
p2895
I129
sS'trials_2.thisTrial'
p2896
NsS'trials.thisN'
p2897
I259
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2898
g46
sg31
g60
sS'trials.thisTrialN'
p2899
I1
sS'trials_2.thisN'
p2900
I0
sa(dp2901
g20
g21
sS'trials.thisIndex'
p2902
g36
(g38
S'\x00\x00\x00\x00'
tRp2903
sg22
V
sS'trials_2.thisRepN'
p2904
I0
sS'trials_2.thisTrialN'
p2905
I0
sS'trials.thisRepN'
p2906
I130
sS'trials_2.thisTrial'
p2907
NsS'trials.thisN'
p2908
I260
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2909
g46
sg31
g48
sS'trials.thisTrialN'
p2910
I0
sS'trials_2.thisN'
p2911
I0
sa(dp2912
g20
g21
sS'trials.thisIndex'
p2913
g36
(g38
S'\x01\x00\x00\x00'
tRp2914
sg22
V
sS'trials_2.thisRepN'
p2915
I0
sS'trials_2.thisTrialN'
p2916
I0
sS'trials.thisRepN'
p2917
I130
sS'trials_2.thisTrial'
p2918
NsS'trials.thisN'
p2919
I261
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2920
g46
sg31
g60
sS'trials.thisTrialN'
p2921
I1
sS'trials_2.thisN'
p2922
I0
sa(dp2923
g20
g21
sS'trials.thisIndex'
p2924
g36
(g38
S'\x00\x00\x00\x00'
tRp2925
sg22
V
sS'trials_2.thisRepN'
p2926
I0
sS'trials_2.thisTrialN'
p2927
I0
sS'trials.thisRepN'
p2928
I131
sS'trials_2.thisTrial'
p2929
NsS'trials.thisN'
p2930
I262
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2931
g46
sg31
g48
sS'trials.thisTrialN'
p2932
I0
sS'trials_2.thisN'
p2933
I0
sa(dp2934
g20
g21
sS'trials.thisIndex'
p2935
g36
(g38
S'\x01\x00\x00\x00'
tRp2936
sg22
V
sS'trials_2.thisRepN'
p2937
I0
sS'trials_2.thisTrialN'
p2938
I0
sS'trials.thisRepN'
p2939
I131
sS'trials_2.thisTrial'
p2940
NsS'trials.thisN'
p2941
I263
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2942
g46
sg31
g60
sS'trials.thisTrialN'
p2943
I1
sS'trials_2.thisN'
p2944
I0
sa(dp2945
g20
g21
sS'trials.thisIndex'
p2946
g36
(g38
S'\x00\x00\x00\x00'
tRp2947
sg22
V
sS'trials_2.thisRepN'
p2948
I0
sS'trials_2.thisTrialN'
p2949
I0
sS'trials.thisRepN'
p2950
I132
sS'trials_2.thisTrial'
p2951
NsS'trials.thisN'
p2952
I264
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2953
g46
sg31
g48
sS'trials.thisTrialN'
p2954
I0
sS'trials_2.thisN'
p2955
I0
sa(dp2956
g20
g21
sS'trials.thisIndex'
p2957
g36
(g38
S'\x01\x00\x00\x00'
tRp2958
sg22
V
sS'trials_2.thisRepN'
p2959
I0
sS'trials_2.thisTrialN'
p2960
I0
sS'trials.thisRepN'
p2961
I132
sS'trials_2.thisTrial'
p2962
NsS'trials.thisN'
p2963
I265
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2964
g46
sg31
g60
sS'trials.thisTrialN'
p2965
I1
sS'trials_2.thisN'
p2966
I0
sa(dp2967
g20
g21
sS'trials.thisIndex'
p2968
g36
(g38
S'\x00\x00\x00\x00'
tRp2969
sg22
V
sS'trials_2.thisRepN'
p2970
I0
sS'trials_2.thisTrialN'
p2971
I0
sS'trials.thisRepN'
p2972
I133
sS'trials_2.thisTrial'
p2973
NsS'trials.thisN'
p2974
I266
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2975
g46
sg31
g48
sS'trials.thisTrialN'
p2976
I0
sS'trials_2.thisN'
p2977
I0
sa(dp2978
g20
g21
sS'trials.thisIndex'
p2979
g36
(g38
S'\x01\x00\x00\x00'
tRp2980
sg22
V
sS'trials_2.thisRepN'
p2981
I0
sS'trials_2.thisTrialN'
p2982
I0
sS'trials.thisRepN'
p2983
I133
sS'trials_2.thisTrial'
p2984
NsS'trials.thisN'
p2985
I267
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2986
g46
sg31
g60
sS'trials.thisTrialN'
p2987
I1
sS'trials_2.thisN'
p2988
I0
sa(dp2989
g20
g21
sS'trials.thisIndex'
p2990
g36
(g38
S'\x00\x00\x00\x00'
tRp2991
sg22
V
sS'trials_2.thisRepN'
p2992
I0
sS'trials_2.thisTrialN'
p2993
I0
sS'trials.thisRepN'
p2994
I134
sS'trials_2.thisTrial'
p2995
NsS'trials.thisN'
p2996
I268
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p2997
g46
sg31
g48
sS'trials.thisTrialN'
p2998
I0
sS'trials_2.thisN'
p2999
I0
sa(dp3000
g20
g21
sS'trials.thisIndex'
p3001
g36
(g38
S'\x01\x00\x00\x00'
tRp3002
sg22
V
sS'trials_2.thisRepN'
p3003
I0
sS'trials_2.thisTrialN'
p3004
I0
sS'trials.thisRepN'
p3005
I134
sS'trials_2.thisTrial'
p3006
NsS'trials.thisN'
p3007
I269
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3008
g46
sg31
g60
sS'trials.thisTrialN'
p3009
I1
sS'trials_2.thisN'
p3010
I0
sa(dp3011
g20
g21
sS'trials.thisIndex'
p3012
g36
(g38
S'\x00\x00\x00\x00'
tRp3013
sg22
V
sS'trials_2.thisRepN'
p3014
I0
sS'trials_2.thisTrialN'
p3015
I0
sS'trials.thisRepN'
p3016
I135
sS'trials_2.thisTrial'
p3017
NsS'trials.thisN'
p3018
I270
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3019
g46
sg31
g48
sS'trials.thisTrialN'
p3020
I0
sS'trials_2.thisN'
p3021
I0
sa(dp3022
g20
g21
sS'trials.thisIndex'
p3023
g36
(g38
S'\x01\x00\x00\x00'
tRp3024
sg22
V
sS'trials_2.thisRepN'
p3025
I0
sS'trials_2.thisTrialN'
p3026
I0
sS'trials.thisRepN'
p3027
I135
sS'trials_2.thisTrial'
p3028
NsS'trials.thisN'
p3029
I271
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3030
g46
sg31
g60
sS'trials.thisTrialN'
p3031
I1
sS'trials_2.thisN'
p3032
I0
sa(dp3033
g20
g21
sS'trials.thisIndex'
p3034
g36
(g38
S'\x00\x00\x00\x00'
tRp3035
sg22
V
sS'trials_2.thisRepN'
p3036
I0
sS'trials_2.thisTrialN'
p3037
I0
sS'trials.thisRepN'
p3038
I136
sS'trials_2.thisTrial'
p3039
NsS'trials.thisN'
p3040
I272
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3041
g46
sg31
g48
sS'trials.thisTrialN'
p3042
I0
sS'trials_2.thisN'
p3043
I0
sa(dp3044
g20
g21
sS'trials.thisIndex'
p3045
g36
(g38
S'\x01\x00\x00\x00'
tRp3046
sg22
V
sS'trials_2.thisRepN'
p3047
I0
sS'trials_2.thisTrialN'
p3048
I0
sS'trials.thisRepN'
p3049
I136
sS'trials_2.thisTrial'
p3050
NsS'trials.thisN'
p3051
I273
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3052
g46
sg31
g60
sS'trials.thisTrialN'
p3053
I1
sS'trials_2.thisN'
p3054
I0
sa(dp3055
g20
g21
sS'trials.thisIndex'
p3056
g36
(g38
S'\x00\x00\x00\x00'
tRp3057
sg22
V
sS'trials_2.thisRepN'
p3058
I0
sS'trials_2.thisTrialN'
p3059
I0
sS'trials.thisRepN'
p3060
I137
sS'trials_2.thisTrial'
p3061
NsS'trials.thisN'
p3062
I274
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3063
g46
sg31
g48
sS'trials.thisTrialN'
p3064
I0
sS'trials_2.thisN'
p3065
I0
sa(dp3066
g20
g21
sS'trials.thisIndex'
p3067
g36
(g38
S'\x01\x00\x00\x00'
tRp3068
sg22
V
sS'trials_2.thisRepN'
p3069
I0
sS'trials_2.thisTrialN'
p3070
I0
sS'trials.thisRepN'
p3071
I137
sS'trials_2.thisTrial'
p3072
NsS'trials.thisN'
p3073
I275
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3074
g46
sg31
g60
sS'trials.thisTrialN'
p3075
I1
sS'trials_2.thisN'
p3076
I0
sa(dp3077
g20
g21
sS'trials.thisIndex'
p3078
g36
(g38
S'\x00\x00\x00\x00'
tRp3079
sg22
V
sS'trials_2.thisRepN'
p3080
I0
sS'trials_2.thisTrialN'
p3081
I0
sS'trials.thisRepN'
p3082
I138
sS'trials_2.thisTrial'
p3083
NsS'trials.thisN'
p3084
I276
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3085
g46
sg31
g48
sS'trials.thisTrialN'
p3086
I0
sS'trials_2.thisN'
p3087
I0
sa(dp3088
g20
g21
sS'trials.thisIndex'
p3089
g36
(g38
S'\x01\x00\x00\x00'
tRp3090
sg22
V
sS'trials_2.thisRepN'
p3091
I0
sS'trials_2.thisTrialN'
p3092
I0
sS'trials.thisRepN'
p3093
I138
sS'trials_2.thisTrial'
p3094
NsS'trials.thisN'
p3095
I277
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3096
g46
sg31
g60
sS'trials.thisTrialN'
p3097
I1
sS'trials_2.thisN'
p3098
I0
sa(dp3099
g20
g21
sS'trials.thisIndex'
p3100
g36
(g38
S'\x00\x00\x00\x00'
tRp3101
sg22
V
sS'trials_2.thisRepN'
p3102
I0
sS'trials_2.thisTrialN'
p3103
I0
sS'trials.thisRepN'
p3104
I139
sS'trials_2.thisTrial'
p3105
NsS'trials.thisN'
p3106
I278
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3107
g46
sg31
g48
sS'trials.thisTrialN'
p3108
I0
sS'trials_2.thisN'
p3109
I0
sa(dp3110
g20
g21
sS'trials.thisIndex'
p3111
g36
(g38
S'\x01\x00\x00\x00'
tRp3112
sg22
V
sS'trials_2.thisRepN'
p3113
I0
sS'trials_2.thisTrialN'
p3114
I0
sS'trials.thisRepN'
p3115
I139
sS'trials_2.thisTrial'
p3116
NsS'trials.thisN'
p3117
I279
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3118
g46
sg31
g60
sS'trials.thisTrialN'
p3119
I1
sS'trials_2.thisN'
p3120
I0
sa(dp3121
g20
g21
sS'trials.thisIndex'
p3122
g36
(g38
S'\x00\x00\x00\x00'
tRp3123
sg22
V
sS'trials_2.thisRepN'
p3124
I0
sS'trials_2.thisTrialN'
p3125
I0
sS'trials.thisRepN'
p3126
I140
sS'trials_2.thisTrial'
p3127
NsS'trials.thisN'
p3128
I280
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3129
g46
sg31
g48
sS'trials.thisTrialN'
p3130
I0
sS'trials_2.thisN'
p3131
I0
sa(dp3132
g20
g21
sS'trials.thisIndex'
p3133
g36
(g38
S'\x01\x00\x00\x00'
tRp3134
sg22
V
sS'trials_2.thisRepN'
p3135
I0
sS'trials_2.thisTrialN'
p3136
I0
sS'trials.thisRepN'
p3137
I140
sS'trials_2.thisTrial'
p3138
NsS'trials.thisN'
p3139
I281
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3140
g46
sg31
g60
sS'trials.thisTrialN'
p3141
I1
sS'trials_2.thisN'
p3142
I0
sa(dp3143
g20
g21
sS'trials.thisIndex'
p3144
g36
(g38
S'\x00\x00\x00\x00'
tRp3145
sg22
V
sS'trials_2.thisRepN'
p3146
I0
sS'trials_2.thisTrialN'
p3147
I0
sS'trials.thisRepN'
p3148
I141
sS'trials_2.thisTrial'
p3149
NsS'trials.thisN'
p3150
I282
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3151
g46
sg31
g48
sS'trials.thisTrialN'
p3152
I0
sS'trials_2.thisN'
p3153
I0
sa(dp3154
g20
g21
sS'trials.thisIndex'
p3155
g36
(g38
S'\x01\x00\x00\x00'
tRp3156
sg22
V
sS'trials_2.thisRepN'
p3157
I0
sS'trials_2.thisTrialN'
p3158
I0
sS'trials.thisRepN'
p3159
I141
sS'trials_2.thisTrial'
p3160
NsS'trials.thisN'
p3161
I283
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3162
g46
sg31
g60
sS'trials.thisTrialN'
p3163
I1
sS'trials_2.thisN'
p3164
I0
sa(dp3165
g20
g21
sS'trials.thisIndex'
p3166
g36
(g38
S'\x00\x00\x00\x00'
tRp3167
sg22
V
sS'trials_2.thisRepN'
p3168
I0
sS'trials_2.thisTrialN'
p3169
I0
sS'trials.thisRepN'
p3170
I142
sS'trials_2.thisTrial'
p3171
NsS'trials.thisN'
p3172
I284
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3173
g46
sg31
g48
sS'trials.thisTrialN'
p3174
I0
sS'trials_2.thisN'
p3175
I0
sa(dp3176
g20
g21
sS'trials.thisIndex'
p3177
g36
(g38
S'\x01\x00\x00\x00'
tRp3178
sg22
V
sS'trials_2.thisRepN'
p3179
I0
sS'trials_2.thisTrialN'
p3180
I0
sS'trials.thisRepN'
p3181
I142
sS'trials_2.thisTrial'
p3182
NsS'trials.thisN'
p3183
I285
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3184
g46
sg31
g60
sS'trials.thisTrialN'
p3185
I1
sS'trials_2.thisN'
p3186
I0
sa(dp3187
g20
g21
sS'trials.thisIndex'
p3188
g36
(g38
S'\x00\x00\x00\x00'
tRp3189
sg22
V
sS'trials_2.thisRepN'
p3190
I0
sS'trials_2.thisTrialN'
p3191
I0
sS'trials.thisRepN'
p3192
I143
sS'trials_2.thisTrial'
p3193
NsS'trials.thisN'
p3194
I286
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3195
g46
sg31
g48
sS'trials.thisTrialN'
p3196
I0
sS'trials_2.thisN'
p3197
I0
sa(dp3198
g20
g21
sS'trials.thisIndex'
p3199
g36
(g38
S'\x01\x00\x00\x00'
tRp3200
sg22
V
sS'trials_2.thisRepN'
p3201
I0
sS'trials_2.thisTrialN'
p3202
I0
sS'trials.thisRepN'
p3203
I143
sS'trials_2.thisTrial'
p3204
NsS'trials.thisN'
p3205
I287
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3206
g46
sg31
g60
sS'trials.thisTrialN'
p3207
I1
sS'trials_2.thisN'
p3208
I0
sa(dp3209
g20
g21
sS'trials.thisIndex'
p3210
g36
(g38
S'\x00\x00\x00\x00'
tRp3211
sg22
V
sS'trials_2.thisRepN'
p3212
I0
sS'trials_2.thisTrialN'
p3213
I0
sS'trials.thisRepN'
p3214
I144
sS'trials_2.thisTrial'
p3215
NsS'trials.thisN'
p3216
I288
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3217
g46
sg31
g48
sS'trials.thisTrialN'
p3218
I0
sS'trials_2.thisN'
p3219
I0
sa(dp3220
g20
g21
sS'trials.thisIndex'
p3221
g36
(g38
S'\x01\x00\x00\x00'
tRp3222
sg22
V
sS'trials_2.thisRepN'
p3223
I0
sS'trials_2.thisTrialN'
p3224
I0
sS'trials.thisRepN'
p3225
I144
sS'trials_2.thisTrial'
p3226
NsS'trials.thisN'
p3227
I289
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3228
g46
sg31
g60
sS'trials.thisTrialN'
p3229
I1
sS'trials_2.thisN'
p3230
I0
sa(dp3231
g20
g21
sS'trials.thisIndex'
p3232
g36
(g38
S'\x00\x00\x00\x00'
tRp3233
sg22
V
sS'trials_2.thisRepN'
p3234
I0
sS'trials_2.thisTrialN'
p3235
I0
sS'trials.thisRepN'
p3236
I145
sS'trials_2.thisTrial'
p3237
NsS'trials.thisN'
p3238
I290
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3239
g46
sg31
g48
sS'trials.thisTrialN'
p3240
I0
sS'trials_2.thisN'
p3241
I0
sa(dp3242
g20
g21
sS'trials.thisIndex'
p3243
g36
(g38
S'\x01\x00\x00\x00'
tRp3244
sg22
V
sS'trials_2.thisRepN'
p3245
I0
sS'trials_2.thisTrialN'
p3246
I0
sS'trials.thisRepN'
p3247
I145
sS'trials_2.thisTrial'
p3248
NsS'trials.thisN'
p3249
I291
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3250
g46
sg31
g60
sS'trials.thisTrialN'
p3251
I1
sS'trials_2.thisN'
p3252
I0
sa(dp3253
g20
g21
sS'trials.thisIndex'
p3254
g36
(g38
S'\x00\x00\x00\x00'
tRp3255
sg22
V
sS'trials_2.thisRepN'
p3256
I0
sS'trials_2.thisTrialN'
p3257
I0
sS'trials.thisRepN'
p3258
I146
sS'trials_2.thisTrial'
p3259
NsS'trials.thisN'
p3260
I292
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3261
g46
sg31
g48
sS'trials.thisTrialN'
p3262
I0
sS'trials_2.thisN'
p3263
I0
sa(dp3264
g20
g21
sS'trials.thisIndex'
p3265
g36
(g38
S'\x01\x00\x00\x00'
tRp3266
sg22
V
sS'trials_2.thisRepN'
p3267
I0
sS'trials_2.thisTrialN'
p3268
I0
sS'trials.thisRepN'
p3269
I146
sS'trials_2.thisTrial'
p3270
NsS'trials.thisN'
p3271
I293
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3272
g46
sg31
g60
sS'trials.thisTrialN'
p3273
I1
sS'trials_2.thisN'
p3274
I0
sa(dp3275
g20
g21
sS'trials.thisIndex'
p3276
g36
(g38
S'\x00\x00\x00\x00'
tRp3277
sg22
V
sS'trials_2.thisRepN'
p3278
I0
sS'trials_2.thisTrialN'
p3279
I0
sS'trials.thisRepN'
p3280
I147
sS'trials_2.thisTrial'
p3281
NsS'trials.thisN'
p3282
I294
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3283
g46
sg31
g48
sS'trials.thisTrialN'
p3284
I0
sS'trials_2.thisN'
p3285
I0
sa(dp3286
g20
g21
sS'trials.thisIndex'
p3287
g36
(g38
S'\x01\x00\x00\x00'
tRp3288
sg22
V
sS'trials_2.thisRepN'
p3289
I0
sS'trials_2.thisTrialN'
p3290
I0
sS'trials.thisRepN'
p3291
I147
sS'trials_2.thisTrial'
p3292
NsS'trials.thisN'
p3293
I295
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3294
g46
sg31
g60
sS'trials.thisTrialN'
p3295
I1
sS'trials_2.thisN'
p3296
I0
sa(dp3297
g20
g21
sS'trials.thisIndex'
p3298
g36
(g38
S'\x00\x00\x00\x00'
tRp3299
sg22
V
sS'trials_2.thisRepN'
p3300
I0
sS'trials_2.thisTrialN'
p3301
I0
sS'trials.thisRepN'
p3302
I148
sS'trials_2.thisTrial'
p3303
NsS'trials.thisN'
p3304
I296
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3305
g46
sg31
g48
sS'trials.thisTrialN'
p3306
I0
sS'trials_2.thisN'
p3307
I0
sa(dp3308
g20
g21
sS'trials.thisIndex'
p3309
g36
(g38
S'\x01\x00\x00\x00'
tRp3310
sg22
V
sS'trials_2.thisRepN'
p3311
I0
sS'trials_2.thisTrialN'
p3312
I0
sS'trials.thisRepN'
p3313
I148
sS'trials_2.thisTrial'
p3314
NsS'trials.thisN'
p3315
I297
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3316
g46
sg31
g60
sS'trials.thisTrialN'
p3317
I1
sS'trials_2.thisN'
p3318
I0
sa(dp3319
g20
g21
sS'trials.thisIndex'
p3320
g36
(g38
S'\x00\x00\x00\x00'
tRp3321
sg22
V
sS'trials_2.thisRepN'
p3322
I0
sS'trials_2.thisTrialN'
p3323
I0
sS'trials.thisRepN'
p3324
I149
sS'trials_2.thisTrial'
p3325
NsS'trials.thisN'
p3326
I298
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3327
g46
sg31
g48
sS'trials.thisTrialN'
p3328
I0
sS'trials_2.thisN'
p3329
I0
sa(dp3330
g20
g21
sS'trials.thisIndex'
p3331
g36
(g38
S'\x01\x00\x00\x00'
tRp3332
sg22
V
sS'trials_2.thisRepN'
p3333
I0
sS'trials_2.thisTrialN'
p3334
I0
sS'trials.thisRepN'
p3335
I149
sS'trials_2.thisTrial'
p3336
NsS'trials.thisN'
p3337
I299
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3338
g46
sg31
g60
sS'trials.thisTrialN'
p3339
I1
sS'trials_2.thisN'
p3340
I0
sa(dp3341
g20
g21
sS'trials.thisIndex'
p3342
g36
(g38
S'\x00\x00\x00\x00'
tRp3343
sg22
V
sS'trials_2.thisRepN'
p3344
I0
sS'trials_2.thisTrialN'
p3345
I0
sS'trials.thisRepN'
p3346
I150
sS'trials_2.thisTrial'
p3347
NsS'trials.thisN'
p3348
I300
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3349
g46
sg31
g48
sS'trials.thisTrialN'
p3350
I0
sS'trials_2.thisN'
p3351
I0
sa(dp3352
g20
g21
sS'trials.thisIndex'
p3353
g36
(g38
S'\x01\x00\x00\x00'
tRp3354
sg22
V
sS'trials_2.thisRepN'
p3355
I0
sS'trials_2.thisTrialN'
p3356
I0
sS'trials.thisRepN'
p3357
I150
sS'trials_2.thisTrial'
p3358
NsS'trials.thisN'
p3359
I301
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3360
g46
sg31
g60
sS'trials.thisTrialN'
p3361
I1
sS'trials_2.thisN'
p3362
I0
sa(dp3363
g20
g21
sS'trials.thisIndex'
p3364
g36
(g38
S'\x00\x00\x00\x00'
tRp3365
sg22
V
sS'trials_2.thisRepN'
p3366
I0
sS'trials_2.thisTrialN'
p3367
I0
sS'trials.thisRepN'
p3368
I151
sS'trials_2.thisTrial'
p3369
NsS'trials.thisN'
p3370
I302
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3371
g46
sg31
g48
sS'trials.thisTrialN'
p3372
I0
sS'trials_2.thisN'
p3373
I0
sa(dp3374
g20
g21
sS'trials.thisIndex'
p3375
g36
(g38
S'\x01\x00\x00\x00'
tRp3376
sg22
V
sS'trials_2.thisRepN'
p3377
I0
sS'trials_2.thisTrialN'
p3378
I0
sS'trials.thisRepN'
p3379
I151
sS'trials_2.thisTrial'
p3380
NsS'trials.thisN'
p3381
I303
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3382
g46
sg31
g60
sS'trials.thisTrialN'
p3383
I1
sS'trials_2.thisN'
p3384
I0
sa(dp3385
g20
g21
sS'trials.thisIndex'
p3386
g36
(g38
S'\x00\x00\x00\x00'
tRp3387
sg22
V
sS'trials_2.thisRepN'
p3388
I0
sS'trials_2.thisTrialN'
p3389
I0
sS'trials.thisRepN'
p3390
I152
sS'trials_2.thisTrial'
p3391
NsS'trials.thisN'
p3392
I304
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3393
g46
sg31
g48
sS'trials.thisTrialN'
p3394
I0
sS'trials_2.thisN'
p3395
I0
sa(dp3396
g20
g21
sS'trials.thisIndex'
p3397
g36
(g38
S'\x01\x00\x00\x00'
tRp3398
sg22
V
sS'trials_2.thisRepN'
p3399
I0
sS'trials_2.thisTrialN'
p3400
I0
sS'trials.thisRepN'
p3401
I152
sS'trials_2.thisTrial'
p3402
NsS'trials.thisN'
p3403
I305
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3404
g46
sg31
g60
sS'trials.thisTrialN'
p3405
I1
sS'trials_2.thisN'
p3406
I0
sa(dp3407
g20
g21
sS'trials.thisIndex'
p3408
g36
(g38
S'\x00\x00\x00\x00'
tRp3409
sg22
V
sS'trials_2.thisRepN'
p3410
I0
sS'trials_2.thisTrialN'
p3411
I0
sS'trials.thisRepN'
p3412
I153
sS'trials_2.thisTrial'
p3413
NsS'trials.thisN'
p3414
I306
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3415
g46
sg31
g48
sS'trials.thisTrialN'
p3416
I0
sS'trials_2.thisN'
p3417
I0
sa(dp3418
g20
g21
sS'trials.thisIndex'
p3419
g36
(g38
S'\x01\x00\x00\x00'
tRp3420
sg22
V
sS'trials_2.thisRepN'
p3421
I0
sS'trials_2.thisTrialN'
p3422
I0
sS'trials.thisRepN'
p3423
I153
sS'trials_2.thisTrial'
p3424
NsS'trials.thisN'
p3425
I307
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3426
g46
sg31
g60
sS'trials.thisTrialN'
p3427
I1
sS'trials_2.thisN'
p3428
I0
sa(dp3429
g20
g21
sS'trials.thisIndex'
p3430
g36
(g38
S'\x00\x00\x00\x00'
tRp3431
sg22
V
sS'trials_2.thisRepN'
p3432
I0
sS'trials_2.thisTrialN'
p3433
I0
sS'trials.thisRepN'
p3434
I154
sS'trials_2.thisTrial'
p3435
NsS'trials.thisN'
p3436
I308
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3437
g46
sg31
g48
sS'trials.thisTrialN'
p3438
I0
sS'trials_2.thisN'
p3439
I0
sa(dp3440
g20
g21
sS'trials.thisIndex'
p3441
g36
(g38
S'\x01\x00\x00\x00'
tRp3442
sg22
V
sS'trials_2.thisRepN'
p3443
I0
sS'trials_2.thisTrialN'
p3444
I0
sS'trials.thisRepN'
p3445
I154
sS'trials_2.thisTrial'
p3446
NsS'trials.thisN'
p3447
I309
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3448
g46
sg31
g60
sS'trials.thisTrialN'
p3449
I1
sS'trials_2.thisN'
p3450
I0
sa(dp3451
g20
g21
sS'trials.thisIndex'
p3452
g36
(g38
S'\x00\x00\x00\x00'
tRp3453
sg22
V
sS'trials_2.thisRepN'
p3454
I0
sS'trials_2.thisTrialN'
p3455
I0
sS'trials.thisRepN'
p3456
I155
sS'trials_2.thisTrial'
p3457
NsS'trials.thisN'
p3458
I310
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3459
g46
sg31
g48
sS'trials.thisTrialN'
p3460
I0
sS'trials_2.thisN'
p3461
I0
sa(dp3462
g20
g21
sS'trials.thisIndex'
p3463
g36
(g38
S'\x01\x00\x00\x00'
tRp3464
sg22
V
sS'trials_2.thisRepN'
p3465
I0
sS'trials_2.thisTrialN'
p3466
I0
sS'trials.thisRepN'
p3467
I155
sS'trials_2.thisTrial'
p3468
NsS'trials.thisN'
p3469
I311
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3470
g46
sg31
g60
sS'trials.thisTrialN'
p3471
I1
sS'trials_2.thisN'
p3472
I0
sa(dp3473
g20
g21
sS'trials.thisIndex'
p3474
g36
(g38
S'\x00\x00\x00\x00'
tRp3475
sg22
V
sS'trials_2.thisRepN'
p3476
I0
sS'trials_2.thisTrialN'
p3477
I0
sS'trials.thisRepN'
p3478
I156
sS'trials_2.thisTrial'
p3479
NsS'trials.thisN'
p3480
I312
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3481
g46
sg31
g48
sS'trials.thisTrialN'
p3482
I0
sS'trials_2.thisN'
p3483
I0
sa(dp3484
g20
g21
sS'trials.thisIndex'
p3485
g36
(g38
S'\x01\x00\x00\x00'
tRp3486
sg22
V
sS'trials_2.thisRepN'
p3487
I0
sS'trials_2.thisTrialN'
p3488
I0
sS'trials.thisRepN'
p3489
I156
sS'trials_2.thisTrial'
p3490
NsS'trials.thisN'
p3491
I313
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3492
g46
sg31
g60
sS'trials.thisTrialN'
p3493
I1
sS'trials_2.thisN'
p3494
I0
sa(dp3495
g20
g21
sS'trials.thisIndex'
p3496
g36
(g38
S'\x00\x00\x00\x00'
tRp3497
sg22
V
sS'trials_2.thisRepN'
p3498
I0
sS'trials_2.thisTrialN'
p3499
I0
sS'trials.thisRepN'
p3500
I157
sS'trials_2.thisTrial'
p3501
NsS'trials.thisN'
p3502
I314
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3503
g46
sg31
g48
sS'trials.thisTrialN'
p3504
I0
sS'trials_2.thisN'
p3505
I0
sa(dp3506
g20
g21
sS'trials.thisIndex'
p3507
g36
(g38
S'\x01\x00\x00\x00'
tRp3508
sg22
V
sS'trials_2.thisRepN'
p3509
I0
sS'trials_2.thisTrialN'
p3510
I0
sS'trials.thisRepN'
p3511
I157
sS'trials_2.thisTrial'
p3512
NsS'trials.thisN'
p3513
I315
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3514
g46
sg31
g60
sS'trials.thisTrialN'
p3515
I1
sS'trials_2.thisN'
p3516
I0
sa(dp3517
g20
g21
sS'trials.thisIndex'
p3518
g36
(g38
S'\x00\x00\x00\x00'
tRp3519
sg22
V
sS'trials_2.thisRepN'
p3520
I0
sS'trials_2.thisTrialN'
p3521
I0
sS'trials.thisRepN'
p3522
I158
sS'trials_2.thisTrial'
p3523
NsS'trials.thisN'
p3524
I316
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3525
g46
sg31
g48
sS'trials.thisTrialN'
p3526
I0
sS'trials_2.thisN'
p3527
I0
sa(dp3528
g20
g21
sS'trials.thisIndex'
p3529
g36
(g38
S'\x01\x00\x00\x00'
tRp3530
sg22
V
sS'trials_2.thisRepN'
p3531
I0
sS'trials_2.thisTrialN'
p3532
I0
sS'trials.thisRepN'
p3533
I158
sS'trials_2.thisTrial'
p3534
NsS'trials.thisN'
p3535
I317
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3536
g46
sg31
g60
sS'trials.thisTrialN'
p3537
I1
sS'trials_2.thisN'
p3538
I0
sa(dp3539
g20
g21
sS'trials.thisIndex'
p3540
g36
(g38
S'\x00\x00\x00\x00'
tRp3541
sg22
V
sS'trials_2.thisRepN'
p3542
I0
sS'trials_2.thisTrialN'
p3543
I0
sS'trials.thisRepN'
p3544
I159
sS'trials_2.thisTrial'
p3545
NsS'trials.thisN'
p3546
I318
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3547
g46
sg31
g48
sS'trials.thisTrialN'
p3548
I0
sS'trials_2.thisN'
p3549
I0
sa(dp3550
g20
g21
sS'trials.thisIndex'
p3551
g36
(g38
S'\x01\x00\x00\x00'
tRp3552
sg22
V
sS'trials_2.thisRepN'
p3553
I0
sS'trials_2.thisTrialN'
p3554
I0
sS'trials.thisRepN'
p3555
I159
sS'trials_2.thisTrial'
p3556
NsS'trials.thisN'
p3557
I319
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3558
g46
sg31
g60
sS'trials.thisTrialN'
p3559
I1
sS'trials_2.thisN'
p3560
I0
sa(dp3561
g20
g21
sS'trials.thisIndex'
p3562
g36
(g38
S'\x00\x00\x00\x00'
tRp3563
sg22
V
sS'trials_2.thisRepN'
p3564
I0
sS'trials_2.thisTrialN'
p3565
I0
sS'trials.thisRepN'
p3566
I160
sS'trials_2.thisTrial'
p3567
NsS'trials.thisN'
p3568
I320
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3569
g46
sg31
g48
sS'trials.thisTrialN'
p3570
I0
sS'trials_2.thisN'
p3571
I0
sa(dp3572
g20
g21
sS'trials.thisIndex'
p3573
g36
(g38
S'\x01\x00\x00\x00'
tRp3574
sg22
V
sS'trials_2.thisRepN'
p3575
I0
sS'trials_2.thisTrialN'
p3576
I0
sS'trials.thisRepN'
p3577
I160
sS'trials_2.thisTrial'
p3578
NsS'trials.thisN'
p3579
I321
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3580
g46
sg31
g60
sS'trials.thisTrialN'
p3581
I1
sS'trials_2.thisN'
p3582
I0
sa(dp3583
g20
g21
sS'trials.thisIndex'
p3584
g36
(g38
S'\x00\x00\x00\x00'
tRp3585
sg22
V
sS'trials_2.thisRepN'
p3586
I0
sS'trials_2.thisTrialN'
p3587
I0
sS'trials.thisRepN'
p3588
I161
sS'trials_2.thisTrial'
p3589
NsS'trials.thisN'
p3590
I322
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3591
g46
sg31
g48
sS'trials.thisTrialN'
p3592
I0
sS'trials_2.thisN'
p3593
I0
sa(dp3594
g20
g21
sS'trials.thisIndex'
p3595
g36
(g38
S'\x01\x00\x00\x00'
tRp3596
sg22
V
sS'trials_2.thisRepN'
p3597
I0
sS'trials_2.thisTrialN'
p3598
I0
sS'trials.thisRepN'
p3599
I161
sS'trials_2.thisTrial'
p3600
NsS'trials.thisN'
p3601
I323
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3602
g46
sg31
g60
sS'trials.thisTrialN'
p3603
I1
sS'trials_2.thisN'
p3604
I0
sa(dp3605
g20
g21
sS'trials.thisIndex'
p3606
g36
(g38
S'\x00\x00\x00\x00'
tRp3607
sg22
V
sS'trials_2.thisRepN'
p3608
I0
sS'trials_2.thisTrialN'
p3609
I0
sS'trials.thisRepN'
p3610
I162
sS'trials_2.thisTrial'
p3611
NsS'trials.thisN'
p3612
I324
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3613
g46
sg31
g48
sS'trials.thisTrialN'
p3614
I0
sS'trials_2.thisN'
p3615
I0
sa(dp3616
g20
g21
sS'trials.thisIndex'
p3617
g36
(g38
S'\x01\x00\x00\x00'
tRp3618
sg22
V
sS'trials_2.thisRepN'
p3619
I0
sS'trials_2.thisTrialN'
p3620
I0
sS'trials.thisRepN'
p3621
I162
sS'trials_2.thisTrial'
p3622
NsS'trials.thisN'
p3623
I325
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3624
g46
sg31
g60
sS'trials.thisTrialN'
p3625
I1
sS'trials_2.thisN'
p3626
I0
sa(dp3627
g20
g21
sS'trials.thisIndex'
p3628
g36
(g38
S'\x00\x00\x00\x00'
tRp3629
sg22
V
sS'trials_2.thisRepN'
p3630
I0
sS'trials_2.thisTrialN'
p3631
I0
sS'trials.thisRepN'
p3632
I163
sS'trials_2.thisTrial'
p3633
NsS'trials.thisN'
p3634
I326
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3635
g46
sg31
g48
sS'trials.thisTrialN'
p3636
I0
sS'trials_2.thisN'
p3637
I0
sa(dp3638
g20
g21
sS'trials.thisIndex'
p3639
g36
(g38
S'\x01\x00\x00\x00'
tRp3640
sg22
V
sS'trials_2.thisRepN'
p3641
I0
sS'trials_2.thisTrialN'
p3642
I0
sS'trials.thisRepN'
p3643
I163
sS'trials_2.thisTrial'
p3644
NsS'trials.thisN'
p3645
I327
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3646
g46
sg31
g60
sS'trials.thisTrialN'
p3647
I1
sS'trials_2.thisN'
p3648
I0
sa(dp3649
g20
g21
sS'trials.thisIndex'
p3650
g36
(g38
S'\x00\x00\x00\x00'
tRp3651
sg22
V
sS'trials_2.thisRepN'
p3652
I0
sS'trials_2.thisTrialN'
p3653
I0
sS'trials.thisRepN'
p3654
I164
sS'trials_2.thisTrial'
p3655
NsS'trials.thisN'
p3656
I328
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3657
g46
sg31
g48
sS'trials.thisTrialN'
p3658
I0
sS'trials_2.thisN'
p3659
I0
sa(dp3660
g20
g21
sS'trials.thisIndex'
p3661
g36
(g38
S'\x01\x00\x00\x00'
tRp3662
sg22
V
sS'trials_2.thisRepN'
p3663
I0
sS'trials_2.thisTrialN'
p3664
I0
sS'trials.thisRepN'
p3665
I164
sS'trials_2.thisTrial'
p3666
NsS'trials.thisN'
p3667
I329
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3668
g46
sg31
g60
sS'trials.thisTrialN'
p3669
I1
sS'trials_2.thisN'
p3670
I0
sa(dp3671
g20
g21
sS'trials.thisIndex'
p3672
g36
(g38
S'\x00\x00\x00\x00'
tRp3673
sg22
V
sS'trials_2.thisRepN'
p3674
I0
sS'trials_2.thisTrialN'
p3675
I0
sS'trials.thisRepN'
p3676
I165
sS'trials_2.thisTrial'
p3677
NsS'trials.thisN'
p3678
I330
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3679
g46
sg31
g48
sS'trials.thisTrialN'
p3680
I0
sS'trials_2.thisN'
p3681
I0
sa(dp3682
g20
g21
sS'trials.thisIndex'
p3683
g36
(g38
S'\x01\x00\x00\x00'
tRp3684
sg22
V
sS'trials_2.thisRepN'
p3685
I0
sS'trials_2.thisTrialN'
p3686
I0
sS'trials.thisRepN'
p3687
I165
sS'trials_2.thisTrial'
p3688
NsS'trials.thisN'
p3689
I331
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3690
g46
sg31
g60
sS'trials.thisTrialN'
p3691
I1
sS'trials_2.thisN'
p3692
I0
sa(dp3693
g20
g21
sS'trials.thisIndex'
p3694
g36
(g38
S'\x00\x00\x00\x00'
tRp3695
sg22
V
sS'trials_2.thisRepN'
p3696
I0
sS'trials_2.thisTrialN'
p3697
I0
sS'trials.thisRepN'
p3698
I166
sS'trials_2.thisTrial'
p3699
NsS'trials.thisN'
p3700
I332
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3701
g46
sg31
g48
sS'trials.thisTrialN'
p3702
I0
sS'trials_2.thisN'
p3703
I0
sa(dp3704
g20
g21
sS'trials.thisIndex'
p3705
g36
(g38
S'\x01\x00\x00\x00'
tRp3706
sg22
V
sS'trials_2.thisRepN'
p3707
I0
sS'trials_2.thisTrialN'
p3708
I0
sS'trials.thisRepN'
p3709
I166
sS'trials_2.thisTrial'
p3710
NsS'trials.thisN'
p3711
I333
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3712
g46
sg31
g60
sS'trials.thisTrialN'
p3713
I1
sS'trials_2.thisN'
p3714
I0
sa(dp3715
g20
g21
sS'trials.thisIndex'
p3716
g36
(g38
S'\x00\x00\x00\x00'
tRp3717
sg22
V
sS'trials_2.thisRepN'
p3718
I0
sS'trials_2.thisTrialN'
p3719
I0
sS'trials.thisRepN'
p3720
I167
sS'trials_2.thisTrial'
p3721
NsS'trials.thisN'
p3722
I334
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3723
g46
sg31
g48
sS'trials.thisTrialN'
p3724
I0
sS'trials_2.thisN'
p3725
I0
sa(dp3726
g20
g21
sS'trials.thisIndex'
p3727
g36
(g38
S'\x01\x00\x00\x00'
tRp3728
sg22
V
sS'trials_2.thisRepN'
p3729
I0
sS'trials_2.thisTrialN'
p3730
I0
sS'trials.thisRepN'
p3731
I167
sS'trials_2.thisTrial'
p3732
NsS'trials.thisN'
p3733
I335
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3734
g46
sg31
g60
sS'trials.thisTrialN'
p3735
I1
sS'trials_2.thisN'
p3736
I0
sa(dp3737
g20
g21
sS'trials.thisIndex'
p3738
g36
(g38
S'\x00\x00\x00\x00'
tRp3739
sg22
V
sS'trials_2.thisRepN'
p3740
I0
sS'trials_2.thisTrialN'
p3741
I0
sS'trials.thisRepN'
p3742
I168
sS'trials_2.thisTrial'
p3743
NsS'trials.thisN'
p3744
I336
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3745
g46
sg31
g48
sS'trials.thisTrialN'
p3746
I0
sS'trials_2.thisN'
p3747
I0
sa(dp3748
g20
g21
sS'trials.thisIndex'
p3749
g36
(g38
S'\x01\x00\x00\x00'
tRp3750
sg22
V
sS'trials_2.thisRepN'
p3751
I0
sS'trials_2.thisTrialN'
p3752
I0
sS'trials.thisRepN'
p3753
I168
sS'trials_2.thisTrial'
p3754
NsS'trials.thisN'
p3755
I337
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3756
g46
sg31
g60
sS'trials.thisTrialN'
p3757
I1
sS'trials_2.thisN'
p3758
I0
sa(dp3759
g20
g21
sS'trials.thisIndex'
p3760
g36
(g38
S'\x00\x00\x00\x00'
tRp3761
sg22
V
sS'trials_2.thisRepN'
p3762
I0
sS'trials_2.thisTrialN'
p3763
I0
sS'trials.thisRepN'
p3764
I169
sS'trials_2.thisTrial'
p3765
NsS'trials.thisN'
p3766
I338
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3767
g46
sg31
g48
sS'trials.thisTrialN'
p3768
I0
sS'trials_2.thisN'
p3769
I0
sa(dp3770
g20
g21
sS'trials.thisIndex'
p3771
g36
(g38
S'\x01\x00\x00\x00'
tRp3772
sg22
V
sS'trials_2.thisRepN'
p3773
I0
sS'trials_2.thisTrialN'
p3774
I0
sS'trials.thisRepN'
p3775
I169
sS'trials_2.thisTrial'
p3776
NsS'trials.thisN'
p3777
I339
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3778
g46
sg31
g60
sS'trials.thisTrialN'
p3779
I1
sS'trials_2.thisN'
p3780
I0
sa(dp3781
g20
g21
sS'trials.thisIndex'
p3782
g36
(g38
S'\x00\x00\x00\x00'
tRp3783
sg22
V
sS'trials_2.thisRepN'
p3784
I0
sS'trials_2.thisTrialN'
p3785
I0
sS'trials.thisRepN'
p3786
I170
sS'trials_2.thisTrial'
p3787
NsS'trials.thisN'
p3788
I340
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3789
g46
sg31
g48
sS'trials.thisTrialN'
p3790
I0
sS'trials_2.thisN'
p3791
I0
sa(dp3792
g20
g21
sS'trials.thisIndex'
p3793
g36
(g38
S'\x01\x00\x00\x00'
tRp3794
sg22
V
sS'trials_2.thisRepN'
p3795
I0
sS'trials_2.thisTrialN'
p3796
I0
sS'trials.thisRepN'
p3797
I170
sS'trials_2.thisTrial'
p3798
NsS'trials.thisN'
p3799
I341
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3800
g46
sg31
g60
sS'trials.thisTrialN'
p3801
I1
sS'trials_2.thisN'
p3802
I0
sa(dp3803
g20
g21
sS'trials.thisIndex'
p3804
g36
(g38
S'\x00\x00\x00\x00'
tRp3805
sg22
V
sS'trials_2.thisRepN'
p3806
I0
sS'trials_2.thisTrialN'
p3807
I0
sS'trials.thisRepN'
p3808
I171
sS'trials_2.thisTrial'
p3809
NsS'trials.thisN'
p3810
I342
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3811
g46
sg31
g48
sS'trials.thisTrialN'
p3812
I0
sS'trials_2.thisN'
p3813
I0
sa(dp3814
g20
g21
sS'trials.thisIndex'
p3815
g36
(g38
S'\x01\x00\x00\x00'
tRp3816
sg22
V
sS'trials_2.thisRepN'
p3817
I0
sS'trials_2.thisTrialN'
p3818
I0
sS'trials.thisRepN'
p3819
I171
sS'trials_2.thisTrial'
p3820
NsS'trials.thisN'
p3821
I343
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3822
g46
sg31
g60
sS'trials.thisTrialN'
p3823
I1
sS'trials_2.thisN'
p3824
I0
sa(dp3825
g20
g21
sS'trials.thisIndex'
p3826
g36
(g38
S'\x00\x00\x00\x00'
tRp3827
sg22
V
sS'trials_2.thisRepN'
p3828
I0
sS'trials_2.thisTrialN'
p3829
I0
sS'trials.thisRepN'
p3830
I172
sS'trials_2.thisTrial'
p3831
NsS'trials.thisN'
p3832
I344
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3833
g46
sg31
g48
sS'trials.thisTrialN'
p3834
I0
sS'trials_2.thisN'
p3835
I0
sa(dp3836
g20
g21
sS'trials.thisIndex'
p3837
g36
(g38
S'\x01\x00\x00\x00'
tRp3838
sg22
V
sS'trials_2.thisRepN'
p3839
I0
sS'trials_2.thisTrialN'
p3840
I0
sS'trials.thisRepN'
p3841
I172
sS'trials_2.thisTrial'
p3842
NsS'trials.thisN'
p3843
I345
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3844
g46
sg31
g60
sS'trials.thisTrialN'
p3845
I1
sS'trials_2.thisN'
p3846
I0
sa(dp3847
g20
g21
sS'trials.thisIndex'
p3848
g36
(g38
S'\x00\x00\x00\x00'
tRp3849
sg22
V
sS'trials_2.thisRepN'
p3850
I0
sS'trials_2.thisTrialN'
p3851
I0
sS'trials.thisRepN'
p3852
I173
sS'trials_2.thisTrial'
p3853
NsS'trials.thisN'
p3854
I346
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3855
g46
sg31
g48
sS'trials.thisTrialN'
p3856
I0
sS'trials_2.thisN'
p3857
I0
sa(dp3858
g20
g21
sS'trials.thisIndex'
p3859
g36
(g38
S'\x01\x00\x00\x00'
tRp3860
sg22
V
sS'trials_2.thisRepN'
p3861
I0
sS'trials_2.thisTrialN'
p3862
I0
sS'trials.thisRepN'
p3863
I173
sS'trials_2.thisTrial'
p3864
NsS'trials.thisN'
p3865
I347
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3866
g46
sg31
g60
sS'trials.thisTrialN'
p3867
I1
sS'trials_2.thisN'
p3868
I0
sa(dp3869
g20
g21
sS'trials.thisIndex'
p3870
g36
(g38
S'\x00\x00\x00\x00'
tRp3871
sg22
V
sS'trials_2.thisRepN'
p3872
I0
sS'trials_2.thisTrialN'
p3873
I0
sS'trials.thisRepN'
p3874
I174
sS'trials_2.thisTrial'
p3875
NsS'trials.thisN'
p3876
I348
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3877
g46
sg31
g48
sS'trials.thisTrialN'
p3878
I0
sS'trials_2.thisN'
p3879
I0
sa(dp3880
g20
g21
sS'trials.thisIndex'
p3881
g36
(g38
S'\x01\x00\x00\x00'
tRp3882
sg22
V
sS'trials_2.thisRepN'
p3883
I0
sS'trials_2.thisTrialN'
p3884
I0
sS'trials.thisRepN'
p3885
I174
sS'trials_2.thisTrial'
p3886
NsS'trials.thisN'
p3887
I349
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3888
g46
sg31
g60
sS'trials.thisTrialN'
p3889
I1
sS'trials_2.thisN'
p3890
I0
sa(dp3891
g20
g21
sS'trials.thisIndex'
p3892
g36
(g38
S'\x00\x00\x00\x00'
tRp3893
sg22
V
sS'trials_2.thisRepN'
p3894
I0
sS'trials_2.thisTrialN'
p3895
I0
sS'trials.thisRepN'
p3896
I175
sS'trials_2.thisTrial'
p3897
NsS'trials.thisN'
p3898
I350
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3899
g46
sg31
g48
sS'trials.thisTrialN'
p3900
I0
sS'trials_2.thisN'
p3901
I0
sa(dp3902
g20
g21
sS'trials.thisIndex'
p3903
g36
(g38
S'\x01\x00\x00\x00'
tRp3904
sg22
V
sS'trials_2.thisRepN'
p3905
I0
sS'trials_2.thisTrialN'
p3906
I0
sS'trials.thisRepN'
p3907
I175
sS'trials_2.thisTrial'
p3908
NsS'trials.thisN'
p3909
I351
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3910
g46
sg31
g60
sS'trials.thisTrialN'
p3911
I1
sS'trials_2.thisN'
p3912
I0
sa(dp3913
g20
g21
sS'trials.thisIndex'
p3914
g36
(g38
S'\x00\x00\x00\x00'
tRp3915
sg22
V
sS'trials_2.thisRepN'
p3916
I0
sS'trials_2.thisTrialN'
p3917
I0
sS'trials.thisRepN'
p3918
I176
sS'trials_2.thisTrial'
p3919
NsS'trials.thisN'
p3920
I352
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3921
g46
sg31
g48
sS'trials.thisTrialN'
p3922
I0
sS'trials_2.thisN'
p3923
I0
sa(dp3924
g20
g21
sS'trials.thisIndex'
p3925
g36
(g38
S'\x01\x00\x00\x00'
tRp3926
sg22
V
sS'trials_2.thisRepN'
p3927
I0
sS'trials_2.thisTrialN'
p3928
I0
sS'trials.thisRepN'
p3929
I176
sS'trials_2.thisTrial'
p3930
NsS'trials.thisN'
p3931
I353
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3932
g46
sg31
g60
sS'trials.thisTrialN'
p3933
I1
sS'trials_2.thisN'
p3934
I0
sa(dp3935
g20
g21
sS'trials.thisIndex'
p3936
g36
(g38
S'\x00\x00\x00\x00'
tRp3937
sg22
V
sS'trials_2.thisRepN'
p3938
I0
sS'trials_2.thisTrialN'
p3939
I0
sS'trials.thisRepN'
p3940
I177
sS'trials_2.thisTrial'
p3941
NsS'trials.thisN'
p3942
I354
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3943
g46
sg31
g48
sS'trials.thisTrialN'
p3944
I0
sS'trials_2.thisN'
p3945
I0
sa(dp3946
g20
g21
sS'trials.thisIndex'
p3947
g36
(g38
S'\x01\x00\x00\x00'
tRp3948
sg22
V
sS'trials_2.thisRepN'
p3949
I0
sS'trials_2.thisTrialN'
p3950
I0
sS'trials.thisRepN'
p3951
I177
sS'trials_2.thisTrial'
p3952
NsS'trials.thisN'
p3953
I355
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3954
g46
sg31
g60
sS'trials.thisTrialN'
p3955
I1
sS'trials_2.thisN'
p3956
I0
sa(dp3957
g20
g21
sS'trials.thisIndex'
p3958
g36
(g38
S'\x00\x00\x00\x00'
tRp3959
sg22
V
sS'trials_2.thisRepN'
p3960
I0
sS'trials_2.thisTrialN'
p3961
I0
sS'trials.thisRepN'
p3962
I178
sS'trials_2.thisTrial'
p3963
NsS'trials.thisN'
p3964
I356
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3965
g46
sg31
g48
sS'trials.thisTrialN'
p3966
I0
sS'trials_2.thisN'
p3967
I0
sa(dp3968
g20
g21
sS'trials.thisIndex'
p3969
g36
(g38
S'\x01\x00\x00\x00'
tRp3970
sg22
V
sS'trials_2.thisRepN'
p3971
I0
sS'trials_2.thisTrialN'
p3972
I0
sS'trials.thisRepN'
p3973
I178
sS'trials_2.thisTrial'
p3974
NsS'trials.thisN'
p3975
I357
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3976
g46
sg31
g60
sS'trials.thisTrialN'
p3977
I1
sS'trials_2.thisN'
p3978
I0
sa(dp3979
g20
g21
sS'trials.thisIndex'
p3980
g36
(g38
S'\x00\x00\x00\x00'
tRp3981
sg22
V
sS'trials_2.thisRepN'
p3982
I0
sS'trials_2.thisTrialN'
p3983
I0
sS'trials.thisRepN'
p3984
I179
sS'trials_2.thisTrial'
p3985
NsS'trials.thisN'
p3986
I358
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3987
g46
sg31
g48
sS'trials.thisTrialN'
p3988
I0
sS'trials_2.thisN'
p3989
I0
sa(dp3990
g20
g21
sS'trials.thisIndex'
p3991
g36
(g38
S'\x01\x00\x00\x00'
tRp3992
sg22
V
sS'trials_2.thisRepN'
p3993
I0
sS'trials_2.thisTrialN'
p3994
I0
sS'trials.thisRepN'
p3995
I179
sS'trials_2.thisTrial'
p3996
NsS'trials.thisN'
p3997
I359
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p3998
g46
sg31
g60
sS'trials.thisTrialN'
p3999
I1
sS'trials_2.thisN'
p4000
I0
sa(dp4001
g20
g21
sS'trials.thisIndex'
p4002
g36
(g38
S'\x00\x00\x00\x00'
tRp4003
sg22
V
sS'trials_2.thisRepN'
p4004
I0
sS'trials_2.thisTrialN'
p4005
I0
sS'trials.thisRepN'
p4006
I180
sS'trials_2.thisTrial'
p4007
NsS'trials.thisN'
p4008
I360
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4009
g46
sg31
g48
sS'trials.thisTrialN'
p4010
I0
sS'trials_2.thisN'
p4011
I0
sa(dp4012
g20
g21
sS'trials.thisIndex'
p4013
g36
(g38
S'\x01\x00\x00\x00'
tRp4014
sg22
V
sS'trials_2.thisRepN'
p4015
I0
sS'trials_2.thisTrialN'
p4016
I0
sS'trials.thisRepN'
p4017
I180
sS'trials_2.thisTrial'
p4018
NsS'trials.thisN'
p4019
I361
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4020
g46
sg31
g60
sS'trials.thisTrialN'
p4021
I1
sS'trials_2.thisN'
p4022
I0
sa(dp4023
g20
g21
sS'trials.thisIndex'
p4024
g36
(g38
S'\x00\x00\x00\x00'
tRp4025
sg22
V
sS'trials_2.thisRepN'
p4026
I0
sS'trials_2.thisTrialN'
p4027
I0
sS'trials.thisRepN'
p4028
I181
sS'trials_2.thisTrial'
p4029
NsS'trials.thisN'
p4030
I362
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4031
g46
sg31
g48
sS'trials.thisTrialN'
p4032
I0
sS'trials_2.thisN'
p4033
I0
sa(dp4034
g20
g21
sS'trials.thisIndex'
p4035
g36
(g38
S'\x01\x00\x00\x00'
tRp4036
sg22
V
sS'trials_2.thisRepN'
p4037
I0
sS'trials_2.thisTrialN'
p4038
I0
sS'trials.thisRepN'
p4039
I181
sS'trials_2.thisTrial'
p4040
NsS'trials.thisN'
p4041
I363
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4042
g46
sg31
g60
sS'trials.thisTrialN'
p4043
I1
sS'trials_2.thisN'
p4044
I0
sa(dp4045
g20
g21
sS'trials.thisIndex'
p4046
g36
(g38
S'\x00\x00\x00\x00'
tRp4047
sg22
V
sS'trials_2.thisRepN'
p4048
I0
sS'trials_2.thisTrialN'
p4049
I0
sS'trials.thisRepN'
p4050
I182
sS'trials_2.thisTrial'
p4051
NsS'trials.thisN'
p4052
I364
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4053
g46
sg31
g48
sS'trials.thisTrialN'
p4054
I0
sS'trials_2.thisN'
p4055
I0
sa(dp4056
g20
g21
sS'trials.thisIndex'
p4057
g36
(g38
S'\x01\x00\x00\x00'
tRp4058
sg22
V
sS'trials_2.thisRepN'
p4059
I0
sS'trials_2.thisTrialN'
p4060
I0
sS'trials.thisRepN'
p4061
I182
sS'trials_2.thisTrial'
p4062
NsS'trials.thisN'
p4063
I365
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4064
g46
sg31
g60
sS'trials.thisTrialN'
p4065
I1
sS'trials_2.thisN'
p4066
I0
sa(dp4067
g20
g21
sS'trials.thisIndex'
p4068
g36
(g38
S'\x00\x00\x00\x00'
tRp4069
sg22
V
sS'trials_2.thisRepN'
p4070
I0
sS'trials_2.thisTrialN'
p4071
I0
sS'trials.thisRepN'
p4072
I183
sS'trials_2.thisTrial'
p4073
NsS'trials.thisN'
p4074
I366
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4075
g46
sg31
g48
sS'trials.thisTrialN'
p4076
I0
sS'trials_2.thisN'
p4077
I0
sa(dp4078
g20
g21
sS'trials.thisIndex'
p4079
g36
(g38
S'\x01\x00\x00\x00'
tRp4080
sg22
V
sS'trials_2.thisRepN'
p4081
I0
sS'trials_2.thisTrialN'
p4082
I0
sS'trials.thisRepN'
p4083
I183
sS'trials_2.thisTrial'
p4084
NsS'trials.thisN'
p4085
I367
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4086
g46
sg31
g60
sS'trials.thisTrialN'
p4087
I1
sS'trials_2.thisN'
p4088
I0
sa(dp4089
g20
g21
sS'trials.thisIndex'
p4090
g36
(g38
S'\x00\x00\x00\x00'
tRp4091
sg22
V
sS'trials_2.thisRepN'
p4092
I0
sS'trials_2.thisTrialN'
p4093
I0
sS'trials.thisRepN'
p4094
I184
sS'trials_2.thisTrial'
p4095
NsS'trials.thisN'
p4096
I368
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4097
g46
sg31
g48
sS'trials.thisTrialN'
p4098
I0
sS'trials_2.thisN'
p4099
I0
sa(dp4100
g20
g21
sS'trials.thisIndex'
p4101
g36
(g38
S'\x01\x00\x00\x00'
tRp4102
sg22
V
sS'trials_2.thisRepN'
p4103
I0
sS'trials_2.thisTrialN'
p4104
I0
sS'trials.thisRepN'
p4105
I184
sS'trials_2.thisTrial'
p4106
NsS'trials.thisN'
p4107
I369
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4108
g46
sg31
g60
sS'trials.thisTrialN'
p4109
I1
sS'trials_2.thisN'
p4110
I0
sa(dp4111
g20
g21
sS'trials.thisIndex'
p4112
g36
(g38
S'\x00\x00\x00\x00'
tRp4113
sg22
V
sS'trials_2.thisRepN'
p4114
I0
sS'trials_2.thisTrialN'
p4115
I0
sS'trials.thisRepN'
p4116
I185
sS'trials_2.thisTrial'
p4117
NsS'trials.thisN'
p4118
I370
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4119
g46
sg31
g48
sS'trials.thisTrialN'
p4120
I0
sS'trials_2.thisN'
p4121
I0
sa(dp4122
g20
g21
sS'trials.thisIndex'
p4123
g36
(g38
S'\x01\x00\x00\x00'
tRp4124
sg22
V
sS'trials_2.thisRepN'
p4125
I0
sS'trials_2.thisTrialN'
p4126
I0
sS'trials.thisRepN'
p4127
I185
sS'trials_2.thisTrial'
p4128
NsS'trials.thisN'
p4129
I371
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4130
g46
sg31
g60
sS'trials.thisTrialN'
p4131
I1
sS'trials_2.thisN'
p4132
I0
sa(dp4133
g20
g21
sS'trials.thisIndex'
p4134
g36
(g38
S'\x00\x00\x00\x00'
tRp4135
sg22
V
sS'trials_2.thisRepN'
p4136
I0
sS'trials_2.thisTrialN'
p4137
I0
sS'trials.thisRepN'
p4138
I186
sS'trials_2.thisTrial'
p4139
NsS'trials.thisN'
p4140
I372
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4141
g46
sg31
g48
sS'trials.thisTrialN'
p4142
I0
sS'trials_2.thisN'
p4143
I0
sa(dp4144
g20
g21
sS'trials.thisIndex'
p4145
g36
(g38
S'\x01\x00\x00\x00'
tRp4146
sg22
V
sS'trials_2.thisRepN'
p4147
I0
sS'trials_2.thisTrialN'
p4148
I0
sS'trials.thisRepN'
p4149
I186
sS'trials_2.thisTrial'
p4150
NsS'trials.thisN'
p4151
I373
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4152
g46
sg31
g60
sS'trials.thisTrialN'
p4153
I1
sS'trials_2.thisN'
p4154
I0
sa(dp4155
g20
g21
sS'trials.thisIndex'
p4156
g36
(g38
S'\x00\x00\x00\x00'
tRp4157
sg22
V
sS'trials_2.thisRepN'
p4158
I0
sS'trials_2.thisTrialN'
p4159
I0
sS'trials.thisRepN'
p4160
I187
sS'trials_2.thisTrial'
p4161
NsS'trials.thisN'
p4162
I374
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4163
g46
sg31
g48
sS'trials.thisTrialN'
p4164
I0
sS'trials_2.thisN'
p4165
I0
sa(dp4166
g20
g21
sS'trials.thisIndex'
p4167
g36
(g38
S'\x01\x00\x00\x00'
tRp4168
sg22
V
sS'trials_2.thisRepN'
p4169
I0
sS'trials_2.thisTrialN'
p4170
I0
sS'trials.thisRepN'
p4171
I187
sS'trials_2.thisTrial'
p4172
NsS'trials.thisN'
p4173
I375
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4174
g46
sg31
g60
sS'trials.thisTrialN'
p4175
I1
sS'trials_2.thisN'
p4176
I0
sa(dp4177
g20
g21
sS'trials.thisIndex'
p4178
g36
(g38
S'\x00\x00\x00\x00'
tRp4179
sg22
V
sS'trials_2.thisRepN'
p4180
I0
sS'trials_2.thisTrialN'
p4181
I0
sS'trials.thisRepN'
p4182
I188
sS'trials_2.thisTrial'
p4183
NsS'trials.thisN'
p4184
I376
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4185
g46
sg31
g48
sS'trials.thisTrialN'
p4186
I0
sS'trials_2.thisN'
p4187
I0
sa(dp4188
g20
g21
sS'trials.thisIndex'
p4189
g36
(g38
S'\x01\x00\x00\x00'
tRp4190
sg22
V
sS'trials_2.thisRepN'
p4191
I0
sS'trials_2.thisTrialN'
p4192
I0
sS'trials.thisRepN'
p4193
I188
sS'trials_2.thisTrial'
p4194
NsS'trials.thisN'
p4195
I377
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4196
g46
sg31
g60
sS'trials.thisTrialN'
p4197
I1
sS'trials_2.thisN'
p4198
I0
sa(dp4199
g20
g21
sS'trials.thisIndex'
p4200
g36
(g38
S'\x00\x00\x00\x00'
tRp4201
sg22
V
sS'trials_2.thisRepN'
p4202
I0
sS'trials_2.thisTrialN'
p4203
I0
sS'trials.thisRepN'
p4204
I189
sS'trials_2.thisTrial'
p4205
NsS'trials.thisN'
p4206
I378
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4207
g46
sg31
g48
sS'trials.thisTrialN'
p4208
I0
sS'trials_2.thisN'
p4209
I0
sa(dp4210
g20
g21
sS'trials.thisIndex'
p4211
g36
(g38
S'\x01\x00\x00\x00'
tRp4212
sg22
V
sS'trials_2.thisRepN'
p4213
I0
sS'trials_2.thisTrialN'
p4214
I0
sS'trials.thisRepN'
p4215
I189
sS'trials_2.thisTrial'
p4216
NsS'trials.thisN'
p4217
I379
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4218
g46
sg31
g60
sS'trials.thisTrialN'
p4219
I1
sS'trials_2.thisN'
p4220
I0
sa(dp4221
g20
g21
sS'trials.thisIndex'
p4222
g36
(g38
S'\x00\x00\x00\x00'
tRp4223
sg22
V
sS'trials_2.thisRepN'
p4224
I0
sS'trials_2.thisTrialN'
p4225
I0
sS'trials.thisRepN'
p4226
I190
sS'trials_2.thisTrial'
p4227
NsS'trials.thisN'
p4228
I380
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4229
g46
sg31
g48
sS'trials.thisTrialN'
p4230
I0
sS'trials_2.thisN'
p4231
I0
sa(dp4232
g20
g21
sS'trials.thisIndex'
p4233
g36
(g38
S'\x01\x00\x00\x00'
tRp4234
sg22
V
sS'trials_2.thisRepN'
p4235
I0
sS'trials_2.thisTrialN'
p4236
I0
sS'trials.thisRepN'
p4237
I190
sS'trials_2.thisTrial'
p4238
NsS'trials.thisN'
p4239
I381
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4240
g46
sg31
g60
sS'trials.thisTrialN'
p4241
I1
sS'trials_2.thisN'
p4242
I0
sa(dp4243
g20
g21
sS'trials.thisIndex'
p4244
g36
(g38
S'\x00\x00\x00\x00'
tRp4245
sg22
V
sS'trials_2.thisRepN'
p4246
I0
sS'trials_2.thisTrialN'
p4247
I0
sS'trials.thisRepN'
p4248
I191
sS'trials_2.thisTrial'
p4249
NsS'trials.thisN'
p4250
I382
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4251
g46
sg31
g48
sS'trials.thisTrialN'
p4252
I0
sS'trials_2.thisN'
p4253
I0
sa(dp4254
g20
g21
sS'trials.thisIndex'
p4255
g36
(g38
S'\x01\x00\x00\x00'
tRp4256
sg22
V
sS'trials_2.thisRepN'
p4257
I0
sS'trials_2.thisTrialN'
p4258
I0
sS'trials.thisRepN'
p4259
I191
sS'trials_2.thisTrial'
p4260
NsS'trials.thisN'
p4261
I383
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4262
g46
sg31
g60
sS'trials.thisTrialN'
p4263
I1
sS'trials_2.thisN'
p4264
I0
sa(dp4265
g20
g21
sS'trials.thisIndex'
p4266
g36
(g38
S'\x00\x00\x00\x00'
tRp4267
sg22
V
sS'trials_2.thisRepN'
p4268
I0
sS'trials_2.thisTrialN'
p4269
I0
sS'trials.thisRepN'
p4270
I192
sS'trials_2.thisTrial'
p4271
NsS'trials.thisN'
p4272
I384
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4273
g46
sg31
g48
sS'trials.thisTrialN'
p4274
I0
sS'trials_2.thisN'
p4275
I0
sa(dp4276
g20
g21
sS'trials.thisIndex'
p4277
g36
(g38
S'\x01\x00\x00\x00'
tRp4278
sg22
V
sS'trials_2.thisRepN'
p4279
I0
sS'trials_2.thisTrialN'
p4280
I0
sS'trials.thisRepN'
p4281
I192
sS'trials_2.thisTrial'
p4282
NsS'trials.thisN'
p4283
I385
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4284
g46
sg31
g60
sS'trials.thisTrialN'
p4285
I1
sS'trials_2.thisN'
p4286
I0
sa(dp4287
g20
g21
sS'trials.thisIndex'
p4288
g36
(g38
S'\x00\x00\x00\x00'
tRp4289
sg22
V
sS'trials_2.thisRepN'
p4290
I0
sS'trials_2.thisTrialN'
p4291
I0
sS'trials.thisRepN'
p4292
I193
sS'trials_2.thisTrial'
p4293
NsS'trials.thisN'
p4294
I386
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4295
g46
sg31
g48
sS'trials.thisTrialN'
p4296
I0
sS'trials_2.thisN'
p4297
I0
sa(dp4298
g20
g21
sS'trials.thisIndex'
p4299
g36
(g38
S'\x01\x00\x00\x00'
tRp4300
sg22
V
sS'trials_2.thisRepN'
p4301
I0
sS'trials_2.thisTrialN'
p4302
I0
sS'trials.thisRepN'
p4303
I193
sS'trials_2.thisTrial'
p4304
NsS'trials.thisN'
p4305
I387
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4306
g46
sg31
g60
sS'trials.thisTrialN'
p4307
I1
sS'trials_2.thisN'
p4308
I0
sa(dp4309
g20
g21
sS'trials.thisIndex'
p4310
g36
(g38
S'\x00\x00\x00\x00'
tRp4311
sg22
V
sS'trials_2.thisRepN'
p4312
I0
sS'trials_2.thisTrialN'
p4313
I0
sS'trials.thisRepN'
p4314
I194
sS'trials_2.thisTrial'
p4315
NsS'trials.thisN'
p4316
I388
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4317
g46
sg31
g48
sS'trials.thisTrialN'
p4318
I0
sS'trials_2.thisN'
p4319
I0
sa(dp4320
g20
g21
sS'trials.thisIndex'
p4321
g36
(g38
S'\x01\x00\x00\x00'
tRp4322
sg22
V
sS'trials_2.thisRepN'
p4323
I0
sS'trials_2.thisTrialN'
p4324
I0
sS'trials.thisRepN'
p4325
I194
sS'trials_2.thisTrial'
p4326
NsS'trials.thisN'
p4327
I389
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4328
g46
sg31
g60
sS'trials.thisTrialN'
p4329
I1
sS'trials_2.thisN'
p4330
I0
sa(dp4331
g20
g21
sS'trials.thisIndex'
p4332
g36
(g38
S'\x00\x00\x00\x00'
tRp4333
sg22
V
sS'trials_2.thisRepN'
p4334
I0
sS'trials_2.thisTrialN'
p4335
I0
sS'trials.thisRepN'
p4336
I195
sS'trials_2.thisTrial'
p4337
NsS'trials.thisN'
p4338
I390
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4339
g46
sg31
g48
sS'trials.thisTrialN'
p4340
I0
sS'trials_2.thisN'
p4341
I0
sa(dp4342
g20
g21
sS'trials.thisIndex'
p4343
g36
(g38
S'\x01\x00\x00\x00'
tRp4344
sg22
V
sS'trials_2.thisRepN'
p4345
I0
sS'trials_2.thisTrialN'
p4346
I0
sS'trials.thisRepN'
p4347
I195
sS'trials_2.thisTrial'
p4348
NsS'trials.thisN'
p4349
I391
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4350
g46
sg31
g60
sS'trials.thisTrialN'
p4351
I1
sS'trials_2.thisN'
p4352
I0
sa(dp4353
g20
g21
sS'trials.thisIndex'
p4354
g36
(g38
S'\x00\x00\x00\x00'
tRp4355
sg22
V
sS'trials_2.thisRepN'
p4356
I0
sS'trials_2.thisTrialN'
p4357
I0
sS'trials.thisRepN'
p4358
I196
sS'trials_2.thisTrial'
p4359
NsS'trials.thisN'
p4360
I392
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4361
g46
sg31
g48
sS'trials.thisTrialN'
p4362
I0
sS'trials_2.thisN'
p4363
I0
sa(dp4364
g20
g21
sS'trials.thisIndex'
p4365
g36
(g38
S'\x01\x00\x00\x00'
tRp4366
sg22
V
sS'trials_2.thisRepN'
p4367
I0
sS'trials_2.thisTrialN'
p4368
I0
sS'trials.thisRepN'
p4369
I196
sS'trials_2.thisTrial'
p4370
NsS'trials.thisN'
p4371
I393
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4372
g46
sg31
g60
sS'trials.thisTrialN'
p4373
I1
sS'trials_2.thisN'
p4374
I0
sa(dp4375
g20
g21
sS'trials.thisIndex'
p4376
g36
(g38
S'\x00\x00\x00\x00'
tRp4377
sg22
V
sS'trials_2.thisRepN'
p4378
I0
sS'trials_2.thisTrialN'
p4379
I0
sS'trials.thisRepN'
p4380
I197
sS'trials_2.thisTrial'
p4381
NsS'trials.thisN'
p4382
I394
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4383
g46
sg31
g48
sS'trials.thisTrialN'
p4384
I0
sS'trials_2.thisN'
p4385
I0
sa(dp4386
g20
g21
sS'trials.thisIndex'
p4387
g36
(g38
S'\x01\x00\x00\x00'
tRp4388
sg22
V
sS'trials_2.thisRepN'
p4389
I0
sS'trials_2.thisTrialN'
p4390
I0
sS'trials.thisRepN'
p4391
I197
sS'trials_2.thisTrial'
p4392
NsS'trials.thisN'
p4393
I395
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4394
g46
sg31
g60
sS'trials.thisTrialN'
p4395
I1
sS'trials_2.thisN'
p4396
I0
sa(dp4397
g20
g21
sS'trials.thisIndex'
p4398
g36
(g38
S'\x00\x00\x00\x00'
tRp4399
sg22
V
sS'trials_2.thisRepN'
p4400
I0
sS'trials_2.thisTrialN'
p4401
I0
sS'trials.thisRepN'
p4402
I198
sS'trials_2.thisTrial'
p4403
NsS'trials.thisN'
p4404
I396
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4405
g46
sg31
g48
sS'trials.thisTrialN'
p4406
I0
sS'trials_2.thisN'
p4407
I0
sa(dp4408
g20
g21
sS'trials.thisIndex'
p4409
g36
(g38
S'\x01\x00\x00\x00'
tRp4410
sg22
V
sS'trials_2.thisRepN'
p4411
I0
sS'trials_2.thisTrialN'
p4412
I0
sS'trials.thisRepN'
p4413
I198
sS'trials_2.thisTrial'
p4414
NsS'trials.thisN'
p4415
I397
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4416
g46
sg31
g60
sS'trials.thisTrialN'
p4417
I1
sS'trials_2.thisN'
p4418
I0
sa(dp4419
g20
g21
sS'trials.thisIndex'
p4420
g36
(g38
S'\x00\x00\x00\x00'
tRp4421
sg22
V
sS'trials_2.thisRepN'
p4422
I0
sS'trials_2.thisTrialN'
p4423
I0
sS'trials.thisRepN'
p4424
I199
sS'trials_2.thisTrial'
p4425
NsS'trials.thisN'
p4426
I398
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4427
g46
sg31
g48
sS'trials.thisTrialN'
p4428
I0
sS'trials_2.thisN'
p4429
I0
sa(dp4430
g20
g21
sS'trials.thisIndex'
p4431
g36
(g38
S'\x01\x00\x00\x00'
tRp4432
sg22
V
sS'trials_2.thisRepN'
p4433
I0
sS'trials_2.thisTrialN'
p4434
I0
sS'trials.thisRepN'
p4435
I199
sS'trials_2.thisTrial'
p4436
NsS'trials.thisN'
p4437
I399
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4438
g46
sg31
g60
sS'trials.thisTrialN'
p4439
I1
sS'trials_2.thisN'
p4440
I0
sa(dp4441
g20
g21
sS'trials.thisIndex'
p4442
g36
(g38
S'\x00\x00\x00\x00'
tRp4443
sg22
V
sS'trials_2.thisRepN'
p4444
I0
sS'trials_2.thisTrialN'
p4445
I0
sS'trials.thisRepN'
p4446
I200
sS'trials_2.thisTrial'
p4447
NsS'trials.thisN'
p4448
I400
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4449
g46
sg31
g48
sS'trials.thisTrialN'
p4450
I0
sS'trials_2.thisN'
p4451
I0
sa(dp4452
g20
g21
sS'trials.thisIndex'
p4453
g36
(g38
S'\x01\x00\x00\x00'
tRp4454
sg22
V
sS'trials_2.thisRepN'
p4455
I0
sS'trials_2.thisTrialN'
p4456
I0
sS'trials.thisRepN'
p4457
I200
sS'trials_2.thisTrial'
p4458
NsS'trials.thisN'
p4459
I401
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4460
g46
sg31
g60
sS'trials.thisTrialN'
p4461
I1
sS'trials_2.thisN'
p4462
I0
sa(dp4463
g20
g21
sS'trials.thisIndex'
p4464
g36
(g38
S'\x00\x00\x00\x00'
tRp4465
sg22
V
sS'trials_2.thisRepN'
p4466
I0
sS'trials_2.thisTrialN'
p4467
I0
sS'trials.thisRepN'
p4468
I201
sS'trials_2.thisTrial'
p4469
NsS'trials.thisN'
p4470
I402
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4471
g46
sg31
g48
sS'trials.thisTrialN'
p4472
I0
sS'trials_2.thisN'
p4473
I0
sa(dp4474
g20
g21
sS'trials.thisIndex'
p4475
g36
(g38
S'\x01\x00\x00\x00'
tRp4476
sg22
V
sS'trials_2.thisRepN'
p4477
I0
sS'trials_2.thisTrialN'
p4478
I0
sS'trials.thisRepN'
p4479
I201
sS'trials_2.thisTrial'
p4480
NsS'trials.thisN'
p4481
I403
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4482
g46
sg31
g60
sS'trials.thisTrialN'
p4483
I1
sS'trials_2.thisN'
p4484
I0
sa(dp4485
g20
g21
sS'trials.thisIndex'
p4486
g36
(g38
S'\x00\x00\x00\x00'
tRp4487
sg22
V
sS'trials_2.thisRepN'
p4488
I0
sS'trials_2.thisTrialN'
p4489
I0
sS'trials.thisRepN'
p4490
I202
sS'trials_2.thisTrial'
p4491
NsS'trials.thisN'
p4492
I404
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4493
g46
sg31
g48
sS'trials.thisTrialN'
p4494
I0
sS'trials_2.thisN'
p4495
I0
sa(dp4496
g20
g21
sS'trials.thisIndex'
p4497
g36
(g38
S'\x01\x00\x00\x00'
tRp4498
sg22
V
sS'trials_2.thisRepN'
p4499
I0
sS'trials_2.thisTrialN'
p4500
I0
sS'trials.thisRepN'
p4501
I202
sS'trials_2.thisTrial'
p4502
NsS'trials.thisN'
p4503
I405
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4504
g46
sg31
g60
sS'trials.thisTrialN'
p4505
I1
sS'trials_2.thisN'
p4506
I0
sa(dp4507
g20
g21
sS'trials.thisIndex'
p4508
g36
(g38
S'\x00\x00\x00\x00'
tRp4509
sg22
V
sS'trials_2.thisRepN'
p4510
I0
sS'trials_2.thisTrialN'
p4511
I0
sS'trials.thisRepN'
p4512
I203
sS'trials_2.thisTrial'
p4513
NsS'trials.thisN'
p4514
I406
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4515
g46
sg31
g48
sS'trials.thisTrialN'
p4516
I0
sS'trials_2.thisN'
p4517
I0
sa(dp4518
g20
g21
sS'trials.thisIndex'
p4519
g36
(g38
S'\x01\x00\x00\x00'
tRp4520
sg22
V
sS'trials_2.thisRepN'
p4521
I0
sS'trials_2.thisTrialN'
p4522
I0
sS'trials.thisRepN'
p4523
I203
sS'trials_2.thisTrial'
p4524
NsS'trials.thisN'
p4525
I407
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4526
g46
sg31
g60
sS'trials.thisTrialN'
p4527
I1
sS'trials_2.thisN'
p4528
I0
sa(dp4529
g20
g21
sS'trials.thisIndex'
p4530
g36
(g38
S'\x00\x00\x00\x00'
tRp4531
sg22
V
sS'trials_2.thisRepN'
p4532
I0
sS'trials_2.thisTrialN'
p4533
I0
sS'trials.thisRepN'
p4534
I204
sS'trials_2.thisTrial'
p4535
NsS'trials.thisN'
p4536
I408
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4537
g46
sg31
g48
sS'trials.thisTrialN'
p4538
I0
sS'trials_2.thisN'
p4539
I0
sa(dp4540
g20
g21
sS'trials.thisIndex'
p4541
g36
(g38
S'\x01\x00\x00\x00'
tRp4542
sg22
V
sS'trials_2.thisRepN'
p4543
I0
sS'trials_2.thisTrialN'
p4544
I0
sS'trials.thisRepN'
p4545
I204
sS'trials_2.thisTrial'
p4546
NsS'trials.thisN'
p4547
I409
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4548
g46
sg31
g60
sS'trials.thisTrialN'
p4549
I1
sS'trials_2.thisN'
p4550
I0
sa(dp4551
g20
g21
sS'trials.thisIndex'
p4552
g36
(g38
S'\x00\x00\x00\x00'
tRp4553
sg22
V
sS'trials_2.thisRepN'
p4554
I0
sS'trials_2.thisTrialN'
p4555
I0
sS'trials.thisRepN'
p4556
I205
sS'trials_2.thisTrial'
p4557
NsS'trials.thisN'
p4558
I410
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4559
g46
sg31
g48
sS'trials.thisTrialN'
p4560
I0
sS'trials_2.thisN'
p4561
I0
sa(dp4562
g20
g21
sS'trials.thisIndex'
p4563
g36
(g38
S'\x01\x00\x00\x00'
tRp4564
sg22
V
sS'trials_2.thisRepN'
p4565
I0
sS'trials_2.thisTrialN'
p4566
I0
sS'trials.thisRepN'
p4567
I205
sS'trials_2.thisTrial'
p4568
NsS'trials.thisN'
p4569
I411
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4570
g46
sg31
g60
sS'trials.thisTrialN'
p4571
I1
sS'trials_2.thisN'
p4572
I0
sa(dp4573
g20
g21
sS'trials.thisIndex'
p4574
g36
(g38
S'\x00\x00\x00\x00'
tRp4575
sg22
V
sS'trials_2.thisRepN'
p4576
I0
sS'trials_2.thisTrialN'
p4577
I0
sS'trials.thisRepN'
p4578
I206
sS'trials_2.thisTrial'
p4579
NsS'trials.thisN'
p4580
I412
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4581
g46
sg31
g48
sS'trials.thisTrialN'
p4582
I0
sS'trials_2.thisN'
p4583
I0
sa(dp4584
g20
g21
sS'trials.thisIndex'
p4585
g36
(g38
S'\x01\x00\x00\x00'
tRp4586
sg22
V
sS'trials_2.thisRepN'
p4587
I0
sS'trials_2.thisTrialN'
p4588
I0
sS'trials.thisRepN'
p4589
I206
sS'trials_2.thisTrial'
p4590
NsS'trials.thisN'
p4591
I413
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4592
g46
sg31
g60
sS'trials.thisTrialN'
p4593
I1
sS'trials_2.thisN'
p4594
I0
sa(dp4595
g20
g21
sS'trials.thisIndex'
p4596
g36
(g38
S'\x00\x00\x00\x00'
tRp4597
sg22
V
sS'trials_2.thisRepN'
p4598
I0
sS'trials_2.thisTrialN'
p4599
I0
sS'trials.thisRepN'
p4600
I207
sS'trials_2.thisTrial'
p4601
NsS'trials.thisN'
p4602
I414
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4603
g46
sg31
g48
sS'trials.thisTrialN'
p4604
I0
sS'trials_2.thisN'
p4605
I0
sa(dp4606
g20
g21
sS'trials.thisIndex'
p4607
g36
(g38
S'\x01\x00\x00\x00'
tRp4608
sg22
V
sS'trials_2.thisRepN'
p4609
I0
sS'trials_2.thisTrialN'
p4610
I0
sS'trials.thisRepN'
p4611
I207
sS'trials_2.thisTrial'
p4612
NsS'trials.thisN'
p4613
I415
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4614
g46
sg31
g60
sS'trials.thisTrialN'
p4615
I1
sS'trials_2.thisN'
p4616
I0
sa(dp4617
g20
g21
sS'trials.thisIndex'
p4618
g36
(g38
S'\x00\x00\x00\x00'
tRp4619
sg22
V
sS'trials_2.thisRepN'
p4620
I0
sS'trials_2.thisTrialN'
p4621
I0
sS'trials.thisRepN'
p4622
I208
sS'trials_2.thisTrial'
p4623
NsS'trials.thisN'
p4624
I416
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4625
g46
sg31
g48
sS'trials.thisTrialN'
p4626
I0
sS'trials_2.thisN'
p4627
I0
sa(dp4628
g20
g21
sS'trials.thisIndex'
p4629
g36
(g38
S'\x01\x00\x00\x00'
tRp4630
sg22
V
sS'trials_2.thisRepN'
p4631
I0
sS'trials_2.thisTrialN'
p4632
I0
sS'trials.thisRepN'
p4633
I208
sS'trials_2.thisTrial'
p4634
NsS'trials.thisN'
p4635
I417
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4636
g46
sg31
g60
sS'trials.thisTrialN'
p4637
I1
sS'trials_2.thisN'
p4638
I0
sa(dp4639
g20
g21
sS'trials.thisIndex'
p4640
g36
(g38
S'\x00\x00\x00\x00'
tRp4641
sg22
V
sS'trials_2.thisRepN'
p4642
I0
sS'trials_2.thisTrialN'
p4643
I0
sS'trials.thisRepN'
p4644
I209
sS'trials_2.thisTrial'
p4645
NsS'trials.thisN'
p4646
I418
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4647
g46
sg31
g48
sS'trials.thisTrialN'
p4648
I0
sS'trials_2.thisN'
p4649
I0
sa(dp4650
g20
g21
sS'trials.thisIndex'
p4651
g36
(g38
S'\x01\x00\x00\x00'
tRp4652
sg22
V
sS'trials_2.thisRepN'
p4653
I0
sS'trials_2.thisTrialN'
p4654
I0
sS'trials.thisRepN'
p4655
I209
sS'trials_2.thisTrial'
p4656
NsS'trials.thisN'
p4657
I419
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4658
g46
sg31
g60
sS'trials.thisTrialN'
p4659
I1
sS'trials_2.thisN'
p4660
I0
sa(dp4661
g20
g21
sS'trials.thisIndex'
p4662
g36
(g38
S'\x00\x00\x00\x00'
tRp4663
sg22
V
sS'trials_2.thisRepN'
p4664
I0
sS'trials_2.thisTrialN'
p4665
I0
sS'trials.thisRepN'
p4666
I210
sS'trials_2.thisTrial'
p4667
NsS'trials.thisN'
p4668
I420
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4669
g46
sg31
g48
sS'trials.thisTrialN'
p4670
I0
sS'trials_2.thisN'
p4671
I0
sa(dp4672
g20
g21
sS'trials.thisIndex'
p4673
g36
(g38
S'\x01\x00\x00\x00'
tRp4674
sg22
V
sS'trials_2.thisRepN'
p4675
I0
sS'trials_2.thisTrialN'
p4676
I0
sS'trials.thisRepN'
p4677
I210
sS'trials_2.thisTrial'
p4678
NsS'trials.thisN'
p4679
I421
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4680
g46
sg31
g60
sS'trials.thisTrialN'
p4681
I1
sS'trials_2.thisN'
p4682
I0
sa(dp4683
g20
g21
sS'trials.thisIndex'
p4684
g36
(g38
S'\x00\x00\x00\x00'
tRp4685
sg22
V
sS'trials_2.thisRepN'
p4686
I0
sS'trials_2.thisTrialN'
p4687
I0
sS'trials.thisRepN'
p4688
I211
sS'trials_2.thisTrial'
p4689
NsS'trials.thisN'
p4690
I422
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4691
g46
sg31
g48
sS'trials.thisTrialN'
p4692
I0
sS'trials_2.thisN'
p4693
I0
sa(dp4694
g20
g21
sS'trials.thisIndex'
p4695
g36
(g38
S'\x01\x00\x00\x00'
tRp4696
sg22
V
sS'trials_2.thisRepN'
p4697
I0
sS'trials_2.thisTrialN'
p4698
I0
sS'trials.thisRepN'
p4699
I211
sS'trials_2.thisTrial'
p4700
NsS'trials.thisN'
p4701
I423
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4702
g46
sg31
g60
sS'trials.thisTrialN'
p4703
I1
sS'trials_2.thisN'
p4704
I0
sa(dp4705
g20
g21
sS'trials.thisIndex'
p4706
g36
(g38
S'\x00\x00\x00\x00'
tRp4707
sg22
V
sS'trials_2.thisRepN'
p4708
I0
sS'trials_2.thisTrialN'
p4709
I0
sS'trials.thisRepN'
p4710
I212
sS'trials_2.thisTrial'
p4711
NsS'trials.thisN'
p4712
I424
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4713
g46
sg31
g48
sS'trials.thisTrialN'
p4714
I0
sS'trials_2.thisN'
p4715
I0
sa(dp4716
g20
g21
sS'trials.thisIndex'
p4717
g36
(g38
S'\x01\x00\x00\x00'
tRp4718
sg22
V
sS'trials_2.thisRepN'
p4719
I0
sS'trials_2.thisTrialN'
p4720
I0
sS'trials.thisRepN'
p4721
I212
sS'trials_2.thisTrial'
p4722
NsS'trials.thisN'
p4723
I425
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4724
g46
sg31
g60
sS'trials.thisTrialN'
p4725
I1
sS'trials_2.thisN'
p4726
I0
sa(dp4727
g20
g21
sS'trials.thisIndex'
p4728
g36
(g38
S'\x00\x00\x00\x00'
tRp4729
sg22
V
sS'trials_2.thisRepN'
p4730
I0
sS'trials_2.thisTrialN'
p4731
I0
sS'trials.thisRepN'
p4732
I213
sS'trials_2.thisTrial'
p4733
NsS'trials.thisN'
p4734
I426
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4735
g46
sg31
g48
sS'trials.thisTrialN'
p4736
I0
sS'trials_2.thisN'
p4737
I0
sa(dp4738
g20
g21
sS'trials.thisIndex'
p4739
g36
(g38
S'\x01\x00\x00\x00'
tRp4740
sg22
V
sS'trials_2.thisRepN'
p4741
I0
sS'trials_2.thisTrialN'
p4742
I0
sS'trials.thisRepN'
p4743
I213
sS'trials_2.thisTrial'
p4744
NsS'trials.thisN'
p4745
I427
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4746
g46
sg31
g60
sS'trials.thisTrialN'
p4747
I1
sS'trials_2.thisN'
p4748
I0
sa(dp4749
g20
g21
sS'trials.thisIndex'
p4750
g36
(g38
S'\x00\x00\x00\x00'
tRp4751
sg22
V
sS'trials_2.thisRepN'
p4752
I0
sS'trials_2.thisTrialN'
p4753
I0
sS'trials.thisRepN'
p4754
I214
sS'trials_2.thisTrial'
p4755
NsS'trials.thisN'
p4756
I428
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4757
g46
sg31
g48
sS'trials.thisTrialN'
p4758
I0
sS'trials_2.thisN'
p4759
I0
sa(dp4760
g20
g21
sS'trials.thisIndex'
p4761
g36
(g38
S'\x01\x00\x00\x00'
tRp4762
sg22
V
sS'trials_2.thisRepN'
p4763
I0
sS'trials_2.thisTrialN'
p4764
I0
sS'trials.thisRepN'
p4765
I214
sS'trials_2.thisTrial'
p4766
NsS'trials.thisN'
p4767
I429
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4768
g46
sg31
g60
sS'trials.thisTrialN'
p4769
I1
sS'trials_2.thisN'
p4770
I0
sa(dp4771
g20
g21
sS'trials.thisIndex'
p4772
g36
(g38
S'\x00\x00\x00\x00'
tRp4773
sg22
V
sS'trials_2.thisRepN'
p4774
I0
sS'trials_2.thisTrialN'
p4775
I0
sS'trials.thisRepN'
p4776
I215
sS'trials_2.thisTrial'
p4777
NsS'trials.thisN'
p4778
I430
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4779
g46
sg31
g48
sS'trials.thisTrialN'
p4780
I0
sS'trials_2.thisN'
p4781
I0
sa(dp4782
g20
g21
sS'trials.thisIndex'
p4783
g36
(g38
S'\x01\x00\x00\x00'
tRp4784
sg22
V
sS'trials_2.thisRepN'
p4785
I0
sS'trials_2.thisTrialN'
p4786
I0
sS'trials.thisRepN'
p4787
I215
sS'trials_2.thisTrial'
p4788
NsS'trials.thisN'
p4789
I431
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4790
g46
sg31
g60
sS'trials.thisTrialN'
p4791
I1
sS'trials_2.thisN'
p4792
I0
sa(dp4793
g20
g21
sS'trials.thisIndex'
p4794
g36
(g38
S'\x00\x00\x00\x00'
tRp4795
sg22
V
sS'trials_2.thisRepN'
p4796
I0
sS'trials_2.thisTrialN'
p4797
I0
sS'trials.thisRepN'
p4798
I216
sS'trials_2.thisTrial'
p4799
NsS'trials.thisN'
p4800
I432
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4801
g46
sg31
g48
sS'trials.thisTrialN'
p4802
I0
sS'trials_2.thisN'
p4803
I0
sa(dp4804
g20
g21
sS'trials.thisIndex'
p4805
g36
(g38
S'\x01\x00\x00\x00'
tRp4806
sg22
V
sS'trials_2.thisRepN'
p4807
I0
sS'trials_2.thisTrialN'
p4808
I0
sS'trials.thisRepN'
p4809
I216
sS'trials_2.thisTrial'
p4810
NsS'trials.thisN'
p4811
I433
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4812
g46
sg31
g60
sS'trials.thisTrialN'
p4813
I1
sS'trials_2.thisN'
p4814
I0
sa(dp4815
g20
g21
sS'trials.thisIndex'
p4816
g36
(g38
S'\x00\x00\x00\x00'
tRp4817
sg22
V
sS'trials_2.thisRepN'
p4818
I0
sS'trials_2.thisTrialN'
p4819
I0
sS'trials.thisRepN'
p4820
I217
sS'trials_2.thisTrial'
p4821
NsS'trials.thisN'
p4822
I434
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4823
g46
sg31
g48
sS'trials.thisTrialN'
p4824
I0
sS'trials_2.thisN'
p4825
I0
sa(dp4826
g20
g21
sS'trials.thisIndex'
p4827
g36
(g38
S'\x01\x00\x00\x00'
tRp4828
sg22
V
sS'trials_2.thisRepN'
p4829
I0
sS'trials_2.thisTrialN'
p4830
I0
sS'trials.thisRepN'
p4831
I217
sS'trials_2.thisTrial'
p4832
NsS'trials.thisN'
p4833
I435
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4834
g46
sg31
g60
sS'trials.thisTrialN'
p4835
I1
sS'trials_2.thisN'
p4836
I0
sa(dp4837
g20
g21
sS'trials.thisIndex'
p4838
g36
(g38
S'\x00\x00\x00\x00'
tRp4839
sg22
V
sS'trials_2.thisRepN'
p4840
I0
sS'trials_2.thisTrialN'
p4841
I0
sS'trials.thisRepN'
p4842
I218
sS'trials_2.thisTrial'
p4843
NsS'trials.thisN'
p4844
I436
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4845
g46
sg31
g48
sS'trials.thisTrialN'
p4846
I0
sS'trials_2.thisN'
p4847
I0
sa(dp4848
g20
g21
sS'trials.thisIndex'
p4849
g36
(g38
S'\x01\x00\x00\x00'
tRp4850
sg22
V
sS'trials_2.thisRepN'
p4851
I0
sS'trials_2.thisTrialN'
p4852
I0
sS'trials.thisRepN'
p4853
I218
sS'trials_2.thisTrial'
p4854
NsS'trials.thisN'
p4855
I437
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4856
g46
sg31
g60
sS'trials.thisTrialN'
p4857
I1
sS'trials_2.thisN'
p4858
I0
sa(dp4859
g20
g21
sS'trials.thisIndex'
p4860
g36
(g38
S'\x00\x00\x00\x00'
tRp4861
sg22
V
sS'trials_2.thisRepN'
p4862
I0
sS'trials_2.thisTrialN'
p4863
I0
sS'trials.thisRepN'
p4864
I219
sS'trials_2.thisTrial'
p4865
NsS'trials.thisN'
p4866
I438
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4867
g46
sg31
g48
sS'trials.thisTrialN'
p4868
I0
sS'trials_2.thisN'
p4869
I0
sa(dp4870
g20
g21
sS'trials.thisIndex'
p4871
g36
(g38
S'\x01\x00\x00\x00'
tRp4872
sg22
V
sS'trials_2.thisRepN'
p4873
I0
sS'trials_2.thisTrialN'
p4874
I0
sS'trials.thisRepN'
p4875
I219
sS'trials_2.thisTrial'
p4876
NsS'trials.thisN'
p4877
I439
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4878
g46
sg31
g60
sS'trials.thisTrialN'
p4879
I1
sS'trials_2.thisN'
p4880
I0
sa(dp4881
g20
g21
sS'trials.thisIndex'
p4882
g36
(g38
S'\x00\x00\x00\x00'
tRp4883
sg22
V
sS'trials_2.thisRepN'
p4884
I0
sS'trials_2.thisTrialN'
p4885
I0
sS'trials.thisRepN'
p4886
I220
sS'trials_2.thisTrial'
p4887
NsS'trials.thisN'
p4888
I440
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4889
g46
sg31
g48
sS'trials.thisTrialN'
p4890
I0
sS'trials_2.thisN'
p4891
I0
sa(dp4892
g20
g21
sS'trials.thisIndex'
p4893
g36
(g38
S'\x01\x00\x00\x00'
tRp4894
sg22
V
sS'trials_2.thisRepN'
p4895
I0
sS'trials_2.thisTrialN'
p4896
I0
sS'trials.thisRepN'
p4897
I220
sS'trials_2.thisTrial'
p4898
NsS'trials.thisN'
p4899
I441
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4900
g46
sg31
g60
sS'trials.thisTrialN'
p4901
I1
sS'trials_2.thisN'
p4902
I0
sa(dp4903
g20
g21
sS'trials.thisIndex'
p4904
g36
(g38
S'\x00\x00\x00\x00'
tRp4905
sg22
V
sS'trials_2.thisRepN'
p4906
I0
sS'trials_2.thisTrialN'
p4907
I0
sS'trials.thisRepN'
p4908
I221
sS'trials_2.thisTrial'
p4909
NsS'trials.thisN'
p4910
I442
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4911
g46
sg31
g48
sS'trials.thisTrialN'
p4912
I0
sS'trials_2.thisN'
p4913
I0
sa(dp4914
g20
g21
sS'trials.thisIndex'
p4915
g36
(g38
S'\x01\x00\x00\x00'
tRp4916
sg22
V
sS'trials_2.thisRepN'
p4917
I0
sS'trials_2.thisTrialN'
p4918
I0
sS'trials.thisRepN'
p4919
I221
sS'trials_2.thisTrial'
p4920
NsS'trials.thisN'
p4921
I443
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4922
g46
sg31
g60
sS'trials.thisTrialN'
p4923
I1
sS'trials_2.thisN'
p4924
I0
sa(dp4925
g20
g21
sS'trials.thisIndex'
p4926
g36
(g38
S'\x00\x00\x00\x00'
tRp4927
sg22
V
sS'trials_2.thisRepN'
p4928
I0
sS'trials_2.thisTrialN'
p4929
I0
sS'trials.thisRepN'
p4930
I222
sS'trials_2.thisTrial'
p4931
NsS'trials.thisN'
p4932
I444
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4933
g46
sg31
g48
sS'trials.thisTrialN'
p4934
I0
sS'trials_2.thisN'
p4935
I0
sa(dp4936
g20
g21
sS'trials.thisIndex'
p4937
g36
(g38
S'\x01\x00\x00\x00'
tRp4938
sg22
V
sS'trials_2.thisRepN'
p4939
I0
sS'trials_2.thisTrialN'
p4940
I0
sS'trials.thisRepN'
p4941
I222
sS'trials_2.thisTrial'
p4942
NsS'trials.thisN'
p4943
I445
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4944
g46
sg31
g60
sS'trials.thisTrialN'
p4945
I1
sS'trials_2.thisN'
p4946
I0
sa(dp4947
g20
g21
sS'trials.thisIndex'
p4948
g36
(g38
S'\x00\x00\x00\x00'
tRp4949
sg22
V
sS'trials_2.thisRepN'
p4950
I0
sS'trials_2.thisTrialN'
p4951
I0
sS'trials.thisRepN'
p4952
I223
sS'trials_2.thisTrial'
p4953
NsS'trials.thisN'
p4954
I446
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4955
g46
sg31
g48
sS'trials.thisTrialN'
p4956
I0
sS'trials_2.thisN'
p4957
I0
sa(dp4958
g20
g21
sS'trials.thisIndex'
p4959
g36
(g38
S'\x01\x00\x00\x00'
tRp4960
sg22
V
sS'trials_2.thisRepN'
p4961
I0
sS'trials_2.thisTrialN'
p4962
I0
sS'trials.thisRepN'
p4963
I223
sS'trials_2.thisTrial'
p4964
NsS'trials.thisN'
p4965
I447
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4966
g46
sg31
g60
sS'trials.thisTrialN'
p4967
I1
sS'trials_2.thisN'
p4968
I0
sa(dp4969
g20
g21
sS'trials.thisIndex'
p4970
g36
(g38
S'\x00\x00\x00\x00'
tRp4971
sg22
V
sS'trials_2.thisRepN'
p4972
I0
sS'trials_2.thisTrialN'
p4973
I0
sS'trials.thisRepN'
p4974
I224
sS'trials_2.thisTrial'
p4975
NsS'trials.thisN'
p4976
I448
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4977
g46
sg31
g48
sS'trials.thisTrialN'
p4978
I0
sS'trials_2.thisN'
p4979
I0
sa(dp4980
g20
g21
sS'trials.thisIndex'
p4981
g36
(g38
S'\x01\x00\x00\x00'
tRp4982
sg22
V
sS'trials_2.thisRepN'
p4983
I0
sS'trials_2.thisTrialN'
p4984
I0
sS'trials.thisRepN'
p4985
I224
sS'trials_2.thisTrial'
p4986
NsS'trials.thisN'
p4987
I449
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4988
g46
sg31
g60
sS'trials.thisTrialN'
p4989
I1
sS'trials_2.thisN'
p4990
I0
sa(dp4991
g20
g21
sS'trials.thisIndex'
p4992
g36
(g38
S'\x00\x00\x00\x00'
tRp4993
sg22
V
sS'trials_2.thisRepN'
p4994
I0
sS'trials_2.thisTrialN'
p4995
I0
sS'trials.thisRepN'
p4996
I225
sS'trials_2.thisTrial'
p4997
NsS'trials.thisN'
p4998
I450
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p4999
g46
sg31
g48
sS'trials.thisTrialN'
p5000
I0
sS'trials_2.thisN'
p5001
I0
sa(dp5002
g20
g21
sS'trials.thisIndex'
p5003
g36
(g38
S'\x01\x00\x00\x00'
tRp5004
sg22
V
sS'trials_2.thisRepN'
p5005
I0
sS'trials_2.thisTrialN'
p5006
I0
sS'trials.thisRepN'
p5007
I225
sS'trials_2.thisTrial'
p5008
NsS'trials.thisN'
p5009
I451
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5010
g46
sg31
g60
sS'trials.thisTrialN'
p5011
I1
sS'trials_2.thisN'
p5012
I0
sa(dp5013
g20
g21
sS'trials.thisIndex'
p5014
g36
(g38
S'\x00\x00\x00\x00'
tRp5015
sg22
V
sS'trials_2.thisRepN'
p5016
I0
sS'trials_2.thisTrialN'
p5017
I0
sS'trials.thisRepN'
p5018
I226
sS'trials_2.thisTrial'
p5019
NsS'trials.thisN'
p5020
I452
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5021
g46
sg31
g48
sS'trials.thisTrialN'
p5022
I0
sS'trials_2.thisN'
p5023
I0
sa(dp5024
g20
g21
sS'trials.thisIndex'
p5025
g36
(g38
S'\x01\x00\x00\x00'
tRp5026
sg22
V
sS'trials_2.thisRepN'
p5027
I0
sS'trials_2.thisTrialN'
p5028
I0
sS'trials.thisRepN'
p5029
I226
sS'trials_2.thisTrial'
p5030
NsS'trials.thisN'
p5031
I453
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5032
g46
sg31
g60
sS'trials.thisTrialN'
p5033
I1
sS'trials_2.thisN'
p5034
I0
sa(dp5035
g20
g21
sS'trials.thisIndex'
p5036
g36
(g38
S'\x00\x00\x00\x00'
tRp5037
sg22
V
sS'trials_2.thisRepN'
p5038
I0
sS'trials_2.thisTrialN'
p5039
I0
sS'trials.thisRepN'
p5040
I227
sS'trials_2.thisTrial'
p5041
NsS'trials.thisN'
p5042
I454
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5043
g46
sg31
g48
sS'trials.thisTrialN'
p5044
I0
sS'trials_2.thisN'
p5045
I0
sa(dp5046
g20
g21
sS'trials.thisIndex'
p5047
g36
(g38
S'\x01\x00\x00\x00'
tRp5048
sg22
V
sS'trials_2.thisRepN'
p5049
I0
sS'trials_2.thisTrialN'
p5050
I0
sS'trials.thisRepN'
p5051
I227
sS'trials_2.thisTrial'
p5052
NsS'trials.thisN'
p5053
I455
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5054
g46
sg31
g60
sS'trials.thisTrialN'
p5055
I1
sS'trials_2.thisN'
p5056
I0
sa(dp5057
g20
g21
sS'trials.thisIndex'
p5058
g36
(g38
S'\x00\x00\x00\x00'
tRp5059
sg22
V
sS'trials_2.thisRepN'
p5060
I0
sS'trials_2.thisTrialN'
p5061
I0
sS'trials.thisRepN'
p5062
I228
sS'trials_2.thisTrial'
p5063
NsS'trials.thisN'
p5064
I456
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5065
g46
sg31
g48
sS'trials.thisTrialN'
p5066
I0
sS'trials_2.thisN'
p5067
I0
sa(dp5068
g20
g21
sS'trials.thisIndex'
p5069
g36
(g38
S'\x01\x00\x00\x00'
tRp5070
sg22
V
sS'trials_2.thisRepN'
p5071
I0
sS'trials_2.thisTrialN'
p5072
I0
sS'trials.thisRepN'
p5073
I228
sS'trials_2.thisTrial'
p5074
NsS'trials.thisN'
p5075
I457
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5076
g46
sg31
g60
sS'trials.thisTrialN'
p5077
I1
sS'trials_2.thisN'
p5078
I0
sa(dp5079
g20
g21
sS'trials.thisIndex'
p5080
g36
(g38
S'\x00\x00\x00\x00'
tRp5081
sg22
V
sS'trials_2.thisRepN'
p5082
I0
sS'trials_2.thisTrialN'
p5083
I0
sS'trials.thisRepN'
p5084
I229
sS'trials_2.thisTrial'
p5085
NsS'trials.thisN'
p5086
I458
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5087
g46
sg31
g48
sS'trials.thisTrialN'
p5088
I0
sS'trials_2.thisN'
p5089
I0
sa(dp5090
g20
g21
sS'trials.thisIndex'
p5091
g36
(g38
S'\x01\x00\x00\x00'
tRp5092
sg22
V
sS'trials_2.thisRepN'
p5093
I0
sS'trials_2.thisTrialN'
p5094
I0
sS'trials.thisRepN'
p5095
I229
sS'trials_2.thisTrial'
p5096
NsS'trials.thisN'
p5097
I459
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5098
g46
sg31
g60
sS'trials.thisTrialN'
p5099
I1
sS'trials_2.thisN'
p5100
I0
sa(dp5101
g20
g21
sS'trials.thisIndex'
p5102
g36
(g38
S'\x00\x00\x00\x00'
tRp5103
sg22
V
sS'trials_2.thisRepN'
p5104
I0
sS'trials_2.thisTrialN'
p5105
I0
sS'trials.thisRepN'
p5106
I230
sS'trials_2.thisTrial'
p5107
NsS'trials.thisN'
p5108
I460
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5109
g46
sg31
g48
sS'trials.thisTrialN'
p5110
I0
sS'trials_2.thisN'
p5111
I0
sa(dp5112
g20
g21
sS'trials.thisIndex'
p5113
g36
(g38
S'\x01\x00\x00\x00'
tRp5114
sg22
V
sS'trials_2.thisRepN'
p5115
I0
sS'trials_2.thisTrialN'
p5116
I0
sS'trials.thisRepN'
p5117
I230
sS'trials_2.thisTrial'
p5118
NsS'trials.thisN'
p5119
I461
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5120
g46
sg31
g60
sS'trials.thisTrialN'
p5121
I1
sS'trials_2.thisN'
p5122
I0
sa(dp5123
g20
g21
sS'trials.thisIndex'
p5124
g36
(g38
S'\x00\x00\x00\x00'
tRp5125
sg22
V
sS'trials_2.thisRepN'
p5126
I0
sS'trials_2.thisTrialN'
p5127
I0
sS'trials.thisRepN'
p5128
I231
sS'trials_2.thisTrial'
p5129
NsS'trials.thisN'
p5130
I462
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5131
g46
sg31
g48
sS'trials.thisTrialN'
p5132
I0
sS'trials_2.thisN'
p5133
I0
sa(dp5134
g20
g21
sS'trials.thisIndex'
p5135
g36
(g38
S'\x01\x00\x00\x00'
tRp5136
sg22
V
sS'trials_2.thisRepN'
p5137
I0
sS'trials_2.thisTrialN'
p5138
I0
sS'trials.thisRepN'
p5139
I231
sS'trials_2.thisTrial'
p5140
NsS'trials.thisN'
p5141
I463
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5142
g46
sg31
g60
sS'trials.thisTrialN'
p5143
I1
sS'trials_2.thisN'
p5144
I0
sa(dp5145
g20
g21
sS'trials.thisIndex'
p5146
g36
(g38
S'\x00\x00\x00\x00'
tRp5147
sg22
V
sS'trials_2.thisRepN'
p5148
I0
sS'trials_2.thisTrialN'
p5149
I0
sS'trials.thisRepN'
p5150
I232
sS'trials_2.thisTrial'
p5151
NsS'trials.thisN'
p5152
I464
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5153
g46
sg31
g48
sS'trials.thisTrialN'
p5154
I0
sS'trials_2.thisN'
p5155
I0
sa(dp5156
g20
g21
sS'trials.thisIndex'
p5157
g36
(g38
S'\x01\x00\x00\x00'
tRp5158
sg22
V
sS'trials_2.thisRepN'
p5159
I0
sS'trials_2.thisTrialN'
p5160
I0
sS'trials.thisRepN'
p5161
I232
sS'trials_2.thisTrial'
p5162
NsS'trials.thisN'
p5163
I465
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5164
g46
sg31
g60
sS'trials.thisTrialN'
p5165
I1
sS'trials_2.thisN'
p5166
I0
sa(dp5167
g20
g21
sS'trials.thisIndex'
p5168
g36
(g38
S'\x00\x00\x00\x00'
tRp5169
sg22
V
sS'trials_2.thisRepN'
p5170
I0
sS'trials_2.thisTrialN'
p5171
I0
sS'trials.thisRepN'
p5172
I233
sS'trials_2.thisTrial'
p5173
NsS'trials.thisN'
p5174
I466
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5175
g46
sg31
g48
sS'trials.thisTrialN'
p5176
I0
sS'trials_2.thisN'
p5177
I0
sa(dp5178
g20
g21
sS'trials.thisIndex'
p5179
g36
(g38
S'\x01\x00\x00\x00'
tRp5180
sg22
V
sS'trials_2.thisRepN'
p5181
I0
sS'trials_2.thisTrialN'
p5182
I0
sS'trials.thisRepN'
p5183
I233
sS'trials_2.thisTrial'
p5184
NsS'trials.thisN'
p5185
I467
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5186
g46
sg31
g60
sS'trials.thisTrialN'
p5187
I1
sS'trials_2.thisN'
p5188
I0
sa(dp5189
g20
g21
sS'trials.thisIndex'
p5190
g36
(g38
S'\x00\x00\x00\x00'
tRp5191
sg22
V
sS'trials_2.thisRepN'
p5192
I0
sS'trials_2.thisTrialN'
p5193
I0
sS'trials.thisRepN'
p5194
I234
sS'trials_2.thisTrial'
p5195
NsS'trials.thisN'
p5196
I468
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5197
g46
sg31
g48
sS'trials.thisTrialN'
p5198
I0
sS'trials_2.thisN'
p5199
I0
sa(dp5200
g20
g21
sS'trials.thisIndex'
p5201
g36
(g38
S'\x01\x00\x00\x00'
tRp5202
sg22
V
sS'trials_2.thisRepN'
p5203
I0
sS'trials_2.thisTrialN'
p5204
I0
sS'trials.thisRepN'
p5205
I234
sS'trials_2.thisTrial'
p5206
NsS'trials.thisN'
p5207
I469
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5208
g46
sg31
g60
sS'trials.thisTrialN'
p5209
I1
sS'trials_2.thisN'
p5210
I0
sa(dp5211
g20
g21
sS'trials.thisIndex'
p5212
g36
(g38
S'\x00\x00\x00\x00'
tRp5213
sg22
V
sS'trials_2.thisRepN'
p5214
I0
sS'trials_2.thisTrialN'
p5215
I0
sS'trials.thisRepN'
p5216
I235
sS'trials_2.thisTrial'
p5217
NsS'trials.thisN'
p5218
I470
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5219
g46
sg31
g48
sS'trials.thisTrialN'
p5220
I0
sS'trials_2.thisN'
p5221
I0
sa(dp5222
g20
g21
sS'trials.thisIndex'
p5223
g36
(g38
S'\x01\x00\x00\x00'
tRp5224
sg22
V
sS'trials_2.thisRepN'
p5225
I0
sS'trials_2.thisTrialN'
p5226
I0
sS'trials.thisRepN'
p5227
I235
sS'trials_2.thisTrial'
p5228
NsS'trials.thisN'
p5229
I471
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5230
g46
sg31
g60
sS'trials.thisTrialN'
p5231
I1
sS'trials_2.thisN'
p5232
I0
sa(dp5233
g20
g21
sS'trials.thisIndex'
p5234
g36
(g38
S'\x00\x00\x00\x00'
tRp5235
sg22
V
sS'trials_2.thisRepN'
p5236
I0
sS'trials_2.thisTrialN'
p5237
I0
sS'trials.thisRepN'
p5238
I236
sS'trials_2.thisTrial'
p5239
NsS'trials.thisN'
p5240
I472
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5241
g46
sg31
g48
sS'trials.thisTrialN'
p5242
I0
sS'trials_2.thisN'
p5243
I0
sa(dp5244
g20
g21
sS'trials.thisIndex'
p5245
g36
(g38
S'\x01\x00\x00\x00'
tRp5246
sg22
V
sS'trials_2.thisRepN'
p5247
I0
sS'trials_2.thisTrialN'
p5248
I0
sS'trials.thisRepN'
p5249
I236
sS'trials_2.thisTrial'
p5250
NsS'trials.thisN'
p5251
I473
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5252
g46
sg31
g60
sS'trials.thisTrialN'
p5253
I1
sS'trials_2.thisN'
p5254
I0
sa(dp5255
g20
g21
sS'trials.thisIndex'
p5256
g36
(g38
S'\x00\x00\x00\x00'
tRp5257
sg22
V
sS'trials_2.thisRepN'
p5258
I0
sS'trials_2.thisTrialN'
p5259
I0
sS'trials.thisRepN'
p5260
I237
sS'trials_2.thisTrial'
p5261
NsS'trials.thisN'
p5262
I474
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5263
g46
sg31
g48
sS'trials.thisTrialN'
p5264
I0
sS'trials_2.thisN'
p5265
I0
sa(dp5266
g20
g21
sS'trials.thisIndex'
p5267
g36
(g38
S'\x01\x00\x00\x00'
tRp5268
sg22
V
sS'trials_2.thisRepN'
p5269
I0
sS'trials_2.thisTrialN'
p5270
I0
sS'trials.thisRepN'
p5271
I237
sS'trials_2.thisTrial'
p5272
NsS'trials.thisN'
p5273
I475
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5274
g46
sg31
g60
sS'trials.thisTrialN'
p5275
I1
sS'trials_2.thisN'
p5276
I0
sa(dp5277
g20
g21
sS'trials.thisIndex'
p5278
g36
(g38
S'\x00\x00\x00\x00'
tRp5279
sg22
V
sS'trials_2.thisRepN'
p5280
I0
sS'trials_2.thisTrialN'
p5281
I0
sS'trials.thisRepN'
p5282
I238
sS'trials_2.thisTrial'
p5283
NsS'trials.thisN'
p5284
I476
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5285
g46
sg31
g48
sS'trials.thisTrialN'
p5286
I0
sS'trials_2.thisN'
p5287
I0
sa(dp5288
g20
g21
sS'trials.thisIndex'
p5289
g36
(g38
S'\x01\x00\x00\x00'
tRp5290
sg22
V
sS'trials_2.thisRepN'
p5291
I0
sS'trials_2.thisTrialN'
p5292
I0
sS'trials.thisRepN'
p5293
I238
sS'trials_2.thisTrial'
p5294
NsS'trials.thisN'
p5295
I477
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5296
g46
sg31
g60
sS'trials.thisTrialN'
p5297
I1
sS'trials_2.thisN'
p5298
I0
sa(dp5299
g20
g21
sS'trials.thisIndex'
p5300
g36
(g38
S'\x00\x00\x00\x00'
tRp5301
sg22
V
sS'trials_2.thisRepN'
p5302
I0
sS'trials_2.thisTrialN'
p5303
I0
sS'trials.thisRepN'
p5304
I239
sS'trials_2.thisTrial'
p5305
NsS'trials.thisN'
p5306
I478
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5307
g46
sg31
g48
sS'trials.thisTrialN'
p5308
I0
sS'trials_2.thisN'
p5309
I0
sa(dp5310
g20
g21
sS'trials.thisIndex'
p5311
g36
(g38
S'\x01\x00\x00\x00'
tRp5312
sg22
V
sS'trials_2.thisRepN'
p5313
I0
sS'trials_2.thisTrialN'
p5314
I0
sS'trials.thisRepN'
p5315
I239
sS'trials_2.thisTrial'
p5316
NsS'trials.thisN'
p5317
I479
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5318
g46
sg31
g60
sS'trials.thisTrialN'
p5319
I1
sS'trials_2.thisN'
p5320
I0
sa(dp5321
g20
g21
sS'trials.thisIndex'
p5322
g36
(g38
S'\x00\x00\x00\x00'
tRp5323
sg22
V
sS'trials_2.thisRepN'
p5324
I0
sS'trials_2.thisTrialN'
p5325
I0
sS'trials.thisRepN'
p5326
I240
sS'trials_2.thisTrial'
p5327
NsS'trials.thisN'
p5328
I480
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5329
g46
sg31
g48
sS'trials.thisTrialN'
p5330
I0
sS'trials_2.thisN'
p5331
I0
sa(dp5332
g20
g21
sS'trials.thisIndex'
p5333
g36
(g38
S'\x01\x00\x00\x00'
tRp5334
sg22
V
sS'trials_2.thisRepN'
p5335
I0
sS'trials_2.thisTrialN'
p5336
I0
sS'trials.thisRepN'
p5337
I240
sS'trials_2.thisTrial'
p5338
NsS'trials.thisN'
p5339
I481
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5340
g46
sg31
g60
sS'trials.thisTrialN'
p5341
I1
sS'trials_2.thisN'
p5342
I0
sa(dp5343
g20
g21
sS'trials.thisIndex'
p5344
g36
(g38
S'\x00\x00\x00\x00'
tRp5345
sg22
V
sS'trials_2.thisRepN'
p5346
I0
sS'trials_2.thisTrialN'
p5347
I0
sS'trials.thisRepN'
p5348
I241
sS'trials_2.thisTrial'
p5349
NsS'trials.thisN'
p5350
I482
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5351
g46
sg31
g48
sS'trials.thisTrialN'
p5352
I0
sS'trials_2.thisN'
p5353
I0
sa(dp5354
g20
g21
sS'trials.thisIndex'
p5355
g36
(g38
S'\x01\x00\x00\x00'
tRp5356
sg22
V
sS'trials_2.thisRepN'
p5357
I0
sS'trials_2.thisTrialN'
p5358
I0
sS'trials.thisRepN'
p5359
I241
sS'trials_2.thisTrial'
p5360
NsS'trials.thisN'
p5361
I483
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5362
g46
sg31
g60
sS'trials.thisTrialN'
p5363
I1
sS'trials_2.thisN'
p5364
I0
sa(dp5365
g20
g21
sS'trials.thisIndex'
p5366
g36
(g38
S'\x00\x00\x00\x00'
tRp5367
sg22
V
sS'trials_2.thisRepN'
p5368
I0
sS'trials_2.thisTrialN'
p5369
I0
sS'trials.thisRepN'
p5370
I242
sS'trials_2.thisTrial'
p5371
NsS'trials.thisN'
p5372
I484
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5373
g46
sg31
g48
sS'trials.thisTrialN'
p5374
I0
sS'trials_2.thisN'
p5375
I0
sa(dp5376
g20
g21
sS'trials.thisIndex'
p5377
g36
(g38
S'\x01\x00\x00\x00'
tRp5378
sg22
V
sS'trials_2.thisRepN'
p5379
I0
sS'trials_2.thisTrialN'
p5380
I0
sS'trials.thisRepN'
p5381
I242
sS'trials_2.thisTrial'
p5382
NsS'trials.thisN'
p5383
I485
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5384
g46
sg31
g60
sS'trials.thisTrialN'
p5385
I1
sS'trials_2.thisN'
p5386
I0
sa(dp5387
g20
g21
sS'trials.thisIndex'
p5388
g36
(g38
S'\x00\x00\x00\x00'
tRp5389
sg22
V
sS'trials_2.thisRepN'
p5390
I0
sS'trials_2.thisTrialN'
p5391
I0
sS'trials.thisRepN'
p5392
I243
sS'trials_2.thisTrial'
p5393
NsS'trials.thisN'
p5394
I486
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5395
g46
sg31
g48
sS'trials.thisTrialN'
p5396
I0
sS'trials_2.thisN'
p5397
I0
sa(dp5398
g20
g21
sS'trials.thisIndex'
p5399
g36
(g38
S'\x01\x00\x00\x00'
tRp5400
sg22
V
sS'trials_2.thisRepN'
p5401
I0
sS'trials_2.thisTrialN'
p5402
I0
sS'trials.thisRepN'
p5403
I243
sS'trials_2.thisTrial'
p5404
NsS'trials.thisN'
p5405
I487
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5406
g46
sg31
g60
sS'trials.thisTrialN'
p5407
I1
sS'trials_2.thisN'
p5408
I0
sa(dp5409
g20
g21
sS'trials.thisIndex'
p5410
g36
(g38
S'\x00\x00\x00\x00'
tRp5411
sg22
V
sS'trials_2.thisRepN'
p5412
I0
sS'trials_2.thisTrialN'
p5413
I0
sS'trials.thisRepN'
p5414
I244
sS'trials_2.thisTrial'
p5415
NsS'trials.thisN'
p5416
I488
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5417
g46
sg31
g48
sS'trials.thisTrialN'
p5418
I0
sS'trials_2.thisN'
p5419
I0
sa(dp5420
g20
g21
sS'trials.thisIndex'
p5421
g36
(g38
S'\x01\x00\x00\x00'
tRp5422
sg22
V
sS'trials_2.thisRepN'
p5423
I0
sS'trials_2.thisTrialN'
p5424
I0
sS'trials.thisRepN'
p5425
I244
sS'trials_2.thisTrial'
p5426
NsS'trials.thisN'
p5427
I489
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5428
g46
sg31
g60
sS'trials.thisTrialN'
p5429
I1
sS'trials_2.thisN'
p5430
I0
sa(dp5431
g20
g21
sS'trials.thisIndex'
p5432
g36
(g38
S'\x00\x00\x00\x00'
tRp5433
sg22
V
sS'trials_2.thisRepN'
p5434
I0
sS'trials_2.thisTrialN'
p5435
I0
sS'trials.thisRepN'
p5436
I245
sS'trials_2.thisTrial'
p5437
NsS'trials.thisN'
p5438
I490
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5439
g46
sg31
g48
sS'trials.thisTrialN'
p5440
I0
sS'trials_2.thisN'
p5441
I0
sa(dp5442
g20
g21
sS'trials.thisIndex'
p5443
g36
(g38
S'\x01\x00\x00\x00'
tRp5444
sg22
V
sS'trials_2.thisRepN'
p5445
I0
sS'trials_2.thisTrialN'
p5446
I0
sS'trials.thisRepN'
p5447
I245
sS'trials_2.thisTrial'
p5448
NsS'trials.thisN'
p5449
I491
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5450
g46
sg31
g60
sS'trials.thisTrialN'
p5451
I1
sS'trials_2.thisN'
p5452
I0
sa(dp5453
g20
g21
sS'trials.thisIndex'
p5454
g36
(g38
S'\x00\x00\x00\x00'
tRp5455
sg22
V
sS'trials_2.thisRepN'
p5456
I0
sS'trials_2.thisTrialN'
p5457
I0
sS'trials.thisRepN'
p5458
I246
sS'trials_2.thisTrial'
p5459
NsS'trials.thisN'
p5460
I492
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5461
g46
sg31
g48
sS'trials.thisTrialN'
p5462
I0
sS'trials_2.thisN'
p5463
I0
sa(dp5464
g20
g21
sS'trials.thisIndex'
p5465
g36
(g38
S'\x01\x00\x00\x00'
tRp5466
sg22
V
sS'trials_2.thisRepN'
p5467
I0
sS'trials_2.thisTrialN'
p5468
I0
sS'trials.thisRepN'
p5469
I246
sS'trials_2.thisTrial'
p5470
NsS'trials.thisN'
p5471
I493
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5472
g46
sg31
g60
sS'trials.thisTrialN'
p5473
I1
sS'trials_2.thisN'
p5474
I0
sa(dp5475
g20
g21
sS'trials.thisIndex'
p5476
g36
(g38
S'\x00\x00\x00\x00'
tRp5477
sg22
V
sS'trials_2.thisRepN'
p5478
I0
sS'trials_2.thisTrialN'
p5479
I0
sS'trials.thisRepN'
p5480
I247
sS'trials_2.thisTrial'
p5481
NsS'trials.thisN'
p5482
I494
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5483
g46
sg31
g48
sS'trials.thisTrialN'
p5484
I0
sS'trials_2.thisN'
p5485
I0
sa(dp5486
g20
g21
sS'trials.thisIndex'
p5487
g36
(g38
S'\x01\x00\x00\x00'
tRp5488
sg22
V
sS'trials_2.thisRepN'
p5489
I0
sS'trials_2.thisTrialN'
p5490
I0
sS'trials.thisRepN'
p5491
I247
sS'trials_2.thisTrial'
p5492
NsS'trials.thisN'
p5493
I495
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5494
g46
sg31
g60
sS'trials.thisTrialN'
p5495
I1
sS'trials_2.thisN'
p5496
I0
sa(dp5497
g20
g21
sS'trials.thisIndex'
p5498
g36
(g38
S'\x00\x00\x00\x00'
tRp5499
sg22
V
sS'trials_2.thisRepN'
p5500
I0
sS'trials_2.thisTrialN'
p5501
I0
sS'trials.thisRepN'
p5502
I248
sS'trials_2.thisTrial'
p5503
NsS'trials.thisN'
p5504
I496
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5505
g46
sg31
g48
sS'trials.thisTrialN'
p5506
I0
sS'trials_2.thisN'
p5507
I0
sa(dp5508
g20
g21
sS'trials.thisIndex'
p5509
g36
(g38
S'\x01\x00\x00\x00'
tRp5510
sg22
V
sS'trials_2.thisRepN'
p5511
I0
sS'trials_2.thisTrialN'
p5512
I0
sS'trials.thisRepN'
p5513
I248
sS'trials_2.thisTrial'
p5514
NsS'trials.thisN'
p5515
I497
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5516
g46
sg31
g60
sS'trials.thisTrialN'
p5517
I1
sS'trials_2.thisN'
p5518
I0
sa(dp5519
g20
g21
sS'trials.thisIndex'
p5520
g36
(g38
S'\x00\x00\x00\x00'
tRp5521
sg22
V
sS'trials_2.thisRepN'
p5522
I0
sS'trials_2.thisTrialN'
p5523
I0
sS'trials.thisRepN'
p5524
I249
sS'trials_2.thisTrial'
p5525
NsS'trials.thisN'
p5526
I498
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5527
g46
sg31
g48
sS'trials.thisTrialN'
p5528
I0
sS'trials_2.thisN'
p5529
I0
sa(dp5530
g20
g21
sS'trials.thisIndex'
p5531
g36
(g38
S'\x01\x00\x00\x00'
tRp5532
sg22
V
sS'trials_2.thisRepN'
p5533
I0
sS'trials_2.thisTrialN'
p5534
I0
sS'trials.thisRepN'
p5535
I249
sS'trials_2.thisTrial'
p5536
NsS'trials.thisN'
p5537
I499
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5538
g46
sg31
g60
sS'trials.thisTrialN'
p5539
I1
sS'trials_2.thisN'
p5540
I0
sa(dp5541
g20
g21
sS'trials.thisIndex'
p5542
g36
(g38
S'\x00\x00\x00\x00'
tRp5543
sg22
V
sS'trials_2.thisRepN'
p5544
I0
sS'trials_2.thisTrialN'
p5545
I0
sS'trials.thisRepN'
p5546
I250
sS'trials_2.thisTrial'
p5547
NsS'trials.thisN'
p5548
I500
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5549
g46
sg31
g48
sS'trials.thisTrialN'
p5550
I0
sS'trials_2.thisN'
p5551
I0
sa(dp5552
g20
g21
sS'trials.thisIndex'
p5553
g36
(g38
S'\x01\x00\x00\x00'
tRp5554
sg22
V
sS'trials_2.thisRepN'
p5555
I0
sS'trials_2.thisTrialN'
p5556
I0
sS'trials.thisRepN'
p5557
I250
sS'trials_2.thisTrial'
p5558
NsS'trials.thisN'
p5559
I501
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5560
g46
sg31
g60
sS'trials.thisTrialN'
p5561
I1
sS'trials_2.thisN'
p5562
I0
sa(dp5563
g20
g21
sS'trials.thisIndex'
p5564
g36
(g38
S'\x00\x00\x00\x00'
tRp5565
sg22
V
sS'trials_2.thisRepN'
p5566
I0
sS'trials_2.thisTrialN'
p5567
I0
sS'trials.thisRepN'
p5568
I251
sS'trials_2.thisTrial'
p5569
NsS'trials.thisN'
p5570
I502
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5571
g46
sg31
g48
sS'trials.thisTrialN'
p5572
I0
sS'trials_2.thisN'
p5573
I0
sa(dp5574
g20
g21
sS'trials.thisIndex'
p5575
g36
(g38
S'\x01\x00\x00\x00'
tRp5576
sg22
V
sS'trials_2.thisRepN'
p5577
I0
sS'trials_2.thisTrialN'
p5578
I0
sS'trials.thisRepN'
p5579
I251
sS'trials_2.thisTrial'
p5580
NsS'trials.thisN'
p5581
I503
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5582
g46
sg31
g60
sS'trials.thisTrialN'
p5583
I1
sS'trials_2.thisN'
p5584
I0
sa(dp5585
g20
g21
sS'trials.thisIndex'
p5586
g36
(g38
S'\x00\x00\x00\x00'
tRp5587
sg22
V
sS'trials_2.thisRepN'
p5588
I0
sS'trials_2.thisTrialN'
p5589
I0
sS'trials.thisRepN'
p5590
I252
sS'trials_2.thisTrial'
p5591
NsS'trials.thisN'
p5592
I504
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5593
g46
sg31
g48
sS'trials.thisTrialN'
p5594
I0
sS'trials_2.thisN'
p5595
I0
sa(dp5596
g20
g21
sS'trials.thisIndex'
p5597
g36
(g38
S'\x01\x00\x00\x00'
tRp5598
sg22
V
sS'trials_2.thisRepN'
p5599
I0
sS'trials_2.thisTrialN'
p5600
I0
sS'trials.thisRepN'
p5601
I252
sS'trials_2.thisTrial'
p5602
NsS'trials.thisN'
p5603
I505
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5604
g46
sg31
g60
sS'trials.thisTrialN'
p5605
I1
sS'trials_2.thisN'
p5606
I0
sa(dp5607
g20
g21
sS'trials.thisIndex'
p5608
g36
(g38
S'\x00\x00\x00\x00'
tRp5609
sg22
V
sS'trials_2.thisRepN'
p5610
I0
sS'trials_2.thisTrialN'
p5611
I0
sS'trials.thisRepN'
p5612
I253
sS'trials_2.thisTrial'
p5613
NsS'trials.thisN'
p5614
I506
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5615
g46
sg31
g48
sS'trials.thisTrialN'
p5616
I0
sS'trials_2.thisN'
p5617
I0
sa(dp5618
g20
g21
sS'trials.thisIndex'
p5619
g36
(g38
S'\x01\x00\x00\x00'
tRp5620
sg22
V
sS'trials_2.thisRepN'
p5621
I0
sS'trials_2.thisTrialN'
p5622
I0
sS'trials.thisRepN'
p5623
I253
sS'trials_2.thisTrial'
p5624
NsS'trials.thisN'
p5625
I507
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5626
g46
sg31
g60
sS'trials.thisTrialN'
p5627
I1
sS'trials_2.thisN'
p5628
I0
sa(dp5629
g20
g21
sS'trials.thisIndex'
p5630
g36
(g38
S'\x00\x00\x00\x00'
tRp5631
sg22
V
sS'trials_2.thisRepN'
p5632
I0
sS'trials_2.thisTrialN'
p5633
I0
sS'trials.thisRepN'
p5634
I254
sS'trials_2.thisTrial'
p5635
NsS'trials.thisN'
p5636
I508
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5637
g46
sg31
g48
sS'trials.thisTrialN'
p5638
I0
sS'trials_2.thisN'
p5639
I0
sa(dp5640
g20
g21
sS'trials.thisIndex'
p5641
g36
(g38
S'\x01\x00\x00\x00'
tRp5642
sg22
V
sS'trials_2.thisRepN'
p5643
I0
sS'trials_2.thisTrialN'
p5644
I0
sS'trials.thisRepN'
p5645
I254
sS'trials_2.thisTrial'
p5646
NsS'trials.thisN'
p5647
I509
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5648
g46
sg31
g60
sS'trials.thisTrialN'
p5649
I1
sS'trials_2.thisN'
p5650
I0
sa(dp5651
g20
g21
sS'trials.thisIndex'
p5652
g36
(g38
S'\x00\x00\x00\x00'
tRp5653
sg22
V
sS'trials_2.thisRepN'
p5654
I0
sS'trials_2.thisTrialN'
p5655
I0
sS'trials.thisRepN'
p5656
I255
sS'trials_2.thisTrial'
p5657
NsS'trials.thisN'
p5658
I510
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5659
g46
sg31
g48
sS'trials.thisTrialN'
p5660
I0
sS'trials_2.thisN'
p5661
I0
sa(dp5662
g20
g21
sS'trials.thisIndex'
p5663
g36
(g38
S'\x01\x00\x00\x00'
tRp5664
sg22
V
sS'trials_2.thisRepN'
p5665
I0
sS'trials_2.thisTrialN'
p5666
I0
sS'trials.thisRepN'
p5667
I255
sS'trials_2.thisTrial'
p5668
NsS'trials.thisN'
p5669
I511
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5670
g46
sg31
g60
sS'trials.thisTrialN'
p5671
I1
sS'trials_2.thisN'
p5672
I0
sa(dp5673
g20
g21
sS'trials.thisIndex'
p5674
g36
(g38
S'\x00\x00\x00\x00'
tRp5675
sg22
V
sS'trials_2.thisRepN'
p5676
I0
sS'trials_2.thisTrialN'
p5677
I0
sS'trials.thisRepN'
p5678
I256
sS'trials_2.thisTrial'
p5679
NsS'trials.thisN'
p5680
I512
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5681
g46
sg31
g48
sS'trials.thisTrialN'
p5682
I0
sS'trials_2.thisN'
p5683
I0
sa(dp5684
g20
g21
sS'trials.thisIndex'
p5685
g36
(g38
S'\x01\x00\x00\x00'
tRp5686
sg22
V
sS'trials_2.thisRepN'
p5687
I0
sS'trials_2.thisTrialN'
p5688
I0
sS'trials.thisRepN'
p5689
I256
sS'trials_2.thisTrial'
p5690
NsS'trials.thisN'
p5691
I513
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5692
g46
sg31
g60
sS'trials.thisTrialN'
p5693
I1
sS'trials_2.thisN'
p5694
I0
sa(dp5695
g20
g21
sS'trials.thisIndex'
p5696
g36
(g38
S'\x00\x00\x00\x00'
tRp5697
sg22
V
sS'trials_2.thisRepN'
p5698
I0
sS'trials_2.thisTrialN'
p5699
I0
sS'trials.thisRepN'
p5700
I257
sS'trials_2.thisTrial'
p5701
NsS'trials.thisN'
p5702
I514
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5703
g46
sg31
g48
sS'trials.thisTrialN'
p5704
I0
sS'trials_2.thisN'
p5705
I0
sa(dp5706
g20
g21
sS'trials.thisIndex'
p5707
g36
(g38
S'\x01\x00\x00\x00'
tRp5708
sg22
V
sS'trials_2.thisRepN'
p5709
I0
sS'trials_2.thisTrialN'
p5710
I0
sS'trials.thisRepN'
p5711
I257
sS'trials_2.thisTrial'
p5712
NsS'trials.thisN'
p5713
I515
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5714
g46
sg31
g60
sS'trials.thisTrialN'
p5715
I1
sS'trials_2.thisN'
p5716
I0
sa(dp5717
g20
g21
sS'trials.thisIndex'
p5718
g36
(g38
S'\x00\x00\x00\x00'
tRp5719
sg22
V
sS'trials_2.thisRepN'
p5720
I0
sS'trials_2.thisTrialN'
p5721
I0
sS'trials.thisRepN'
p5722
I258
sS'trials_2.thisTrial'
p5723
NsS'trials.thisN'
p5724
I516
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5725
g46
sg31
g48
sS'trials.thisTrialN'
p5726
I0
sS'trials_2.thisN'
p5727
I0
sa(dp5728
g20
g21
sS'trials.thisIndex'
p5729
g36
(g38
S'\x01\x00\x00\x00'
tRp5730
sg22
V
sS'trials_2.thisRepN'
p5731
I0
sS'trials_2.thisTrialN'
p5732
I0
sS'trials.thisRepN'
p5733
I258
sS'trials_2.thisTrial'
p5734
NsS'trials.thisN'
p5735
I517
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5736
g46
sg31
g60
sS'trials.thisTrialN'
p5737
I1
sS'trials_2.thisN'
p5738
I0
sa(dp5739
g20
g21
sS'trials.thisIndex'
p5740
g36
(g38
S'\x00\x00\x00\x00'
tRp5741
sg22
V
sS'trials_2.thisRepN'
p5742
I0
sS'trials_2.thisTrialN'
p5743
I0
sS'trials.thisRepN'
p5744
I259
sS'trials_2.thisTrial'
p5745
NsS'trials.thisN'
p5746
I518
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5747
g46
sg31
g48
sS'trials.thisTrialN'
p5748
I0
sS'trials_2.thisN'
p5749
I0
sa(dp5750
g20
g21
sS'trials.thisIndex'
p5751
g36
(g38
S'\x01\x00\x00\x00'
tRp5752
sg22
V
sS'trials_2.thisRepN'
p5753
I0
sS'trials_2.thisTrialN'
p5754
I0
sS'trials.thisRepN'
p5755
I259
sS'trials_2.thisTrial'
p5756
NsS'trials.thisN'
p5757
I519
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5758
g46
sg31
g60
sS'trials.thisTrialN'
p5759
I1
sS'trials_2.thisN'
p5760
I0
sa(dp5761
g20
g21
sS'trials.thisIndex'
p5762
g36
(g38
S'\x00\x00\x00\x00'
tRp5763
sg22
V
sS'trials_2.thisRepN'
p5764
I0
sS'trials_2.thisTrialN'
p5765
I0
sS'trials.thisRepN'
p5766
I260
sS'trials_2.thisTrial'
p5767
NsS'trials.thisN'
p5768
I520
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5769
g46
sg31
g48
sS'trials.thisTrialN'
p5770
I0
sS'trials_2.thisN'
p5771
I0
sa(dp5772
g20
g21
sS'trials.thisIndex'
p5773
g36
(g38
S'\x01\x00\x00\x00'
tRp5774
sg22
V
sS'trials_2.thisRepN'
p5775
I0
sS'trials_2.thisTrialN'
p5776
I0
sS'trials.thisRepN'
p5777
I260
sS'trials_2.thisTrial'
p5778
NsS'trials.thisN'
p5779
I521
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5780
g46
sg31
g60
sS'trials.thisTrialN'
p5781
I1
sS'trials_2.thisN'
p5782
I0
sa(dp5783
g20
g21
sS'trials.thisIndex'
p5784
g36
(g38
S'\x00\x00\x00\x00'
tRp5785
sg22
V
sS'trials_2.thisRepN'
p5786
I0
sS'trials_2.thisTrialN'
p5787
I0
sS'trials.thisRepN'
p5788
I261
sS'trials_2.thisTrial'
p5789
NsS'trials.thisN'
p5790
I522
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5791
g46
sg31
g48
sS'trials.thisTrialN'
p5792
I0
sS'trials_2.thisN'
p5793
I0
sa(dp5794
g20
g21
sS'trials.thisIndex'
p5795
g36
(g38
S'\x01\x00\x00\x00'
tRp5796
sg22
V
sS'trials_2.thisRepN'
p5797
I0
sS'trials_2.thisTrialN'
p5798
I0
sS'trials.thisRepN'
p5799
I261
sS'trials_2.thisTrial'
p5800
NsS'trials.thisN'
p5801
I523
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5802
g46
sg31
g60
sS'trials.thisTrialN'
p5803
I1
sS'trials_2.thisN'
p5804
I0
sa(dp5805
g20
g21
sS'trials.thisIndex'
p5806
g36
(g38
S'\x00\x00\x00\x00'
tRp5807
sg22
V
sS'trials_2.thisRepN'
p5808
I0
sS'trials_2.thisTrialN'
p5809
I0
sS'trials.thisRepN'
p5810
I262
sS'trials_2.thisTrial'
p5811
NsS'trials.thisN'
p5812
I524
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5813
g46
sg31
g48
sS'trials.thisTrialN'
p5814
I0
sS'trials_2.thisN'
p5815
I0
sa(dp5816
g20
g21
sS'trials.thisIndex'
p5817
g36
(g38
S'\x01\x00\x00\x00'
tRp5818
sg22
V
sS'trials_2.thisRepN'
p5819
I0
sS'trials_2.thisTrialN'
p5820
I0
sS'trials.thisRepN'
p5821
I262
sS'trials_2.thisTrial'
p5822
NsS'trials.thisN'
p5823
I525
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5824
g46
sg31
g60
sS'trials.thisTrialN'
p5825
I1
sS'trials_2.thisN'
p5826
I0
sa(dp5827
g20
g21
sS'trials.thisIndex'
p5828
g36
(g38
S'\x00\x00\x00\x00'
tRp5829
sg22
V
sS'trials_2.thisRepN'
p5830
I0
sS'trials_2.thisTrialN'
p5831
I0
sS'trials.thisRepN'
p5832
I263
sS'trials_2.thisTrial'
p5833
NsS'trials.thisN'
p5834
I526
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5835
g46
sg31
g48
sS'trials.thisTrialN'
p5836
I0
sS'trials_2.thisN'
p5837
I0
sa(dp5838
g20
g21
sS'trials.thisIndex'
p5839
g36
(g38
S'\x01\x00\x00\x00'
tRp5840
sg22
V
sS'trials_2.thisRepN'
p5841
I0
sS'trials_2.thisTrialN'
p5842
I0
sS'trials.thisRepN'
p5843
I263
sS'trials_2.thisTrial'
p5844
NsS'trials.thisN'
p5845
I527
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5846
g46
sg31
g60
sS'trials.thisTrialN'
p5847
I1
sS'trials_2.thisN'
p5848
I0
sa(dp5849
g20
g21
sS'trials.thisIndex'
p5850
g36
(g38
S'\x00\x00\x00\x00'
tRp5851
sg22
V
sS'trials_2.thisRepN'
p5852
I0
sS'trials_2.thisTrialN'
p5853
I0
sS'trials.thisRepN'
p5854
I264
sS'trials_2.thisTrial'
p5855
NsS'trials.thisN'
p5856
I528
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5857
g46
sg31
g48
sS'trials.thisTrialN'
p5858
I0
sS'trials_2.thisN'
p5859
I0
sa(dp5860
g20
g21
sS'trials.thisIndex'
p5861
g36
(g38
S'\x01\x00\x00\x00'
tRp5862
sg22
V
sS'trials_2.thisRepN'
p5863
I0
sS'trials_2.thisTrialN'
p5864
I0
sS'trials.thisRepN'
p5865
I264
sS'trials_2.thisTrial'
p5866
NsS'trials.thisN'
p5867
I529
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5868
g46
sg31
g60
sS'trials.thisTrialN'
p5869
I1
sS'trials_2.thisN'
p5870
I0
sa(dp5871
g20
g21
sS'trials.thisIndex'
p5872
g36
(g38
S'\x00\x00\x00\x00'
tRp5873
sg22
V
sS'trials_2.thisRepN'
p5874
I0
sS'trials_2.thisTrialN'
p5875
I0
sS'trials.thisRepN'
p5876
I265
sS'trials_2.thisTrial'
p5877
NsS'trials.thisN'
p5878
I530
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5879
g46
sg31
g48
sS'trials.thisTrialN'
p5880
I0
sS'trials_2.thisN'
p5881
I0
sa(dp5882
g20
g21
sS'trials.thisIndex'
p5883
g36
(g38
S'\x01\x00\x00\x00'
tRp5884
sg22
V
sS'trials_2.thisRepN'
p5885
I0
sS'trials_2.thisTrialN'
p5886
I0
sS'trials.thisRepN'
p5887
I265
sS'trials_2.thisTrial'
p5888
NsS'trials.thisN'
p5889
I531
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5890
g46
sg31
g60
sS'trials.thisTrialN'
p5891
I1
sS'trials_2.thisN'
p5892
I0
sa(dp5893
g20
g21
sS'trials.thisIndex'
p5894
g36
(g38
S'\x00\x00\x00\x00'
tRp5895
sg22
V
sS'trials_2.thisRepN'
p5896
I0
sS'trials_2.thisTrialN'
p5897
I0
sS'trials.thisRepN'
p5898
I266
sS'trials_2.thisTrial'
p5899
NsS'trials.thisN'
p5900
I532
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5901
g46
sg31
g48
sS'trials.thisTrialN'
p5902
I0
sS'trials_2.thisN'
p5903
I0
sa(dp5904
g20
g21
sS'trials.thisIndex'
p5905
g36
(g38
S'\x01\x00\x00\x00'
tRp5906
sg22
V
sS'trials_2.thisRepN'
p5907
I0
sS'trials_2.thisTrialN'
p5908
I0
sS'trials.thisRepN'
p5909
I266
sS'trials_2.thisTrial'
p5910
NsS'trials.thisN'
p5911
I533
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5912
g46
sg31
g60
sS'trials.thisTrialN'
p5913
I1
sS'trials_2.thisN'
p5914
I0
sa(dp5915
g20
g21
sS'trials.thisIndex'
p5916
g36
(g38
S'\x00\x00\x00\x00'
tRp5917
sg22
V
sS'trials_2.thisRepN'
p5918
I0
sS'trials_2.thisTrialN'
p5919
I0
sS'trials.thisRepN'
p5920
I267
sS'trials_2.thisTrial'
p5921
NsS'trials.thisN'
p5922
I534
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5923
g46
sg31
g48
sS'trials.thisTrialN'
p5924
I0
sS'trials_2.thisN'
p5925
I0
sa(dp5926
g20
g21
sS'trials.thisIndex'
p5927
g36
(g38
S'\x01\x00\x00\x00'
tRp5928
sg22
V
sS'trials_2.thisRepN'
p5929
I0
sS'trials_2.thisTrialN'
p5930
I0
sS'trials.thisRepN'
p5931
I267
sS'trials_2.thisTrial'
p5932
NsS'trials.thisN'
p5933
I535
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5934
g46
sg31
g60
sS'trials.thisTrialN'
p5935
I1
sS'trials_2.thisN'
p5936
I0
sa(dp5937
g20
g21
sS'trials.thisIndex'
p5938
g36
(g38
S'\x00\x00\x00\x00'
tRp5939
sg22
V
sS'trials_2.thisRepN'
p5940
I0
sS'trials_2.thisTrialN'
p5941
I0
sS'trials.thisRepN'
p5942
I268
sS'trials_2.thisTrial'
p5943
NsS'trials.thisN'
p5944
I536
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5945
g46
sg31
g48
sS'trials.thisTrialN'
p5946
I0
sS'trials_2.thisN'
p5947
I0
sa(dp5948
g20
g21
sS'trials.thisIndex'
p5949
g36
(g38
S'\x01\x00\x00\x00'
tRp5950
sg22
V
sS'trials_2.thisRepN'
p5951
I0
sS'trials_2.thisTrialN'
p5952
I0
sS'trials.thisRepN'
p5953
I268
sS'trials_2.thisTrial'
p5954
NsS'trials.thisN'
p5955
I537
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5956
g46
sg31
g60
sS'trials.thisTrialN'
p5957
I1
sS'trials_2.thisN'
p5958
I0
sa(dp5959
g20
g21
sS'trials.thisIndex'
p5960
g36
(g38
S'\x00\x00\x00\x00'
tRp5961
sg22
V
sS'trials_2.thisRepN'
p5962
I0
sS'trials_2.thisTrialN'
p5963
I0
sS'trials.thisRepN'
p5964
I269
sS'trials_2.thisTrial'
p5965
NsS'trials.thisN'
p5966
I538
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5967
g46
sg31
g48
sS'trials.thisTrialN'
p5968
I0
sS'trials_2.thisN'
p5969
I0
sa(dp5970
g20
g21
sS'trials.thisIndex'
p5971
g36
(g38
S'\x01\x00\x00\x00'
tRp5972
sg22
V
sS'trials_2.thisRepN'
p5973
I0
sS'trials_2.thisTrialN'
p5974
I0
sS'trials.thisRepN'
p5975
I269
sS'trials_2.thisTrial'
p5976
NsS'trials.thisN'
p5977
I539
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5978
g46
sg31
g60
sS'trials.thisTrialN'
p5979
I1
sS'trials_2.thisN'
p5980
I0
sa(dp5981
g20
g21
sS'trials.thisIndex'
p5982
g36
(g38
S'\x00\x00\x00\x00'
tRp5983
sg22
V
sS'trials_2.thisRepN'
p5984
I0
sS'trials_2.thisTrialN'
p5985
I0
sS'trials.thisRepN'
p5986
I270
sS'trials_2.thisTrial'
p5987
NsS'trials.thisN'
p5988
I540
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p5989
g46
sg31
g48
sS'trials.thisTrialN'
p5990
I0
sS'trials_2.thisN'
p5991
I0
sa(dp5992
g20
g21
sS'trials.thisIndex'
p5993
g36
(g38
S'\x01\x00\x00\x00'
tRp5994
sg22
V
sS'trials_2.thisRepN'
p5995
I0
sS'trials_2.thisTrialN'
p5996
I0
sS'trials.thisRepN'
p5997
I270
sS'trials_2.thisTrial'
p5998
NsS'trials.thisN'
p5999
I541
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6000
g46
sg31
g60
sS'trials.thisTrialN'
p6001
I1
sS'trials_2.thisN'
p6002
I0
sa(dp6003
g20
g21
sS'trials.thisIndex'
p6004
g36
(g38
S'\x00\x00\x00\x00'
tRp6005
sg22
V
sS'trials_2.thisRepN'
p6006
I0
sS'trials_2.thisTrialN'
p6007
I0
sS'trials.thisRepN'
p6008
I271
sS'trials_2.thisTrial'
p6009
NsS'trials.thisN'
p6010
I542
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6011
g46
sg31
g48
sS'trials.thisTrialN'
p6012
I0
sS'trials_2.thisN'
p6013
I0
sa(dp6014
g20
g21
sS'trials.thisIndex'
p6015
g36
(g38
S'\x01\x00\x00\x00'
tRp6016
sg22
V
sS'trials_2.thisRepN'
p6017
I0
sS'trials_2.thisTrialN'
p6018
I0
sS'trials.thisRepN'
p6019
I271
sS'trials_2.thisTrial'
p6020
NsS'trials.thisN'
p6021
I543
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6022
g46
sg31
g60
sS'trials.thisTrialN'
p6023
I1
sS'trials_2.thisN'
p6024
I0
sa(dp6025
g20
g21
sS'trials.thisIndex'
p6026
g36
(g38
S'\x00\x00\x00\x00'
tRp6027
sg22
V
sS'trials_2.thisRepN'
p6028
I0
sS'trials_2.thisTrialN'
p6029
I0
sS'trials.thisRepN'
p6030
I272
sS'trials_2.thisTrial'
p6031
NsS'trials.thisN'
p6032
I544
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6033
g46
sg31
g48
sS'trials.thisTrialN'
p6034
I0
sS'trials_2.thisN'
p6035
I0
sa(dp6036
g20
g21
sS'trials.thisIndex'
p6037
g36
(g38
S'\x01\x00\x00\x00'
tRp6038
sg22
V
sS'trials_2.thisRepN'
p6039
I0
sS'trials_2.thisTrialN'
p6040
I0
sS'trials.thisRepN'
p6041
I272
sS'trials_2.thisTrial'
p6042
NsS'trials.thisN'
p6043
I545
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6044
g46
sg31
g60
sS'trials.thisTrialN'
p6045
I1
sS'trials_2.thisN'
p6046
I0
sa(dp6047
g20
g21
sS'trials.thisIndex'
p6048
g36
(g38
S'\x00\x00\x00\x00'
tRp6049
sg22
V
sS'trials_2.thisRepN'
p6050
I0
sS'trials_2.thisTrialN'
p6051
I0
sS'trials.thisRepN'
p6052
I273
sS'trials_2.thisTrial'
p6053
NsS'trials.thisN'
p6054
I546
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6055
g46
sg31
g48
sS'trials.thisTrialN'
p6056
I0
sS'trials_2.thisN'
p6057
I0
sa(dp6058
g20
g21
sS'trials.thisIndex'
p6059
g36
(g38
S'\x01\x00\x00\x00'
tRp6060
sg22
V
sS'trials_2.thisRepN'
p6061
I0
sS'trials_2.thisTrialN'
p6062
I0
sS'trials.thisRepN'
p6063
I273
sS'trials_2.thisTrial'
p6064
NsS'trials.thisN'
p6065
I547
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6066
g46
sg31
g60
sS'trials.thisTrialN'
p6067
I1
sS'trials_2.thisN'
p6068
I0
sa(dp6069
g20
g21
sS'trials.thisIndex'
p6070
g36
(g38
S'\x00\x00\x00\x00'
tRp6071
sg22
V
sS'trials_2.thisRepN'
p6072
I0
sS'trials_2.thisTrialN'
p6073
I0
sS'trials.thisRepN'
p6074
I274
sS'trials_2.thisTrial'
p6075
NsS'trials.thisN'
p6076
I548
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6077
g46
sg31
g48
sS'trials.thisTrialN'
p6078
I0
sS'trials_2.thisN'
p6079
I0
sa(dp6080
g20
g21
sS'trials.thisIndex'
p6081
g36
(g38
S'\x01\x00\x00\x00'
tRp6082
sg22
V
sS'trials_2.thisRepN'
p6083
I0
sS'trials_2.thisTrialN'
p6084
I0
sS'trials.thisRepN'
p6085
I274
sS'trials_2.thisTrial'
p6086
NsS'trials.thisN'
p6087
I549
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6088
g46
sg31
g60
sS'trials.thisTrialN'
p6089
I1
sS'trials_2.thisN'
p6090
I0
sa(dp6091
g20
g21
sS'trials.thisIndex'
p6092
g36
(g38
S'\x00\x00\x00\x00'
tRp6093
sg22
V
sS'trials_2.thisRepN'
p6094
I0
sS'trials_2.thisTrialN'
p6095
I0
sS'trials.thisRepN'
p6096
I275
sS'trials_2.thisTrial'
p6097
NsS'trials.thisN'
p6098
I550
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6099
g46
sg31
g48
sS'trials.thisTrialN'
p6100
I0
sS'trials_2.thisN'
p6101
I0
sa(dp6102
g20
g21
sS'trials.thisIndex'
p6103
g36
(g38
S'\x01\x00\x00\x00'
tRp6104
sg22
V
sS'trials_2.thisRepN'
p6105
I0
sS'trials_2.thisTrialN'
p6106
I0
sS'trials.thisRepN'
p6107
I275
sS'trials_2.thisTrial'
p6108
NsS'trials.thisN'
p6109
I551
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6110
g46
sg31
g60
sS'trials.thisTrialN'
p6111
I1
sS'trials_2.thisN'
p6112
I0
sa(dp6113
g20
g21
sS'trials.thisIndex'
p6114
g36
(g38
S'\x00\x00\x00\x00'
tRp6115
sg22
V
sS'trials_2.thisRepN'
p6116
I0
sS'trials_2.thisTrialN'
p6117
I0
sS'trials.thisRepN'
p6118
I276
sS'trials_2.thisTrial'
p6119
NsS'trials.thisN'
p6120
I552
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6121
g46
sg31
g48
sS'trials.thisTrialN'
p6122
I0
sS'trials_2.thisN'
p6123
I0
sa(dp6124
g20
g21
sS'trials.thisIndex'
p6125
g36
(g38
S'\x01\x00\x00\x00'
tRp6126
sg22
V
sS'trials_2.thisRepN'
p6127
I0
sS'trials_2.thisTrialN'
p6128
I0
sS'trials.thisRepN'
p6129
I276
sS'trials_2.thisTrial'
p6130
NsS'trials.thisN'
p6131
I553
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6132
g46
sg31
g60
sS'trials.thisTrialN'
p6133
I1
sS'trials_2.thisN'
p6134
I0
sa(dp6135
g20
g21
sS'trials.thisIndex'
p6136
g36
(g38
S'\x00\x00\x00\x00'
tRp6137
sg22
V
sS'trials_2.thisRepN'
p6138
I0
sS'trials_2.thisTrialN'
p6139
I0
sS'trials.thisRepN'
p6140
I277
sS'trials_2.thisTrial'
p6141
NsS'trials.thisN'
p6142
I554
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6143
g46
sg31
g48
sS'trials.thisTrialN'
p6144
I0
sS'trials_2.thisN'
p6145
I0
sa(dp6146
g20
g21
sS'trials.thisIndex'
p6147
g36
(g38
S'\x01\x00\x00\x00'
tRp6148
sg22
V
sS'trials_2.thisRepN'
p6149
I0
sS'trials_2.thisTrialN'
p6150
I0
sS'trials.thisRepN'
p6151
I277
sS'trials_2.thisTrial'
p6152
NsS'trials.thisN'
p6153
I555
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6154
g46
sg31
g60
sS'trials.thisTrialN'
p6155
I1
sS'trials_2.thisN'
p6156
I0
sa(dp6157
g20
g21
sS'trials.thisIndex'
p6158
g36
(g38
S'\x00\x00\x00\x00'
tRp6159
sg22
V
sS'trials_2.thisRepN'
p6160
I0
sS'trials_2.thisTrialN'
p6161
I0
sS'trials.thisRepN'
p6162
I278
sS'trials_2.thisTrial'
p6163
NsS'trials.thisN'
p6164
I556
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6165
g46
sg31
g48
sS'trials.thisTrialN'
p6166
I0
sS'trials_2.thisN'
p6167
I0
sa(dp6168
g20
g21
sS'trials.thisIndex'
p6169
g36
(g38
S'\x01\x00\x00\x00'
tRp6170
sg22
V
sS'trials_2.thisRepN'
p6171
I0
sS'trials_2.thisTrialN'
p6172
I0
sS'trials.thisRepN'
p6173
I278
sS'trials_2.thisTrial'
p6174
NsS'trials.thisN'
p6175
I557
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6176
g46
sg31
g60
sS'trials.thisTrialN'
p6177
I1
sS'trials_2.thisN'
p6178
I0
sa(dp6179
g20
g21
sS'trials.thisIndex'
p6180
g36
(g38
S'\x00\x00\x00\x00'
tRp6181
sg22
V
sS'trials_2.thisRepN'
p6182
I0
sS'trials_2.thisTrialN'
p6183
I0
sS'trials.thisRepN'
p6184
I279
sS'trials_2.thisTrial'
p6185
NsS'trials.thisN'
p6186
I558
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6187
g46
sg31
g48
sS'trials.thisTrialN'
p6188
I0
sS'trials_2.thisN'
p6189
I0
sa(dp6190
g20
g21
sS'trials.thisIndex'
p6191
g36
(g38
S'\x01\x00\x00\x00'
tRp6192
sg22
V
sS'trials_2.thisRepN'
p6193
I0
sS'trials_2.thisTrialN'
p6194
I0
sS'trials.thisRepN'
p6195
I279
sS'trials_2.thisTrial'
p6196
NsS'trials.thisN'
p6197
I559
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6198
g46
sg31
g60
sS'trials.thisTrialN'
p6199
I1
sS'trials_2.thisN'
p6200
I0
sa(dp6201
g20
g21
sg22
V
sS'trials_2.thisRepN'
p6202
I0
sS'trials_2.thisTrialN'
p6203
I0
sS'trials_2.thisTrial'
p6204
Nsg19
g11
sS'trials_2.thisIndex'
p6205
g46
sg17
g18
sS'trials_2.thisN'
p6206
I0
sa(dp6207
g20
g21
sS'trials.thisIndex'
p6208
g36
(g38
S'\x00\x00\x00\x00'
tRp6209
sg22
V
sS'trials_2.thisRepN'
p6210
I1
sS'trials_2.thisTrialN'
p6211
I0
sS'trials.thisRepN'
p6212
I0
sS'trials_2.thisTrial'
p6213
NsS'trials.thisN'
p6214
I0
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6215
g36
(g38
S'\x00\x00\x00\x00'
tRp6216
sS'phase'
p6217
g36
(g47
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp6218
sS'trials.thisTrialN'
p6219
I0
sS'trials_2.thisN'
p6220
I1
sa(dp6221
g20
g21
sS'trials.thisIndex'
p6222
g36
(g38
S'\x01\x00\x00\x00'
tRp6223
sg22
V
sS'trials_2.thisRepN'
p6224
I1
sS'trials_2.thisTrialN'
p6225
I0
sS'trials.thisRepN'
p6226
I0
sS'trials_2.thisTrial'
p6227
NsS'trials.thisN'
p6228
I1
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6229
g6216
sg6217
g36
(g47
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp6230
sS'trials.thisTrialN'
p6231
I1
sS'trials_2.thisN'
p6232
I1
sa(dp6233
g20
g21
sS'trials.thisIndex'
p6234
g36
(g38
S'\x00\x00\x00\x00'
tRp6235
sg22
V
sS'trials_2.thisRepN'
p6236
I1
sS'trials_2.thisTrialN'
p6237
I0
sS'trials.thisRepN'
p6238
I1
sS'trials_2.thisTrial'
p6239
NsS'trials.thisN'
p6240
I2
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6241
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6242
I0
sS'trials_2.thisN'
p6243
I1
sa(dp6244
g20
g21
sS'trials.thisIndex'
p6245
g36
(g38
S'\x01\x00\x00\x00'
tRp6246
sg22
V
sS'trials_2.thisRepN'
p6247
I1
sS'trials_2.thisTrialN'
p6248
I0
sS'trials.thisRepN'
p6249
I1
sS'trials_2.thisTrial'
p6250
NsS'trials.thisN'
p6251
I3
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6252
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6253
I1
sS'trials_2.thisN'
p6254
I1
sa(dp6255
g20
g21
sS'trials.thisIndex'
p6256
g36
(g38
S'\x00\x00\x00\x00'
tRp6257
sg22
V
sS'trials_2.thisRepN'
p6258
I1
sS'trials_2.thisTrialN'
p6259
I0
sS'trials.thisRepN'
p6260
I2
sS'trials_2.thisTrial'
p6261
NsS'trials.thisN'
p6262
I4
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6263
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6264
I0
sS'trials_2.thisN'
p6265
I1
sa(dp6266
g20
g21
sS'trials.thisIndex'
p6267
g36
(g38
S'\x01\x00\x00\x00'
tRp6268
sg22
V
sS'trials_2.thisRepN'
p6269
I1
sS'trials_2.thisTrialN'
p6270
I0
sS'trials.thisRepN'
p6271
I2
sS'trials_2.thisTrial'
p6272
NsS'trials.thisN'
p6273
I5
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6274
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6275
I1
sS'trials_2.thisN'
p6276
I1
sa(dp6277
g20
g21
sS'trials.thisIndex'
p6278
g36
(g38
S'\x00\x00\x00\x00'
tRp6279
sg22
V
sS'trials_2.thisRepN'
p6280
I1
sS'trials_2.thisTrialN'
p6281
I0
sS'trials.thisRepN'
p6282
I3
sS'trials_2.thisTrial'
p6283
NsS'trials.thisN'
p6284
I6
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6285
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6286
I0
sS'trials_2.thisN'
p6287
I1
sa(dp6288
g20
g21
sS'trials.thisIndex'
p6289
g36
(g38
S'\x01\x00\x00\x00'
tRp6290
sg22
V
sS'trials_2.thisRepN'
p6291
I1
sS'trials_2.thisTrialN'
p6292
I0
sS'trials.thisRepN'
p6293
I3
sS'trials_2.thisTrial'
p6294
NsS'trials.thisN'
p6295
I7
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6296
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6297
I1
sS'trials_2.thisN'
p6298
I1
sa(dp6299
g20
g21
sS'trials.thisIndex'
p6300
g36
(g38
S'\x00\x00\x00\x00'
tRp6301
sg22
V
sS'trials_2.thisRepN'
p6302
I1
sS'trials_2.thisTrialN'
p6303
I0
sS'trials.thisRepN'
p6304
I4
sS'trials_2.thisTrial'
p6305
NsS'trials.thisN'
p6306
I8
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6307
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6308
I0
sS'trials_2.thisN'
p6309
I1
sa(dp6310
g20
g21
sS'trials.thisIndex'
p6311
g36
(g38
S'\x01\x00\x00\x00'
tRp6312
sg22
V
sS'trials_2.thisRepN'
p6313
I1
sS'trials_2.thisTrialN'
p6314
I0
sS'trials.thisRepN'
p6315
I4
sS'trials_2.thisTrial'
p6316
NsS'trials.thisN'
p6317
I9
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6318
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6319
I1
sS'trials_2.thisN'
p6320
I1
sa(dp6321
g20
g21
sS'trials.thisIndex'
p6322
g36
(g38
S'\x00\x00\x00\x00'
tRp6323
sg22
V
sS'trials_2.thisRepN'
p6324
I1
sS'trials_2.thisTrialN'
p6325
I0
sS'trials.thisRepN'
p6326
I5
sS'trials_2.thisTrial'
p6327
NsS'trials.thisN'
p6328
I10
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6329
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6330
I0
sS'trials_2.thisN'
p6331
I1
sa(dp6332
g20
g21
sS'trials.thisIndex'
p6333
g36
(g38
S'\x01\x00\x00\x00'
tRp6334
sg22
V
sS'trials_2.thisRepN'
p6335
I1
sS'trials_2.thisTrialN'
p6336
I0
sS'trials.thisRepN'
p6337
I5
sS'trials_2.thisTrial'
p6338
NsS'trials.thisN'
p6339
I11
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6340
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6341
I1
sS'trials_2.thisN'
p6342
I1
sa(dp6343
g20
g21
sS'trials.thisIndex'
p6344
g36
(g38
S'\x00\x00\x00\x00'
tRp6345
sg22
V
sS'trials_2.thisRepN'
p6346
I1
sS'trials_2.thisTrialN'
p6347
I0
sS'trials.thisRepN'
p6348
I6
sS'trials_2.thisTrial'
p6349
NsS'trials.thisN'
p6350
I12
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6351
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6352
I0
sS'trials_2.thisN'
p6353
I1
sa(dp6354
g20
g21
sS'trials.thisIndex'
p6355
g36
(g38
S'\x01\x00\x00\x00'
tRp6356
sg22
V
sS'trials_2.thisRepN'
p6357
I1
sS'trials_2.thisTrialN'
p6358
I0
sS'trials.thisRepN'
p6359
I6
sS'trials_2.thisTrial'
p6360
NsS'trials.thisN'
p6361
I13
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6362
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6363
I1
sS'trials_2.thisN'
p6364
I1
sa(dp6365
g20
g21
sS'trials.thisIndex'
p6366
g36
(g38
S'\x00\x00\x00\x00'
tRp6367
sg22
V
sS'trials_2.thisRepN'
p6368
I1
sS'trials_2.thisTrialN'
p6369
I0
sS'trials.thisRepN'
p6370
I7
sS'trials_2.thisTrial'
p6371
NsS'trials.thisN'
p6372
I14
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6373
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6374
I0
sS'trials_2.thisN'
p6375
I1
sa(dp6376
g20
g21
sS'trials.thisIndex'
p6377
g36
(g38
S'\x01\x00\x00\x00'
tRp6378
sg22
V
sS'trials_2.thisRepN'
p6379
I1
sS'trials_2.thisTrialN'
p6380
I0
sS'trials.thisRepN'
p6381
I7
sS'trials_2.thisTrial'
p6382
NsS'trials.thisN'
p6383
I15
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6384
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6385
I1
sS'trials_2.thisN'
p6386
I1
sa(dp6387
g20
g21
sS'trials.thisIndex'
p6388
g36
(g38
S'\x00\x00\x00\x00'
tRp6389
sg22
V
sS'trials_2.thisRepN'
p6390
I1
sS'trials_2.thisTrialN'
p6391
I0
sS'trials.thisRepN'
p6392
I8
sS'trials_2.thisTrial'
p6393
NsS'trials.thisN'
p6394
I16
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6395
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6396
I0
sS'trials_2.thisN'
p6397
I1
sa(dp6398
g20
g21
sS'trials.thisIndex'
p6399
g36
(g38
S'\x01\x00\x00\x00'
tRp6400
sg22
V
sS'trials_2.thisRepN'
p6401
I1
sS'trials_2.thisTrialN'
p6402
I0
sS'trials.thisRepN'
p6403
I8
sS'trials_2.thisTrial'
p6404
NsS'trials.thisN'
p6405
I17
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6406
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6407
I1
sS'trials_2.thisN'
p6408
I1
sa(dp6409
g20
g21
sS'trials.thisIndex'
p6410
g36
(g38
S'\x00\x00\x00\x00'
tRp6411
sg22
V
sS'trials_2.thisRepN'
p6412
I1
sS'trials_2.thisTrialN'
p6413
I0
sS'trials.thisRepN'
p6414
I9
sS'trials_2.thisTrial'
p6415
NsS'trials.thisN'
p6416
I18
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6417
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6418
I0
sS'trials_2.thisN'
p6419
I1
sa(dp6420
g20
g21
sS'trials.thisIndex'
p6421
g36
(g38
S'\x01\x00\x00\x00'
tRp6422
sg22
V
sS'trials_2.thisRepN'
p6423
I1
sS'trials_2.thisTrialN'
p6424
I0
sS'trials.thisRepN'
p6425
I9
sS'trials_2.thisTrial'
p6426
NsS'trials.thisN'
p6427
I19
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6428
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6429
I1
sS'trials_2.thisN'
p6430
I1
sa(dp6431
g20
g21
sS'trials.thisIndex'
p6432
g36
(g38
S'\x00\x00\x00\x00'
tRp6433
sg22
V
sS'trials_2.thisRepN'
p6434
I1
sS'trials_2.thisTrialN'
p6435
I0
sS'trials.thisRepN'
p6436
I10
sS'trials_2.thisTrial'
p6437
NsS'trials.thisN'
p6438
I20
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6439
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6440
I0
sS'trials_2.thisN'
p6441
I1
sa(dp6442
g20
g21
sS'trials.thisIndex'
p6443
g36
(g38
S'\x01\x00\x00\x00'
tRp6444
sg22
V
sS'trials_2.thisRepN'
p6445
I1
sS'trials_2.thisTrialN'
p6446
I0
sS'trials.thisRepN'
p6447
I10
sS'trials_2.thisTrial'
p6448
NsS'trials.thisN'
p6449
I21
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6450
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6451
I1
sS'trials_2.thisN'
p6452
I1
sa(dp6453
g20
g21
sS'trials.thisIndex'
p6454
g36
(g38
S'\x00\x00\x00\x00'
tRp6455
sg22
V
sS'trials_2.thisRepN'
p6456
I1
sS'trials_2.thisTrialN'
p6457
I0
sS'trials.thisRepN'
p6458
I11
sS'trials_2.thisTrial'
p6459
NsS'trials.thisN'
p6460
I22
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6461
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6462
I0
sS'trials_2.thisN'
p6463
I1
sa(dp6464
g20
g21
sS'trials.thisIndex'
p6465
g36
(g38
S'\x01\x00\x00\x00'
tRp6466
sg22
V
sS'trials_2.thisRepN'
p6467
I1
sS'trials_2.thisTrialN'
p6468
I0
sS'trials.thisRepN'
p6469
I11
sS'trials_2.thisTrial'
p6470
NsS'trials.thisN'
p6471
I23
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6472
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6473
I1
sS'trials_2.thisN'
p6474
I1
sa(dp6475
g20
g21
sS'trials.thisIndex'
p6476
g36
(g38
S'\x00\x00\x00\x00'
tRp6477
sg22
V
sS'trials_2.thisRepN'
p6478
I1
sS'trials_2.thisTrialN'
p6479
I0
sS'trials.thisRepN'
p6480
I12
sS'trials_2.thisTrial'
p6481
NsS'trials.thisN'
p6482
I24
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6483
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6484
I0
sS'trials_2.thisN'
p6485
I1
sa(dp6486
g20
g21
sS'trials.thisIndex'
p6487
g36
(g38
S'\x01\x00\x00\x00'
tRp6488
sg22
V
sS'trials_2.thisRepN'
p6489
I1
sS'trials_2.thisTrialN'
p6490
I0
sS'trials.thisRepN'
p6491
I12
sS'trials_2.thisTrial'
p6492
NsS'trials.thisN'
p6493
I25
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6494
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6495
I1
sS'trials_2.thisN'
p6496
I1
sa(dp6497
g20
g21
sS'trials.thisIndex'
p6498
g36
(g38
S'\x00\x00\x00\x00'
tRp6499
sg22
V
sS'trials_2.thisRepN'
p6500
I1
sS'trials_2.thisTrialN'
p6501
I0
sS'trials.thisRepN'
p6502
I13
sS'trials_2.thisTrial'
p6503
NsS'trials.thisN'
p6504
I26
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6505
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6506
I0
sS'trials_2.thisN'
p6507
I1
sa(dp6508
g20
g21
sS'trials.thisIndex'
p6509
g36
(g38
S'\x01\x00\x00\x00'
tRp6510
sg22
V
sS'trials_2.thisRepN'
p6511
I1
sS'trials_2.thisTrialN'
p6512
I0
sS'trials.thisRepN'
p6513
I13
sS'trials_2.thisTrial'
p6514
NsS'trials.thisN'
p6515
I27
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6516
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6517
I1
sS'trials_2.thisN'
p6518
I1
sa(dp6519
g20
g21
sS'trials.thisIndex'
p6520
g36
(g38
S'\x00\x00\x00\x00'
tRp6521
sg22
V
sS'trials_2.thisRepN'
p6522
I1
sS'trials_2.thisTrialN'
p6523
I0
sS'trials.thisRepN'
p6524
I14
sS'trials_2.thisTrial'
p6525
NsS'trials.thisN'
p6526
I28
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6527
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6528
I0
sS'trials_2.thisN'
p6529
I1
sa(dp6530
g20
g21
sS'trials.thisIndex'
p6531
g36
(g38
S'\x01\x00\x00\x00'
tRp6532
sg22
V
sS'trials_2.thisRepN'
p6533
I1
sS'trials_2.thisTrialN'
p6534
I0
sS'trials.thisRepN'
p6535
I14
sS'trials_2.thisTrial'
p6536
NsS'trials.thisN'
p6537
I29
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6538
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6539
I1
sS'trials_2.thisN'
p6540
I1
sa(dp6541
g20
g21
sS'trials.thisIndex'
p6542
g36
(g38
S'\x00\x00\x00\x00'
tRp6543
sg22
V
sS'trials_2.thisRepN'
p6544
I1
sS'trials_2.thisTrialN'
p6545
I0
sS'trials.thisRepN'
p6546
I15
sS'trials_2.thisTrial'
p6547
NsS'trials.thisN'
p6548
I30
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6549
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6550
I0
sS'trials_2.thisN'
p6551
I1
sa(dp6552
g20
g21
sS'trials.thisIndex'
p6553
g36
(g38
S'\x01\x00\x00\x00'
tRp6554
sg22
V
sS'trials_2.thisRepN'
p6555
I1
sS'trials_2.thisTrialN'
p6556
I0
sS'trials.thisRepN'
p6557
I15
sS'trials_2.thisTrial'
p6558
NsS'trials.thisN'
p6559
I31
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6560
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6561
I1
sS'trials_2.thisN'
p6562
I1
sa(dp6563
g20
g21
sS'trials.thisIndex'
p6564
g36
(g38
S'\x00\x00\x00\x00'
tRp6565
sg22
V
sS'trials_2.thisRepN'
p6566
I1
sS'trials_2.thisTrialN'
p6567
I0
sS'trials.thisRepN'
p6568
I16
sS'trials_2.thisTrial'
p6569
NsS'trials.thisN'
p6570
I32
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6571
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6572
I0
sS'trials_2.thisN'
p6573
I1
sa(dp6574
g20
g21
sS'trials.thisIndex'
p6575
g36
(g38
S'\x01\x00\x00\x00'
tRp6576
sg22
V
sS'trials_2.thisRepN'
p6577
I1
sS'trials_2.thisTrialN'
p6578
I0
sS'trials.thisRepN'
p6579
I16
sS'trials_2.thisTrial'
p6580
NsS'trials.thisN'
p6581
I33
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6582
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6583
I1
sS'trials_2.thisN'
p6584
I1
sa(dp6585
g20
g21
sS'trials.thisIndex'
p6586
g36
(g38
S'\x00\x00\x00\x00'
tRp6587
sg22
V
sS'trials_2.thisRepN'
p6588
I1
sS'trials_2.thisTrialN'
p6589
I0
sS'trials.thisRepN'
p6590
I17
sS'trials_2.thisTrial'
p6591
NsS'trials.thisN'
p6592
I34
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6593
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6594
I0
sS'trials_2.thisN'
p6595
I1
sa(dp6596
g20
g21
sS'trials.thisIndex'
p6597
g36
(g38
S'\x01\x00\x00\x00'
tRp6598
sg22
V
sS'trials_2.thisRepN'
p6599
I1
sS'trials_2.thisTrialN'
p6600
I0
sS'trials.thisRepN'
p6601
I17
sS'trials_2.thisTrial'
p6602
NsS'trials.thisN'
p6603
I35
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6604
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6605
I1
sS'trials_2.thisN'
p6606
I1
sa(dp6607
g20
g21
sS'trials.thisIndex'
p6608
g36
(g38
S'\x00\x00\x00\x00'
tRp6609
sg22
V
sS'trials_2.thisRepN'
p6610
I1
sS'trials_2.thisTrialN'
p6611
I0
sS'trials.thisRepN'
p6612
I18
sS'trials_2.thisTrial'
p6613
NsS'trials.thisN'
p6614
I36
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6615
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6616
I0
sS'trials_2.thisN'
p6617
I1
sa(dp6618
g20
g21
sS'trials.thisIndex'
p6619
g36
(g38
S'\x01\x00\x00\x00'
tRp6620
sg22
V
sS'trials_2.thisRepN'
p6621
I1
sS'trials_2.thisTrialN'
p6622
I0
sS'trials.thisRepN'
p6623
I18
sS'trials_2.thisTrial'
p6624
NsS'trials.thisN'
p6625
I37
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6626
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6627
I1
sS'trials_2.thisN'
p6628
I1
sa(dp6629
g20
g21
sS'trials.thisIndex'
p6630
g36
(g38
S'\x00\x00\x00\x00'
tRp6631
sg22
V
sS'trials_2.thisRepN'
p6632
I1
sS'trials_2.thisTrialN'
p6633
I0
sS'trials.thisRepN'
p6634
I19
sS'trials_2.thisTrial'
p6635
NsS'trials.thisN'
p6636
I38
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6637
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6638
I0
sS'trials_2.thisN'
p6639
I1
sa(dp6640
g20
g21
sS'trials.thisIndex'
p6641
g36
(g38
S'\x01\x00\x00\x00'
tRp6642
sg22
V
sS'trials_2.thisRepN'
p6643
I1
sS'trials_2.thisTrialN'
p6644
I0
sS'trials.thisRepN'
p6645
I19
sS'trials_2.thisTrial'
p6646
NsS'trials.thisN'
p6647
I39
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6648
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6649
I1
sS'trials_2.thisN'
p6650
I1
sa(dp6651
g20
g21
sS'trials.thisIndex'
p6652
g36
(g38
S'\x00\x00\x00\x00'
tRp6653
sg22
V
sS'trials_2.thisRepN'
p6654
I1
sS'trials_2.thisTrialN'
p6655
I0
sS'trials.thisRepN'
p6656
I20
sS'trials_2.thisTrial'
p6657
NsS'trials.thisN'
p6658
I40
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6659
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6660
I0
sS'trials_2.thisN'
p6661
I1
sa(dp6662
g20
g21
sS'trials.thisIndex'
p6663
g36
(g38
S'\x01\x00\x00\x00'
tRp6664
sg22
V
sS'trials_2.thisRepN'
p6665
I1
sS'trials_2.thisTrialN'
p6666
I0
sS'trials.thisRepN'
p6667
I20
sS'trials_2.thisTrial'
p6668
NsS'trials.thisN'
p6669
I41
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6670
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6671
I1
sS'trials_2.thisN'
p6672
I1
sa(dp6673
g20
g21
sS'trials.thisIndex'
p6674
g36
(g38
S'\x00\x00\x00\x00'
tRp6675
sg22
V
sS'trials_2.thisRepN'
p6676
I1
sS'trials_2.thisTrialN'
p6677
I0
sS'trials.thisRepN'
p6678
I21
sS'trials_2.thisTrial'
p6679
NsS'trials.thisN'
p6680
I42
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6681
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6682
I0
sS'trials_2.thisN'
p6683
I1
sa(dp6684
g20
g21
sS'trials.thisIndex'
p6685
g36
(g38
S'\x01\x00\x00\x00'
tRp6686
sg22
V
sS'trials_2.thisRepN'
p6687
I1
sS'trials_2.thisTrialN'
p6688
I0
sS'trials.thisRepN'
p6689
I21
sS'trials_2.thisTrial'
p6690
NsS'trials.thisN'
p6691
I43
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6692
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6693
I1
sS'trials_2.thisN'
p6694
I1
sa(dp6695
g20
g21
sS'trials.thisIndex'
p6696
g36
(g38
S'\x00\x00\x00\x00'
tRp6697
sg22
V
sS'trials_2.thisRepN'
p6698
I1
sS'trials_2.thisTrialN'
p6699
I0
sS'trials.thisRepN'
p6700
I22
sS'trials_2.thisTrial'
p6701
NsS'trials.thisN'
p6702
I44
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6703
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6704
I0
sS'trials_2.thisN'
p6705
I1
sa(dp6706
g20
g21
sS'trials.thisIndex'
p6707
g36
(g38
S'\x01\x00\x00\x00'
tRp6708
sg22
V
sS'trials_2.thisRepN'
p6709
I1
sS'trials_2.thisTrialN'
p6710
I0
sS'trials.thisRepN'
p6711
I22
sS'trials_2.thisTrial'
p6712
NsS'trials.thisN'
p6713
I45
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6714
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6715
I1
sS'trials_2.thisN'
p6716
I1
sa(dp6717
g20
g21
sS'trials.thisIndex'
p6718
g36
(g38
S'\x00\x00\x00\x00'
tRp6719
sg22
V
sS'trials_2.thisRepN'
p6720
I1
sS'trials_2.thisTrialN'
p6721
I0
sS'trials.thisRepN'
p6722
I23
sS'trials_2.thisTrial'
p6723
NsS'trials.thisN'
p6724
I46
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6725
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6726
I0
sS'trials_2.thisN'
p6727
I1
sa(dp6728
g20
g21
sS'trials.thisIndex'
p6729
g36
(g38
S'\x01\x00\x00\x00'
tRp6730
sg22
V
sS'trials_2.thisRepN'
p6731
I1
sS'trials_2.thisTrialN'
p6732
I0
sS'trials.thisRepN'
p6733
I23
sS'trials_2.thisTrial'
p6734
NsS'trials.thisN'
p6735
I47
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6736
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6737
I1
sS'trials_2.thisN'
p6738
I1
sa(dp6739
g20
g21
sS'trials.thisIndex'
p6740
g36
(g38
S'\x00\x00\x00\x00'
tRp6741
sg22
V
sS'trials_2.thisRepN'
p6742
I1
sS'trials_2.thisTrialN'
p6743
I0
sS'trials.thisRepN'
p6744
I24
sS'trials_2.thisTrial'
p6745
NsS'trials.thisN'
p6746
I48
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6747
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6748
I0
sS'trials_2.thisN'
p6749
I1
sa(dp6750
g20
g21
sS'trials.thisIndex'
p6751
g36
(g38
S'\x01\x00\x00\x00'
tRp6752
sg22
V
sS'trials_2.thisRepN'
p6753
I1
sS'trials_2.thisTrialN'
p6754
I0
sS'trials.thisRepN'
p6755
I24
sS'trials_2.thisTrial'
p6756
NsS'trials.thisN'
p6757
I49
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6758
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6759
I1
sS'trials_2.thisN'
p6760
I1
sa(dp6761
g20
g21
sS'trials.thisIndex'
p6762
g36
(g38
S'\x00\x00\x00\x00'
tRp6763
sg22
V
sS'trials_2.thisRepN'
p6764
I1
sS'trials_2.thisTrialN'
p6765
I0
sS'trials.thisRepN'
p6766
I25
sS'trials_2.thisTrial'
p6767
NsS'trials.thisN'
p6768
I50
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6769
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6770
I0
sS'trials_2.thisN'
p6771
I1
sa(dp6772
g20
g21
sS'trials.thisIndex'
p6773
g36
(g38
S'\x01\x00\x00\x00'
tRp6774
sg22
V
sS'trials_2.thisRepN'
p6775
I1
sS'trials_2.thisTrialN'
p6776
I0
sS'trials.thisRepN'
p6777
I25
sS'trials_2.thisTrial'
p6778
NsS'trials.thisN'
p6779
I51
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6780
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6781
I1
sS'trials_2.thisN'
p6782
I1
sa(dp6783
g20
g21
sS'trials.thisIndex'
p6784
g36
(g38
S'\x00\x00\x00\x00'
tRp6785
sg22
V
sS'trials_2.thisRepN'
p6786
I1
sS'trials_2.thisTrialN'
p6787
I0
sS'trials.thisRepN'
p6788
I26
sS'trials_2.thisTrial'
p6789
NsS'trials.thisN'
p6790
I52
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6791
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6792
I0
sS'trials_2.thisN'
p6793
I1
sa(dp6794
g20
g21
sS'trials.thisIndex'
p6795
g36
(g38
S'\x01\x00\x00\x00'
tRp6796
sg22
V
sS'trials_2.thisRepN'
p6797
I1
sS'trials_2.thisTrialN'
p6798
I0
sS'trials.thisRepN'
p6799
I26
sS'trials_2.thisTrial'
p6800
NsS'trials.thisN'
p6801
I53
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6802
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6803
I1
sS'trials_2.thisN'
p6804
I1
sa(dp6805
g20
g21
sS'trials.thisIndex'
p6806
g36
(g38
S'\x00\x00\x00\x00'
tRp6807
sg22
V
sS'trials_2.thisRepN'
p6808
I1
sS'trials_2.thisTrialN'
p6809
I0
sS'trials.thisRepN'
p6810
I27
sS'trials_2.thisTrial'
p6811
NsS'trials.thisN'
p6812
I54
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6813
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6814
I0
sS'trials_2.thisN'
p6815
I1
sa(dp6816
g20
g21
sS'trials.thisIndex'
p6817
g36
(g38
S'\x01\x00\x00\x00'
tRp6818
sg22
V
sS'trials_2.thisRepN'
p6819
I1
sS'trials_2.thisTrialN'
p6820
I0
sS'trials.thisRepN'
p6821
I27
sS'trials_2.thisTrial'
p6822
NsS'trials.thisN'
p6823
I55
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6824
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6825
I1
sS'trials_2.thisN'
p6826
I1
sa(dp6827
g20
g21
sS'trials.thisIndex'
p6828
g36
(g38
S'\x00\x00\x00\x00'
tRp6829
sg22
V
sS'trials_2.thisRepN'
p6830
I1
sS'trials_2.thisTrialN'
p6831
I0
sS'trials.thisRepN'
p6832
I28
sS'trials_2.thisTrial'
p6833
NsS'trials.thisN'
p6834
I56
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6835
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6836
I0
sS'trials_2.thisN'
p6837
I1
sa(dp6838
g20
g21
sS'trials.thisIndex'
p6839
g36
(g38
S'\x01\x00\x00\x00'
tRp6840
sg22
V
sS'trials_2.thisRepN'
p6841
I1
sS'trials_2.thisTrialN'
p6842
I0
sS'trials.thisRepN'
p6843
I28
sS'trials_2.thisTrial'
p6844
NsS'trials.thisN'
p6845
I57
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6846
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6847
I1
sS'trials_2.thisN'
p6848
I1
sa(dp6849
g20
g21
sS'trials.thisIndex'
p6850
g36
(g38
S'\x00\x00\x00\x00'
tRp6851
sg22
V
sS'trials_2.thisRepN'
p6852
I1
sS'trials_2.thisTrialN'
p6853
I0
sS'trials.thisRepN'
p6854
I29
sS'trials_2.thisTrial'
p6855
NsS'trials.thisN'
p6856
I58
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6857
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6858
I0
sS'trials_2.thisN'
p6859
I1
sa(dp6860
g20
g21
sS'trials.thisIndex'
p6861
g36
(g38
S'\x01\x00\x00\x00'
tRp6862
sg22
V
sS'trials_2.thisRepN'
p6863
I1
sS'trials_2.thisTrialN'
p6864
I0
sS'trials.thisRepN'
p6865
I29
sS'trials_2.thisTrial'
p6866
NsS'trials.thisN'
p6867
I59
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6868
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6869
I1
sS'trials_2.thisN'
p6870
I1
sa(dp6871
g20
g21
sS'trials.thisIndex'
p6872
g36
(g38
S'\x00\x00\x00\x00'
tRp6873
sg22
V
sS'trials_2.thisRepN'
p6874
I1
sS'trials_2.thisTrialN'
p6875
I0
sS'trials.thisRepN'
p6876
I30
sS'trials_2.thisTrial'
p6877
NsS'trials.thisN'
p6878
I60
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6879
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6880
I0
sS'trials_2.thisN'
p6881
I1
sa(dp6882
g20
g21
sS'trials.thisIndex'
p6883
g36
(g38
S'\x01\x00\x00\x00'
tRp6884
sg22
V
sS'trials_2.thisRepN'
p6885
I1
sS'trials_2.thisTrialN'
p6886
I0
sS'trials.thisRepN'
p6887
I30
sS'trials_2.thisTrial'
p6888
NsS'trials.thisN'
p6889
I61
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6890
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6891
I1
sS'trials_2.thisN'
p6892
I1
sa(dp6893
g20
g21
sS'trials.thisIndex'
p6894
g36
(g38
S'\x00\x00\x00\x00'
tRp6895
sg22
V
sS'trials_2.thisRepN'
p6896
I1
sS'trials_2.thisTrialN'
p6897
I0
sS'trials.thisRepN'
p6898
I31
sS'trials_2.thisTrial'
p6899
NsS'trials.thisN'
p6900
I62
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6901
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6902
I0
sS'trials_2.thisN'
p6903
I1
sa(dp6904
g20
g21
sS'trials.thisIndex'
p6905
g36
(g38
S'\x01\x00\x00\x00'
tRp6906
sg22
V
sS'trials_2.thisRepN'
p6907
I1
sS'trials_2.thisTrialN'
p6908
I0
sS'trials.thisRepN'
p6909
I31
sS'trials_2.thisTrial'
p6910
NsS'trials.thisN'
p6911
I63
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6912
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6913
I1
sS'trials_2.thisN'
p6914
I1
sa(dp6915
g20
g21
sS'trials.thisIndex'
p6916
g36
(g38
S'\x00\x00\x00\x00'
tRp6917
sg22
V
sS'trials_2.thisRepN'
p6918
I1
sS'trials_2.thisTrialN'
p6919
I0
sS'trials.thisRepN'
p6920
I32
sS'trials_2.thisTrial'
p6921
NsS'trials.thisN'
p6922
I64
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6923
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6924
I0
sS'trials_2.thisN'
p6925
I1
sa(dp6926
g20
g21
sS'trials.thisIndex'
p6927
g36
(g38
S'\x01\x00\x00\x00'
tRp6928
sg22
V
sS'trials_2.thisRepN'
p6929
I1
sS'trials_2.thisTrialN'
p6930
I0
sS'trials.thisRepN'
p6931
I32
sS'trials_2.thisTrial'
p6932
NsS'trials.thisN'
p6933
I65
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6934
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6935
I1
sS'trials_2.thisN'
p6936
I1
sa(dp6937
g20
g21
sS'trials.thisIndex'
p6938
g36
(g38
S'\x00\x00\x00\x00'
tRp6939
sg22
V
sS'trials_2.thisRepN'
p6940
I1
sS'trials_2.thisTrialN'
p6941
I0
sS'trials.thisRepN'
p6942
I33
sS'trials_2.thisTrial'
p6943
NsS'trials.thisN'
p6944
I66
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6945
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6946
I0
sS'trials_2.thisN'
p6947
I1
sa(dp6948
g20
g21
sS'trials.thisIndex'
p6949
g36
(g38
S'\x01\x00\x00\x00'
tRp6950
sg22
V
sS'trials_2.thisRepN'
p6951
I1
sS'trials_2.thisTrialN'
p6952
I0
sS'trials.thisRepN'
p6953
I33
sS'trials_2.thisTrial'
p6954
NsS'trials.thisN'
p6955
I67
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6956
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6957
I1
sS'trials_2.thisN'
p6958
I1
sa(dp6959
g20
g21
sS'trials.thisIndex'
p6960
g36
(g38
S'\x00\x00\x00\x00'
tRp6961
sg22
V
sS'trials_2.thisRepN'
p6962
I1
sS'trials_2.thisTrialN'
p6963
I0
sS'trials.thisRepN'
p6964
I34
sS'trials_2.thisTrial'
p6965
NsS'trials.thisN'
p6966
I68
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6967
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6968
I0
sS'trials_2.thisN'
p6969
I1
sa(dp6970
g20
g21
sS'trials.thisIndex'
p6971
g36
(g38
S'\x01\x00\x00\x00'
tRp6972
sg22
V
sS'trials_2.thisRepN'
p6973
I1
sS'trials_2.thisTrialN'
p6974
I0
sS'trials.thisRepN'
p6975
I34
sS'trials_2.thisTrial'
p6976
NsS'trials.thisN'
p6977
I69
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6978
g6216
sg6217
g6230
sS'trials.thisTrialN'
p6979
I1
sS'trials_2.thisN'
p6980
I1
sa(dp6981
g20
g21
sS'trials.thisIndex'
p6982
g36
(g38
S'\x00\x00\x00\x00'
tRp6983
sg22
V
sS'trials_2.thisRepN'
p6984
I1
sS'trials_2.thisTrialN'
p6985
I0
sS'trials.thisRepN'
p6986
I35
sS'trials_2.thisTrial'
p6987
NsS'trials.thisN'
p6988
I70
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p6989
g6216
sg6217
g6218
sS'trials.thisTrialN'
p6990
I0
sS'trials_2.thisN'
p6991
I1
sa(dp6992
g20
g21
sS'trials.thisIndex'
p6993
g36
(g38
S'\x01\x00\x00\x00'
tRp6994
sg22
V
sS'trials_2.thisRepN'
p6995
I1
sS'trials_2.thisTrialN'
p6996
I0
sS'trials.thisRepN'
p6997
I35
sS'trials_2.thisTrial'
p6998
NsS'trials.thisN'
p6999
I71
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7000
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7001
I1
sS'trials_2.thisN'
p7002
I1
sa(dp7003
g20
g21
sS'trials.thisIndex'
p7004
g36
(g38
S'\x00\x00\x00\x00'
tRp7005
sg22
V
sS'trials_2.thisRepN'
p7006
I1
sS'trials_2.thisTrialN'
p7007
I0
sS'trials.thisRepN'
p7008
I36
sS'trials_2.thisTrial'
p7009
NsS'trials.thisN'
p7010
I72
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7011
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7012
I0
sS'trials_2.thisN'
p7013
I1
sa(dp7014
g20
g21
sS'trials.thisIndex'
p7015
g36
(g38
S'\x01\x00\x00\x00'
tRp7016
sg22
V
sS'trials_2.thisRepN'
p7017
I1
sS'trials_2.thisTrialN'
p7018
I0
sS'trials.thisRepN'
p7019
I36
sS'trials_2.thisTrial'
p7020
NsS'trials.thisN'
p7021
I73
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7022
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7023
I1
sS'trials_2.thisN'
p7024
I1
sa(dp7025
g20
g21
sS'trials.thisIndex'
p7026
g36
(g38
S'\x00\x00\x00\x00'
tRp7027
sg22
V
sS'trials_2.thisRepN'
p7028
I1
sS'trials_2.thisTrialN'
p7029
I0
sS'trials.thisRepN'
p7030
I37
sS'trials_2.thisTrial'
p7031
NsS'trials.thisN'
p7032
I74
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7033
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7034
I0
sS'trials_2.thisN'
p7035
I1
sa(dp7036
g20
g21
sS'trials.thisIndex'
p7037
g36
(g38
S'\x01\x00\x00\x00'
tRp7038
sg22
V
sS'trials_2.thisRepN'
p7039
I1
sS'trials_2.thisTrialN'
p7040
I0
sS'trials.thisRepN'
p7041
I37
sS'trials_2.thisTrial'
p7042
NsS'trials.thisN'
p7043
I75
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7044
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7045
I1
sS'trials_2.thisN'
p7046
I1
sa(dp7047
g20
g21
sS'trials.thisIndex'
p7048
g36
(g38
S'\x00\x00\x00\x00'
tRp7049
sg22
V
sS'trials_2.thisRepN'
p7050
I1
sS'trials_2.thisTrialN'
p7051
I0
sS'trials.thisRepN'
p7052
I38
sS'trials_2.thisTrial'
p7053
NsS'trials.thisN'
p7054
I76
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7055
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7056
I0
sS'trials_2.thisN'
p7057
I1
sa(dp7058
g20
g21
sS'trials.thisIndex'
p7059
g36
(g38
S'\x01\x00\x00\x00'
tRp7060
sg22
V
sS'trials_2.thisRepN'
p7061
I1
sS'trials_2.thisTrialN'
p7062
I0
sS'trials.thisRepN'
p7063
I38
sS'trials_2.thisTrial'
p7064
NsS'trials.thisN'
p7065
I77
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7066
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7067
I1
sS'trials_2.thisN'
p7068
I1
sa(dp7069
g20
g21
sS'trials.thisIndex'
p7070
g36
(g38
S'\x00\x00\x00\x00'
tRp7071
sg22
V
sS'trials_2.thisRepN'
p7072
I1
sS'trials_2.thisTrialN'
p7073
I0
sS'trials.thisRepN'
p7074
I39
sS'trials_2.thisTrial'
p7075
NsS'trials.thisN'
p7076
I78
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7077
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7078
I0
sS'trials_2.thisN'
p7079
I1
sa(dp7080
g20
g21
sS'trials.thisIndex'
p7081
g36
(g38
S'\x01\x00\x00\x00'
tRp7082
sg22
V
sS'trials_2.thisRepN'
p7083
I1
sS'trials_2.thisTrialN'
p7084
I0
sS'trials.thisRepN'
p7085
I39
sS'trials_2.thisTrial'
p7086
NsS'trials.thisN'
p7087
I79
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7088
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7089
I1
sS'trials_2.thisN'
p7090
I1
sa(dp7091
g20
g21
sS'trials.thisIndex'
p7092
g36
(g38
S'\x00\x00\x00\x00'
tRp7093
sg22
V
sS'trials_2.thisRepN'
p7094
I1
sS'trials_2.thisTrialN'
p7095
I0
sS'trials.thisRepN'
p7096
I40
sS'trials_2.thisTrial'
p7097
NsS'trials.thisN'
p7098
I80
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7099
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7100
I0
sS'trials_2.thisN'
p7101
I1
sa(dp7102
g20
g21
sS'trials.thisIndex'
p7103
g36
(g38
S'\x01\x00\x00\x00'
tRp7104
sg22
V
sS'trials_2.thisRepN'
p7105
I1
sS'trials_2.thisTrialN'
p7106
I0
sS'trials.thisRepN'
p7107
I40
sS'trials_2.thisTrial'
p7108
NsS'trials.thisN'
p7109
I81
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7110
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7111
I1
sS'trials_2.thisN'
p7112
I1
sa(dp7113
g20
g21
sS'trials.thisIndex'
p7114
g36
(g38
S'\x00\x00\x00\x00'
tRp7115
sg22
V
sS'trials_2.thisRepN'
p7116
I1
sS'trials_2.thisTrialN'
p7117
I0
sS'trials.thisRepN'
p7118
I41
sS'trials_2.thisTrial'
p7119
NsS'trials.thisN'
p7120
I82
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7121
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7122
I0
sS'trials_2.thisN'
p7123
I1
sa(dp7124
g20
g21
sS'trials.thisIndex'
p7125
g36
(g38
S'\x01\x00\x00\x00'
tRp7126
sg22
V
sS'trials_2.thisRepN'
p7127
I1
sS'trials_2.thisTrialN'
p7128
I0
sS'trials.thisRepN'
p7129
I41
sS'trials_2.thisTrial'
p7130
NsS'trials.thisN'
p7131
I83
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7132
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7133
I1
sS'trials_2.thisN'
p7134
I1
sa(dp7135
g20
g21
sS'trials.thisIndex'
p7136
g36
(g38
S'\x00\x00\x00\x00'
tRp7137
sg22
V
sS'trials_2.thisRepN'
p7138
I1
sS'trials_2.thisTrialN'
p7139
I0
sS'trials.thisRepN'
p7140
I42
sS'trials_2.thisTrial'
p7141
NsS'trials.thisN'
p7142
I84
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7143
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7144
I0
sS'trials_2.thisN'
p7145
I1
sa(dp7146
g20
g21
sS'trials.thisIndex'
p7147
g36
(g38
S'\x01\x00\x00\x00'
tRp7148
sg22
V
sS'trials_2.thisRepN'
p7149
I1
sS'trials_2.thisTrialN'
p7150
I0
sS'trials.thisRepN'
p7151
I42
sS'trials_2.thisTrial'
p7152
NsS'trials.thisN'
p7153
I85
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7154
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7155
I1
sS'trials_2.thisN'
p7156
I1
sa(dp7157
g20
g21
sS'trials.thisIndex'
p7158
g36
(g38
S'\x00\x00\x00\x00'
tRp7159
sg22
V
sS'trials_2.thisRepN'
p7160
I1
sS'trials_2.thisTrialN'
p7161
I0
sS'trials.thisRepN'
p7162
I43
sS'trials_2.thisTrial'
p7163
NsS'trials.thisN'
p7164
I86
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7165
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7166
I0
sS'trials_2.thisN'
p7167
I1
sa(dp7168
g20
g21
sS'trials.thisIndex'
p7169
g36
(g38
S'\x01\x00\x00\x00'
tRp7170
sg22
V
sS'trials_2.thisRepN'
p7171
I1
sS'trials_2.thisTrialN'
p7172
I0
sS'trials.thisRepN'
p7173
I43
sS'trials_2.thisTrial'
p7174
NsS'trials.thisN'
p7175
I87
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7176
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7177
I1
sS'trials_2.thisN'
p7178
I1
sa(dp7179
g20
g21
sS'trials.thisIndex'
p7180
g36
(g38
S'\x00\x00\x00\x00'
tRp7181
sg22
V
sS'trials_2.thisRepN'
p7182
I1
sS'trials_2.thisTrialN'
p7183
I0
sS'trials.thisRepN'
p7184
I44
sS'trials_2.thisTrial'
p7185
NsS'trials.thisN'
p7186
I88
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7187
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7188
I0
sS'trials_2.thisN'
p7189
I1
sa(dp7190
g20
g21
sS'trials.thisIndex'
p7191
g36
(g38
S'\x01\x00\x00\x00'
tRp7192
sg22
V
sS'trials_2.thisRepN'
p7193
I1
sS'trials_2.thisTrialN'
p7194
I0
sS'trials.thisRepN'
p7195
I44
sS'trials_2.thisTrial'
p7196
NsS'trials.thisN'
p7197
I89
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7198
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7199
I1
sS'trials_2.thisN'
p7200
I1
sa(dp7201
g20
g21
sS'trials.thisIndex'
p7202
g36
(g38
S'\x00\x00\x00\x00'
tRp7203
sg22
V
sS'trials_2.thisRepN'
p7204
I1
sS'trials_2.thisTrialN'
p7205
I0
sS'trials.thisRepN'
p7206
I45
sS'trials_2.thisTrial'
p7207
NsS'trials.thisN'
p7208
I90
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7209
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7210
I0
sS'trials_2.thisN'
p7211
I1
sa(dp7212
g20
g21
sS'trials.thisIndex'
p7213
g36
(g38
S'\x01\x00\x00\x00'
tRp7214
sg22
V
sS'trials_2.thisRepN'
p7215
I1
sS'trials_2.thisTrialN'
p7216
I0
sS'trials.thisRepN'
p7217
I45
sS'trials_2.thisTrial'
p7218
NsS'trials.thisN'
p7219
I91
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7220
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7221
I1
sS'trials_2.thisN'
p7222
I1
sa(dp7223
g20
g21
sS'trials.thisIndex'
p7224
g36
(g38
S'\x00\x00\x00\x00'
tRp7225
sg22
V
sS'trials_2.thisRepN'
p7226
I1
sS'trials_2.thisTrialN'
p7227
I0
sS'trials.thisRepN'
p7228
I46
sS'trials_2.thisTrial'
p7229
NsS'trials.thisN'
p7230
I92
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7231
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7232
I0
sS'trials_2.thisN'
p7233
I1
sa(dp7234
g20
g21
sS'trials.thisIndex'
p7235
g36
(g38
S'\x01\x00\x00\x00'
tRp7236
sg22
V
sS'trials_2.thisRepN'
p7237
I1
sS'trials_2.thisTrialN'
p7238
I0
sS'trials.thisRepN'
p7239
I46
sS'trials_2.thisTrial'
p7240
NsS'trials.thisN'
p7241
I93
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7242
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7243
I1
sS'trials_2.thisN'
p7244
I1
sa(dp7245
g20
g21
sS'trials.thisIndex'
p7246
g36
(g38
S'\x00\x00\x00\x00'
tRp7247
sg22
V
sS'trials_2.thisRepN'
p7248
I1
sS'trials_2.thisTrialN'
p7249
I0
sS'trials.thisRepN'
p7250
I47
sS'trials_2.thisTrial'
p7251
NsS'trials.thisN'
p7252
I94
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7253
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7254
I0
sS'trials_2.thisN'
p7255
I1
sa(dp7256
g20
g21
sS'trials.thisIndex'
p7257
g36
(g38
S'\x01\x00\x00\x00'
tRp7258
sg22
V
sS'trials_2.thisRepN'
p7259
I1
sS'trials_2.thisTrialN'
p7260
I0
sS'trials.thisRepN'
p7261
I47
sS'trials_2.thisTrial'
p7262
NsS'trials.thisN'
p7263
I95
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7264
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7265
I1
sS'trials_2.thisN'
p7266
I1
sa(dp7267
g20
g21
sS'trials.thisIndex'
p7268
g36
(g38
S'\x00\x00\x00\x00'
tRp7269
sg22
V
sS'trials_2.thisRepN'
p7270
I1
sS'trials_2.thisTrialN'
p7271
I0
sS'trials.thisRepN'
p7272
I48
sS'trials_2.thisTrial'
p7273
NsS'trials.thisN'
p7274
I96
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7275
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7276
I0
sS'trials_2.thisN'
p7277
I1
sa(dp7278
g20
g21
sS'trials.thisIndex'
p7279
g36
(g38
S'\x01\x00\x00\x00'
tRp7280
sg22
V
sS'trials_2.thisRepN'
p7281
I1
sS'trials_2.thisTrialN'
p7282
I0
sS'trials.thisRepN'
p7283
I48
sS'trials_2.thisTrial'
p7284
NsS'trials.thisN'
p7285
I97
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7286
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7287
I1
sS'trials_2.thisN'
p7288
I1
sa(dp7289
g20
g21
sS'trials.thisIndex'
p7290
g36
(g38
S'\x00\x00\x00\x00'
tRp7291
sg22
V
sS'trials_2.thisRepN'
p7292
I1
sS'trials_2.thisTrialN'
p7293
I0
sS'trials.thisRepN'
p7294
I49
sS'trials_2.thisTrial'
p7295
NsS'trials.thisN'
p7296
I98
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7297
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7298
I0
sS'trials_2.thisN'
p7299
I1
sa(dp7300
g20
g21
sS'trials.thisIndex'
p7301
g36
(g38
S'\x01\x00\x00\x00'
tRp7302
sg22
V
sS'trials_2.thisRepN'
p7303
I1
sS'trials_2.thisTrialN'
p7304
I0
sS'trials.thisRepN'
p7305
I49
sS'trials_2.thisTrial'
p7306
NsS'trials.thisN'
p7307
I99
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7308
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7309
I1
sS'trials_2.thisN'
p7310
I1
sa(dp7311
g20
g21
sS'trials.thisIndex'
p7312
g36
(g38
S'\x00\x00\x00\x00'
tRp7313
sg22
V
sS'trials_2.thisRepN'
p7314
I1
sS'trials_2.thisTrialN'
p7315
I0
sS'trials.thisRepN'
p7316
I50
sS'trials_2.thisTrial'
p7317
NsS'trials.thisN'
p7318
I100
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7319
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7320
I0
sS'trials_2.thisN'
p7321
I1
sa(dp7322
g20
g21
sS'trials.thisIndex'
p7323
g36
(g38
S'\x01\x00\x00\x00'
tRp7324
sg22
V
sS'trials_2.thisRepN'
p7325
I1
sS'trials_2.thisTrialN'
p7326
I0
sS'trials.thisRepN'
p7327
I50
sS'trials_2.thisTrial'
p7328
NsS'trials.thisN'
p7329
I101
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7330
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7331
I1
sS'trials_2.thisN'
p7332
I1
sa(dp7333
g20
g21
sS'trials.thisIndex'
p7334
g36
(g38
S'\x00\x00\x00\x00'
tRp7335
sg22
V
sS'trials_2.thisRepN'
p7336
I1
sS'trials_2.thisTrialN'
p7337
I0
sS'trials.thisRepN'
p7338
I51
sS'trials_2.thisTrial'
p7339
NsS'trials.thisN'
p7340
I102
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7341
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7342
I0
sS'trials_2.thisN'
p7343
I1
sa(dp7344
g20
g21
sS'trials.thisIndex'
p7345
g36
(g38
S'\x01\x00\x00\x00'
tRp7346
sg22
V
sS'trials_2.thisRepN'
p7347
I1
sS'trials_2.thisTrialN'
p7348
I0
sS'trials.thisRepN'
p7349
I51
sS'trials_2.thisTrial'
p7350
NsS'trials.thisN'
p7351
I103
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7352
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7353
I1
sS'trials_2.thisN'
p7354
I1
sa(dp7355
g20
g21
sS'trials.thisIndex'
p7356
g36
(g38
S'\x00\x00\x00\x00'
tRp7357
sg22
V
sS'trials_2.thisRepN'
p7358
I1
sS'trials_2.thisTrialN'
p7359
I0
sS'trials.thisRepN'
p7360
I52
sS'trials_2.thisTrial'
p7361
NsS'trials.thisN'
p7362
I104
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7363
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7364
I0
sS'trials_2.thisN'
p7365
I1
sa(dp7366
g20
g21
sS'trials.thisIndex'
p7367
g36
(g38
S'\x01\x00\x00\x00'
tRp7368
sg22
V
sS'trials_2.thisRepN'
p7369
I1
sS'trials_2.thisTrialN'
p7370
I0
sS'trials.thisRepN'
p7371
I52
sS'trials_2.thisTrial'
p7372
NsS'trials.thisN'
p7373
I105
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7374
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7375
I1
sS'trials_2.thisN'
p7376
I1
sa(dp7377
g20
g21
sS'trials.thisIndex'
p7378
g36
(g38
S'\x00\x00\x00\x00'
tRp7379
sg22
V
sS'trials_2.thisRepN'
p7380
I1
sS'trials_2.thisTrialN'
p7381
I0
sS'trials.thisRepN'
p7382
I53
sS'trials_2.thisTrial'
p7383
NsS'trials.thisN'
p7384
I106
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7385
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7386
I0
sS'trials_2.thisN'
p7387
I1
sa(dp7388
g20
g21
sS'trials.thisIndex'
p7389
g36
(g38
S'\x01\x00\x00\x00'
tRp7390
sg22
V
sS'trials_2.thisRepN'
p7391
I1
sS'trials_2.thisTrialN'
p7392
I0
sS'trials.thisRepN'
p7393
I53
sS'trials_2.thisTrial'
p7394
NsS'trials.thisN'
p7395
I107
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7396
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7397
I1
sS'trials_2.thisN'
p7398
I1
sa(dp7399
g20
g21
sS'trials.thisIndex'
p7400
g36
(g38
S'\x00\x00\x00\x00'
tRp7401
sg22
V
sS'trials_2.thisRepN'
p7402
I1
sS'trials_2.thisTrialN'
p7403
I0
sS'trials.thisRepN'
p7404
I54
sS'trials_2.thisTrial'
p7405
NsS'trials.thisN'
p7406
I108
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7407
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7408
I0
sS'trials_2.thisN'
p7409
I1
sa(dp7410
g20
g21
sS'trials.thisIndex'
p7411
g36
(g38
S'\x01\x00\x00\x00'
tRp7412
sg22
V
sS'trials_2.thisRepN'
p7413
I1
sS'trials_2.thisTrialN'
p7414
I0
sS'trials.thisRepN'
p7415
I54
sS'trials_2.thisTrial'
p7416
NsS'trials.thisN'
p7417
I109
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7418
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7419
I1
sS'trials_2.thisN'
p7420
I1
sa(dp7421
g20
g21
sS'trials.thisIndex'
p7422
g36
(g38
S'\x00\x00\x00\x00'
tRp7423
sg22
V
sS'trials_2.thisRepN'
p7424
I1
sS'trials_2.thisTrialN'
p7425
I0
sS'trials.thisRepN'
p7426
I55
sS'trials_2.thisTrial'
p7427
NsS'trials.thisN'
p7428
I110
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7429
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7430
I0
sS'trials_2.thisN'
p7431
I1
sa(dp7432
g20
g21
sS'trials.thisIndex'
p7433
g36
(g38
S'\x01\x00\x00\x00'
tRp7434
sg22
V
sS'trials_2.thisRepN'
p7435
I1
sS'trials_2.thisTrialN'
p7436
I0
sS'trials.thisRepN'
p7437
I55
sS'trials_2.thisTrial'
p7438
NsS'trials.thisN'
p7439
I111
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7440
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7441
I1
sS'trials_2.thisN'
p7442
I1
sa(dp7443
g20
g21
sS'trials.thisIndex'
p7444
g36
(g38
S'\x00\x00\x00\x00'
tRp7445
sg22
V
sS'trials_2.thisRepN'
p7446
I1
sS'trials_2.thisTrialN'
p7447
I0
sS'trials.thisRepN'
p7448
I56
sS'trials_2.thisTrial'
p7449
NsS'trials.thisN'
p7450
I112
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7451
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7452
I0
sS'trials_2.thisN'
p7453
I1
sa(dp7454
g20
g21
sS'trials.thisIndex'
p7455
g36
(g38
S'\x01\x00\x00\x00'
tRp7456
sg22
V
sS'trials_2.thisRepN'
p7457
I1
sS'trials_2.thisTrialN'
p7458
I0
sS'trials.thisRepN'
p7459
I56
sS'trials_2.thisTrial'
p7460
NsS'trials.thisN'
p7461
I113
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7462
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7463
I1
sS'trials_2.thisN'
p7464
I1
sa(dp7465
g20
g21
sS'trials.thisIndex'
p7466
g36
(g38
S'\x00\x00\x00\x00'
tRp7467
sg22
V
sS'trials_2.thisRepN'
p7468
I1
sS'trials_2.thisTrialN'
p7469
I0
sS'trials.thisRepN'
p7470
I57
sS'trials_2.thisTrial'
p7471
NsS'trials.thisN'
p7472
I114
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7473
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7474
I0
sS'trials_2.thisN'
p7475
I1
sa(dp7476
g20
g21
sS'trials.thisIndex'
p7477
g36
(g38
S'\x01\x00\x00\x00'
tRp7478
sg22
V
sS'trials_2.thisRepN'
p7479
I1
sS'trials_2.thisTrialN'
p7480
I0
sS'trials.thisRepN'
p7481
I57
sS'trials_2.thisTrial'
p7482
NsS'trials.thisN'
p7483
I115
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7484
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7485
I1
sS'trials_2.thisN'
p7486
I1
sa(dp7487
g20
g21
sS'trials.thisIndex'
p7488
g36
(g38
S'\x00\x00\x00\x00'
tRp7489
sg22
V
sS'trials_2.thisRepN'
p7490
I1
sS'trials_2.thisTrialN'
p7491
I0
sS'trials.thisRepN'
p7492
I58
sS'trials_2.thisTrial'
p7493
NsS'trials.thisN'
p7494
I116
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7495
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7496
I0
sS'trials_2.thisN'
p7497
I1
sa(dp7498
g20
g21
sS'trials.thisIndex'
p7499
g36
(g38
S'\x01\x00\x00\x00'
tRp7500
sg22
V
sS'trials_2.thisRepN'
p7501
I1
sS'trials_2.thisTrialN'
p7502
I0
sS'trials.thisRepN'
p7503
I58
sS'trials_2.thisTrial'
p7504
NsS'trials.thisN'
p7505
I117
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7506
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7507
I1
sS'trials_2.thisN'
p7508
I1
sa(dp7509
g20
g21
sS'trials.thisIndex'
p7510
g36
(g38
S'\x00\x00\x00\x00'
tRp7511
sg22
V
sS'trials_2.thisRepN'
p7512
I1
sS'trials_2.thisTrialN'
p7513
I0
sS'trials.thisRepN'
p7514
I59
sS'trials_2.thisTrial'
p7515
NsS'trials.thisN'
p7516
I118
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7517
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7518
I0
sS'trials_2.thisN'
p7519
I1
sa(dp7520
g20
g21
sS'trials.thisIndex'
p7521
g36
(g38
S'\x01\x00\x00\x00'
tRp7522
sg22
V
sS'trials_2.thisRepN'
p7523
I1
sS'trials_2.thisTrialN'
p7524
I0
sS'trials.thisRepN'
p7525
I59
sS'trials_2.thisTrial'
p7526
NsS'trials.thisN'
p7527
I119
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7528
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7529
I1
sS'trials_2.thisN'
p7530
I1
sa(dp7531
g20
g21
sS'trials.thisIndex'
p7532
g36
(g38
S'\x00\x00\x00\x00'
tRp7533
sg22
V
sS'trials_2.thisRepN'
p7534
I1
sS'trials_2.thisTrialN'
p7535
I0
sS'trials.thisRepN'
p7536
I60
sS'trials_2.thisTrial'
p7537
NsS'trials.thisN'
p7538
I120
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7539
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7540
I0
sS'trials_2.thisN'
p7541
I1
sa(dp7542
g20
g21
sS'trials.thisIndex'
p7543
g36
(g38
S'\x01\x00\x00\x00'
tRp7544
sg22
V
sS'trials_2.thisRepN'
p7545
I1
sS'trials_2.thisTrialN'
p7546
I0
sS'trials.thisRepN'
p7547
I60
sS'trials_2.thisTrial'
p7548
NsS'trials.thisN'
p7549
I121
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7550
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7551
I1
sS'trials_2.thisN'
p7552
I1
sa(dp7553
g20
g21
sS'trials.thisIndex'
p7554
g36
(g38
S'\x00\x00\x00\x00'
tRp7555
sg22
V
sS'trials_2.thisRepN'
p7556
I1
sS'trials_2.thisTrialN'
p7557
I0
sS'trials.thisRepN'
p7558
I61
sS'trials_2.thisTrial'
p7559
NsS'trials.thisN'
p7560
I122
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7561
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7562
I0
sS'trials_2.thisN'
p7563
I1
sa(dp7564
g20
g21
sS'trials.thisIndex'
p7565
g36
(g38
S'\x01\x00\x00\x00'
tRp7566
sg22
V
sS'trials_2.thisRepN'
p7567
I1
sS'trials_2.thisTrialN'
p7568
I0
sS'trials.thisRepN'
p7569
I61
sS'trials_2.thisTrial'
p7570
NsS'trials.thisN'
p7571
I123
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7572
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7573
I1
sS'trials_2.thisN'
p7574
I1
sa(dp7575
g20
g21
sS'trials.thisIndex'
p7576
g36
(g38
S'\x00\x00\x00\x00'
tRp7577
sg22
V
sS'trials_2.thisRepN'
p7578
I1
sS'trials_2.thisTrialN'
p7579
I0
sS'trials.thisRepN'
p7580
I62
sS'trials_2.thisTrial'
p7581
NsS'trials.thisN'
p7582
I124
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7583
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7584
I0
sS'trials_2.thisN'
p7585
I1
sa(dp7586
g20
g21
sS'trials.thisIndex'
p7587
g36
(g38
S'\x01\x00\x00\x00'
tRp7588
sg22
V
sS'trials_2.thisRepN'
p7589
I1
sS'trials_2.thisTrialN'
p7590
I0
sS'trials.thisRepN'
p7591
I62
sS'trials_2.thisTrial'
p7592
NsS'trials.thisN'
p7593
I125
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7594
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7595
I1
sS'trials_2.thisN'
p7596
I1
sa(dp7597
g20
g21
sS'trials.thisIndex'
p7598
g36
(g38
S'\x00\x00\x00\x00'
tRp7599
sg22
V
sS'trials_2.thisRepN'
p7600
I1
sS'trials_2.thisTrialN'
p7601
I0
sS'trials.thisRepN'
p7602
I63
sS'trials_2.thisTrial'
p7603
NsS'trials.thisN'
p7604
I126
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7605
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7606
I0
sS'trials_2.thisN'
p7607
I1
sa(dp7608
g20
g21
sS'trials.thisIndex'
p7609
g36
(g38
S'\x01\x00\x00\x00'
tRp7610
sg22
V
sS'trials_2.thisRepN'
p7611
I1
sS'trials_2.thisTrialN'
p7612
I0
sS'trials.thisRepN'
p7613
I63
sS'trials_2.thisTrial'
p7614
NsS'trials.thisN'
p7615
I127
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7616
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7617
I1
sS'trials_2.thisN'
p7618
I1
sa(dp7619
g20
g21
sS'trials.thisIndex'
p7620
g36
(g38
S'\x00\x00\x00\x00'
tRp7621
sg22
V
sS'trials_2.thisRepN'
p7622
I1
sS'trials_2.thisTrialN'
p7623
I0
sS'trials.thisRepN'
p7624
I64
sS'trials_2.thisTrial'
p7625
NsS'trials.thisN'
p7626
I128
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7627
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7628
I0
sS'trials_2.thisN'
p7629
I1
sa(dp7630
g20
g21
sS'trials.thisIndex'
p7631
g36
(g38
S'\x01\x00\x00\x00'
tRp7632
sg22
V
sS'trials_2.thisRepN'
p7633
I1
sS'trials_2.thisTrialN'
p7634
I0
sS'trials.thisRepN'
p7635
I64
sS'trials_2.thisTrial'
p7636
NsS'trials.thisN'
p7637
I129
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7638
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7639
I1
sS'trials_2.thisN'
p7640
I1
sa(dp7641
g20
g21
sS'trials.thisIndex'
p7642
g36
(g38
S'\x00\x00\x00\x00'
tRp7643
sg22
V
sS'trials_2.thisRepN'
p7644
I1
sS'trials_2.thisTrialN'
p7645
I0
sS'trials.thisRepN'
p7646
I65
sS'trials_2.thisTrial'
p7647
NsS'trials.thisN'
p7648
I130
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7649
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7650
I0
sS'trials_2.thisN'
p7651
I1
sa(dp7652
g20
g21
sS'trials.thisIndex'
p7653
g36
(g38
S'\x01\x00\x00\x00'
tRp7654
sg22
V
sS'trials_2.thisRepN'
p7655
I1
sS'trials_2.thisTrialN'
p7656
I0
sS'trials.thisRepN'
p7657
I65
sS'trials_2.thisTrial'
p7658
NsS'trials.thisN'
p7659
I131
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7660
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7661
I1
sS'trials_2.thisN'
p7662
I1
sa(dp7663
g20
g21
sS'trials.thisIndex'
p7664
g36
(g38
S'\x00\x00\x00\x00'
tRp7665
sg22
V
sS'trials_2.thisRepN'
p7666
I1
sS'trials_2.thisTrialN'
p7667
I0
sS'trials.thisRepN'
p7668
I66
sS'trials_2.thisTrial'
p7669
NsS'trials.thisN'
p7670
I132
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7671
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7672
I0
sS'trials_2.thisN'
p7673
I1
sa(dp7674
g20
g21
sS'trials.thisIndex'
p7675
g36
(g38
S'\x01\x00\x00\x00'
tRp7676
sg22
V
sS'trials_2.thisRepN'
p7677
I1
sS'trials_2.thisTrialN'
p7678
I0
sS'trials.thisRepN'
p7679
I66
sS'trials_2.thisTrial'
p7680
NsS'trials.thisN'
p7681
I133
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7682
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7683
I1
sS'trials_2.thisN'
p7684
I1
sa(dp7685
g20
g21
sS'trials.thisIndex'
p7686
g36
(g38
S'\x00\x00\x00\x00'
tRp7687
sg22
V
sS'trials_2.thisRepN'
p7688
I1
sS'trials_2.thisTrialN'
p7689
I0
sS'trials.thisRepN'
p7690
I67
sS'trials_2.thisTrial'
p7691
NsS'trials.thisN'
p7692
I134
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7693
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7694
I0
sS'trials_2.thisN'
p7695
I1
sa(dp7696
g20
g21
sS'trials.thisIndex'
p7697
g36
(g38
S'\x01\x00\x00\x00'
tRp7698
sg22
V
sS'trials_2.thisRepN'
p7699
I1
sS'trials_2.thisTrialN'
p7700
I0
sS'trials.thisRepN'
p7701
I67
sS'trials_2.thisTrial'
p7702
NsS'trials.thisN'
p7703
I135
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7704
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7705
I1
sS'trials_2.thisN'
p7706
I1
sa(dp7707
g20
g21
sS'trials.thisIndex'
p7708
g36
(g38
S'\x00\x00\x00\x00'
tRp7709
sg22
V
sS'trials_2.thisRepN'
p7710
I1
sS'trials_2.thisTrialN'
p7711
I0
sS'trials.thisRepN'
p7712
I68
sS'trials_2.thisTrial'
p7713
NsS'trials.thisN'
p7714
I136
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7715
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7716
I0
sS'trials_2.thisN'
p7717
I1
sa(dp7718
g20
g21
sS'trials.thisIndex'
p7719
g36
(g38
S'\x01\x00\x00\x00'
tRp7720
sg22
V
sS'trials_2.thisRepN'
p7721
I1
sS'trials_2.thisTrialN'
p7722
I0
sS'trials.thisRepN'
p7723
I68
sS'trials_2.thisTrial'
p7724
NsS'trials.thisN'
p7725
I137
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7726
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7727
I1
sS'trials_2.thisN'
p7728
I1
sa(dp7729
g20
g21
sS'trials.thisIndex'
p7730
g36
(g38
S'\x00\x00\x00\x00'
tRp7731
sg22
V
sS'trials_2.thisRepN'
p7732
I1
sS'trials_2.thisTrialN'
p7733
I0
sS'trials.thisRepN'
p7734
I69
sS'trials_2.thisTrial'
p7735
NsS'trials.thisN'
p7736
I138
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7737
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7738
I0
sS'trials_2.thisN'
p7739
I1
sa(dp7740
g20
g21
sS'trials.thisIndex'
p7741
g36
(g38
S'\x01\x00\x00\x00'
tRp7742
sg22
V
sS'trials_2.thisRepN'
p7743
I1
sS'trials_2.thisTrialN'
p7744
I0
sS'trials.thisRepN'
p7745
I69
sS'trials_2.thisTrial'
p7746
NsS'trials.thisN'
p7747
I139
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7748
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7749
I1
sS'trials_2.thisN'
p7750
I1
sa(dp7751
g20
g21
sS'trials.thisIndex'
p7752
g36
(g38
S'\x00\x00\x00\x00'
tRp7753
sg22
V
sS'trials_2.thisRepN'
p7754
I1
sS'trials_2.thisTrialN'
p7755
I0
sS'trials.thisRepN'
p7756
I70
sS'trials_2.thisTrial'
p7757
NsS'trials.thisN'
p7758
I140
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7759
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7760
I0
sS'trials_2.thisN'
p7761
I1
sa(dp7762
g20
g21
sS'trials.thisIndex'
p7763
g36
(g38
S'\x01\x00\x00\x00'
tRp7764
sg22
V
sS'trials_2.thisRepN'
p7765
I1
sS'trials_2.thisTrialN'
p7766
I0
sS'trials.thisRepN'
p7767
I70
sS'trials_2.thisTrial'
p7768
NsS'trials.thisN'
p7769
I141
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7770
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7771
I1
sS'trials_2.thisN'
p7772
I1
sa(dp7773
g20
g21
sS'trials.thisIndex'
p7774
g36
(g38
S'\x00\x00\x00\x00'
tRp7775
sg22
V
sS'trials_2.thisRepN'
p7776
I1
sS'trials_2.thisTrialN'
p7777
I0
sS'trials.thisRepN'
p7778
I71
sS'trials_2.thisTrial'
p7779
NsS'trials.thisN'
p7780
I142
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7781
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7782
I0
sS'trials_2.thisN'
p7783
I1
sa(dp7784
g20
g21
sS'trials.thisIndex'
p7785
g36
(g38
S'\x01\x00\x00\x00'
tRp7786
sg22
V
sS'trials_2.thisRepN'
p7787
I1
sS'trials_2.thisTrialN'
p7788
I0
sS'trials.thisRepN'
p7789
I71
sS'trials_2.thisTrial'
p7790
NsS'trials.thisN'
p7791
I143
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7792
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7793
I1
sS'trials_2.thisN'
p7794
I1
sa(dp7795
g20
g21
sS'trials.thisIndex'
p7796
g36
(g38
S'\x00\x00\x00\x00'
tRp7797
sg22
V
sS'trials_2.thisRepN'
p7798
I1
sS'trials_2.thisTrialN'
p7799
I0
sS'trials.thisRepN'
p7800
I72
sS'trials_2.thisTrial'
p7801
NsS'trials.thisN'
p7802
I144
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7803
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7804
I0
sS'trials_2.thisN'
p7805
I1
sa(dp7806
g20
g21
sS'trials.thisIndex'
p7807
g36
(g38
S'\x01\x00\x00\x00'
tRp7808
sg22
V
sS'trials_2.thisRepN'
p7809
I1
sS'trials_2.thisTrialN'
p7810
I0
sS'trials.thisRepN'
p7811
I72
sS'trials_2.thisTrial'
p7812
NsS'trials.thisN'
p7813
I145
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7814
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7815
I1
sS'trials_2.thisN'
p7816
I1
sa(dp7817
g20
g21
sS'trials.thisIndex'
p7818
g36
(g38
S'\x00\x00\x00\x00'
tRp7819
sg22
V
sS'trials_2.thisRepN'
p7820
I1
sS'trials_2.thisTrialN'
p7821
I0
sS'trials.thisRepN'
p7822
I73
sS'trials_2.thisTrial'
p7823
NsS'trials.thisN'
p7824
I146
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7825
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7826
I0
sS'trials_2.thisN'
p7827
I1
sa(dp7828
g20
g21
sS'trials.thisIndex'
p7829
g36
(g38
S'\x01\x00\x00\x00'
tRp7830
sg22
V
sS'trials_2.thisRepN'
p7831
I1
sS'trials_2.thisTrialN'
p7832
I0
sS'trials.thisRepN'
p7833
I73
sS'trials_2.thisTrial'
p7834
NsS'trials.thisN'
p7835
I147
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7836
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7837
I1
sS'trials_2.thisN'
p7838
I1
sa(dp7839
g20
g21
sS'trials.thisIndex'
p7840
g36
(g38
S'\x00\x00\x00\x00'
tRp7841
sg22
V
sS'trials_2.thisRepN'
p7842
I1
sS'trials_2.thisTrialN'
p7843
I0
sS'trials.thisRepN'
p7844
I74
sS'trials_2.thisTrial'
p7845
NsS'trials.thisN'
p7846
I148
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7847
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7848
I0
sS'trials_2.thisN'
p7849
I1
sa(dp7850
g20
g21
sS'trials.thisIndex'
p7851
g36
(g38
S'\x01\x00\x00\x00'
tRp7852
sg22
V
sS'trials_2.thisRepN'
p7853
I1
sS'trials_2.thisTrialN'
p7854
I0
sS'trials.thisRepN'
p7855
I74
sS'trials_2.thisTrial'
p7856
NsS'trials.thisN'
p7857
I149
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7858
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7859
I1
sS'trials_2.thisN'
p7860
I1
sa(dp7861
g20
g21
sS'trials.thisIndex'
p7862
g36
(g38
S'\x00\x00\x00\x00'
tRp7863
sg22
V
sS'trials_2.thisRepN'
p7864
I1
sS'trials_2.thisTrialN'
p7865
I0
sS'trials.thisRepN'
p7866
I75
sS'trials_2.thisTrial'
p7867
NsS'trials.thisN'
p7868
I150
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7869
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7870
I0
sS'trials_2.thisN'
p7871
I1
sa(dp7872
g20
g21
sS'trials.thisIndex'
p7873
g36
(g38
S'\x01\x00\x00\x00'
tRp7874
sg22
V
sS'trials_2.thisRepN'
p7875
I1
sS'trials_2.thisTrialN'
p7876
I0
sS'trials.thisRepN'
p7877
I75
sS'trials_2.thisTrial'
p7878
NsS'trials.thisN'
p7879
I151
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7880
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7881
I1
sS'trials_2.thisN'
p7882
I1
sa(dp7883
g20
g21
sS'trials.thisIndex'
p7884
g36
(g38
S'\x00\x00\x00\x00'
tRp7885
sg22
V
sS'trials_2.thisRepN'
p7886
I1
sS'trials_2.thisTrialN'
p7887
I0
sS'trials.thisRepN'
p7888
I76
sS'trials_2.thisTrial'
p7889
NsS'trials.thisN'
p7890
I152
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7891
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7892
I0
sS'trials_2.thisN'
p7893
I1
sa(dp7894
g20
g21
sS'trials.thisIndex'
p7895
g36
(g38
S'\x01\x00\x00\x00'
tRp7896
sg22
V
sS'trials_2.thisRepN'
p7897
I1
sS'trials_2.thisTrialN'
p7898
I0
sS'trials.thisRepN'
p7899
I76
sS'trials_2.thisTrial'
p7900
NsS'trials.thisN'
p7901
I153
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7902
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7903
I1
sS'trials_2.thisN'
p7904
I1
sa(dp7905
g20
g21
sS'trials.thisIndex'
p7906
g36
(g38
S'\x00\x00\x00\x00'
tRp7907
sg22
V
sS'trials_2.thisRepN'
p7908
I1
sS'trials_2.thisTrialN'
p7909
I0
sS'trials.thisRepN'
p7910
I77
sS'trials_2.thisTrial'
p7911
NsS'trials.thisN'
p7912
I154
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7913
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7914
I0
sS'trials_2.thisN'
p7915
I1
sa(dp7916
g20
g21
sS'trials.thisIndex'
p7917
g36
(g38
S'\x01\x00\x00\x00'
tRp7918
sg22
V
sS'trials_2.thisRepN'
p7919
I1
sS'trials_2.thisTrialN'
p7920
I0
sS'trials.thisRepN'
p7921
I77
sS'trials_2.thisTrial'
p7922
NsS'trials.thisN'
p7923
I155
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7924
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7925
I1
sS'trials_2.thisN'
p7926
I1
sa(dp7927
g20
g21
sS'trials.thisIndex'
p7928
g36
(g38
S'\x00\x00\x00\x00'
tRp7929
sg22
V
sS'trials_2.thisRepN'
p7930
I1
sS'trials_2.thisTrialN'
p7931
I0
sS'trials.thisRepN'
p7932
I78
sS'trials_2.thisTrial'
p7933
NsS'trials.thisN'
p7934
I156
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7935
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7936
I0
sS'trials_2.thisN'
p7937
I1
sa(dp7938
g20
g21
sS'trials.thisIndex'
p7939
g36
(g38
S'\x01\x00\x00\x00'
tRp7940
sg22
V
sS'trials_2.thisRepN'
p7941
I1
sS'trials_2.thisTrialN'
p7942
I0
sS'trials.thisRepN'
p7943
I78
sS'trials_2.thisTrial'
p7944
NsS'trials.thisN'
p7945
I157
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7946
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7947
I1
sS'trials_2.thisN'
p7948
I1
sa(dp7949
g20
g21
sS'trials.thisIndex'
p7950
g36
(g38
S'\x00\x00\x00\x00'
tRp7951
sg22
V
sS'trials_2.thisRepN'
p7952
I1
sS'trials_2.thisTrialN'
p7953
I0
sS'trials.thisRepN'
p7954
I79
sS'trials_2.thisTrial'
p7955
NsS'trials.thisN'
p7956
I158
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7957
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7958
I0
sS'trials_2.thisN'
p7959
I1
sa(dp7960
g20
g21
sS'trials.thisIndex'
p7961
g36
(g38
S'\x01\x00\x00\x00'
tRp7962
sg22
V
sS'trials_2.thisRepN'
p7963
I1
sS'trials_2.thisTrialN'
p7964
I0
sS'trials.thisRepN'
p7965
I79
sS'trials_2.thisTrial'
p7966
NsS'trials.thisN'
p7967
I159
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7968
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7969
I1
sS'trials_2.thisN'
p7970
I1
sa(dp7971
g20
g21
sS'trials.thisIndex'
p7972
g36
(g38
S'\x00\x00\x00\x00'
tRp7973
sg22
V
sS'trials_2.thisRepN'
p7974
I1
sS'trials_2.thisTrialN'
p7975
I0
sS'trials.thisRepN'
p7976
I80
sS'trials_2.thisTrial'
p7977
NsS'trials.thisN'
p7978
I160
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7979
g6216
sg6217
g6218
sS'trials.thisTrialN'
p7980
I0
sS'trials_2.thisN'
p7981
I1
sa(dp7982
g20
g21
sS'trials.thisIndex'
p7983
g36
(g38
S'\x01\x00\x00\x00'
tRp7984
sg22
V
sS'trials_2.thisRepN'
p7985
I1
sS'trials_2.thisTrialN'
p7986
I0
sS'trials.thisRepN'
p7987
I80
sS'trials_2.thisTrial'
p7988
NsS'trials.thisN'
p7989
I161
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p7990
g6216
sg6217
g6230
sS'trials.thisTrialN'
p7991
I1
sS'trials_2.thisN'
p7992
I1
sa(dp7993
g20
g21
sS'trials.thisIndex'
p7994
g36
(g38
S'\x00\x00\x00\x00'
tRp7995
sg22
V
sS'trials_2.thisRepN'
p7996
I1
sS'trials_2.thisTrialN'
p7997
I0
sS'trials.thisRepN'
p7998
I81
sS'trials_2.thisTrial'
p7999
NsS'trials.thisN'
p8000
I162
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8001
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8002
I0
sS'trials_2.thisN'
p8003
I1
sa(dp8004
g20
g21
sS'trials.thisIndex'
p8005
g36
(g38
S'\x01\x00\x00\x00'
tRp8006
sg22
V
sS'trials_2.thisRepN'
p8007
I1
sS'trials_2.thisTrialN'
p8008
I0
sS'trials.thisRepN'
p8009
I81
sS'trials_2.thisTrial'
p8010
NsS'trials.thisN'
p8011
I163
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8012
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8013
I1
sS'trials_2.thisN'
p8014
I1
sa(dp8015
g20
g21
sS'trials.thisIndex'
p8016
g36
(g38
S'\x00\x00\x00\x00'
tRp8017
sg22
V
sS'trials_2.thisRepN'
p8018
I1
sS'trials_2.thisTrialN'
p8019
I0
sS'trials.thisRepN'
p8020
I82
sS'trials_2.thisTrial'
p8021
NsS'trials.thisN'
p8022
I164
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8023
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8024
I0
sS'trials_2.thisN'
p8025
I1
sa(dp8026
g20
g21
sS'trials.thisIndex'
p8027
g36
(g38
S'\x01\x00\x00\x00'
tRp8028
sg22
V
sS'trials_2.thisRepN'
p8029
I1
sS'trials_2.thisTrialN'
p8030
I0
sS'trials.thisRepN'
p8031
I82
sS'trials_2.thisTrial'
p8032
NsS'trials.thisN'
p8033
I165
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8034
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8035
I1
sS'trials_2.thisN'
p8036
I1
sa(dp8037
g20
g21
sS'trials.thisIndex'
p8038
g36
(g38
S'\x00\x00\x00\x00'
tRp8039
sg22
V
sS'trials_2.thisRepN'
p8040
I1
sS'trials_2.thisTrialN'
p8041
I0
sS'trials.thisRepN'
p8042
I83
sS'trials_2.thisTrial'
p8043
NsS'trials.thisN'
p8044
I166
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8045
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8046
I0
sS'trials_2.thisN'
p8047
I1
sa(dp8048
g20
g21
sS'trials.thisIndex'
p8049
g36
(g38
S'\x01\x00\x00\x00'
tRp8050
sg22
V
sS'trials_2.thisRepN'
p8051
I1
sS'trials_2.thisTrialN'
p8052
I0
sS'trials.thisRepN'
p8053
I83
sS'trials_2.thisTrial'
p8054
NsS'trials.thisN'
p8055
I167
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8056
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8057
I1
sS'trials_2.thisN'
p8058
I1
sa(dp8059
g20
g21
sS'trials.thisIndex'
p8060
g36
(g38
S'\x00\x00\x00\x00'
tRp8061
sg22
V
sS'trials_2.thisRepN'
p8062
I1
sS'trials_2.thisTrialN'
p8063
I0
sS'trials.thisRepN'
p8064
I84
sS'trials_2.thisTrial'
p8065
NsS'trials.thisN'
p8066
I168
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8067
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8068
I0
sS'trials_2.thisN'
p8069
I1
sa(dp8070
g20
g21
sS'trials.thisIndex'
p8071
g36
(g38
S'\x01\x00\x00\x00'
tRp8072
sg22
V
sS'trials_2.thisRepN'
p8073
I1
sS'trials_2.thisTrialN'
p8074
I0
sS'trials.thisRepN'
p8075
I84
sS'trials_2.thisTrial'
p8076
NsS'trials.thisN'
p8077
I169
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8078
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8079
I1
sS'trials_2.thisN'
p8080
I1
sa(dp8081
g20
g21
sS'trials.thisIndex'
p8082
g36
(g38
S'\x00\x00\x00\x00'
tRp8083
sg22
V
sS'trials_2.thisRepN'
p8084
I1
sS'trials_2.thisTrialN'
p8085
I0
sS'trials.thisRepN'
p8086
I85
sS'trials_2.thisTrial'
p8087
NsS'trials.thisN'
p8088
I170
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8089
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8090
I0
sS'trials_2.thisN'
p8091
I1
sa(dp8092
g20
g21
sS'trials.thisIndex'
p8093
g36
(g38
S'\x01\x00\x00\x00'
tRp8094
sg22
V
sS'trials_2.thisRepN'
p8095
I1
sS'trials_2.thisTrialN'
p8096
I0
sS'trials.thisRepN'
p8097
I85
sS'trials_2.thisTrial'
p8098
NsS'trials.thisN'
p8099
I171
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8100
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8101
I1
sS'trials_2.thisN'
p8102
I1
sa(dp8103
g20
g21
sS'trials.thisIndex'
p8104
g36
(g38
S'\x00\x00\x00\x00'
tRp8105
sg22
V
sS'trials_2.thisRepN'
p8106
I1
sS'trials_2.thisTrialN'
p8107
I0
sS'trials.thisRepN'
p8108
I86
sS'trials_2.thisTrial'
p8109
NsS'trials.thisN'
p8110
I172
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8111
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8112
I0
sS'trials_2.thisN'
p8113
I1
sa(dp8114
g20
g21
sS'trials.thisIndex'
p8115
g36
(g38
S'\x01\x00\x00\x00'
tRp8116
sg22
V
sS'trials_2.thisRepN'
p8117
I1
sS'trials_2.thisTrialN'
p8118
I0
sS'trials.thisRepN'
p8119
I86
sS'trials_2.thisTrial'
p8120
NsS'trials.thisN'
p8121
I173
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8122
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8123
I1
sS'trials_2.thisN'
p8124
I1
sa(dp8125
g20
g21
sS'trials.thisIndex'
p8126
g36
(g38
S'\x00\x00\x00\x00'
tRp8127
sg22
V
sS'trials_2.thisRepN'
p8128
I1
sS'trials_2.thisTrialN'
p8129
I0
sS'trials.thisRepN'
p8130
I87
sS'trials_2.thisTrial'
p8131
NsS'trials.thisN'
p8132
I174
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8133
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8134
I0
sS'trials_2.thisN'
p8135
I1
sa(dp8136
g20
g21
sS'trials.thisIndex'
p8137
g36
(g38
S'\x01\x00\x00\x00'
tRp8138
sg22
V
sS'trials_2.thisRepN'
p8139
I1
sS'trials_2.thisTrialN'
p8140
I0
sS'trials.thisRepN'
p8141
I87
sS'trials_2.thisTrial'
p8142
NsS'trials.thisN'
p8143
I175
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8144
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8145
I1
sS'trials_2.thisN'
p8146
I1
sa(dp8147
g20
g21
sS'trials.thisIndex'
p8148
g36
(g38
S'\x00\x00\x00\x00'
tRp8149
sg22
V
sS'trials_2.thisRepN'
p8150
I1
sS'trials_2.thisTrialN'
p8151
I0
sS'trials.thisRepN'
p8152
I88
sS'trials_2.thisTrial'
p8153
NsS'trials.thisN'
p8154
I176
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8155
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8156
I0
sS'trials_2.thisN'
p8157
I1
sa(dp8158
g20
g21
sS'trials.thisIndex'
p8159
g36
(g38
S'\x01\x00\x00\x00'
tRp8160
sg22
V
sS'trials_2.thisRepN'
p8161
I1
sS'trials_2.thisTrialN'
p8162
I0
sS'trials.thisRepN'
p8163
I88
sS'trials_2.thisTrial'
p8164
NsS'trials.thisN'
p8165
I177
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8166
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8167
I1
sS'trials_2.thisN'
p8168
I1
sa(dp8169
g20
g21
sS'trials.thisIndex'
p8170
g36
(g38
S'\x00\x00\x00\x00'
tRp8171
sg22
V
sS'trials_2.thisRepN'
p8172
I1
sS'trials_2.thisTrialN'
p8173
I0
sS'trials.thisRepN'
p8174
I89
sS'trials_2.thisTrial'
p8175
NsS'trials.thisN'
p8176
I178
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8177
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8178
I0
sS'trials_2.thisN'
p8179
I1
sa(dp8180
g20
g21
sS'trials.thisIndex'
p8181
g36
(g38
S'\x01\x00\x00\x00'
tRp8182
sg22
V
sS'trials_2.thisRepN'
p8183
I1
sS'trials_2.thisTrialN'
p8184
I0
sS'trials.thisRepN'
p8185
I89
sS'trials_2.thisTrial'
p8186
NsS'trials.thisN'
p8187
I179
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8188
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8189
I1
sS'trials_2.thisN'
p8190
I1
sa(dp8191
g20
g21
sS'trials.thisIndex'
p8192
g36
(g38
S'\x00\x00\x00\x00'
tRp8193
sg22
V
sS'trials_2.thisRepN'
p8194
I1
sS'trials_2.thisTrialN'
p8195
I0
sS'trials.thisRepN'
p8196
I90
sS'trials_2.thisTrial'
p8197
NsS'trials.thisN'
p8198
I180
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8199
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8200
I0
sS'trials_2.thisN'
p8201
I1
sa(dp8202
g20
g21
sS'trials.thisIndex'
p8203
g36
(g38
S'\x01\x00\x00\x00'
tRp8204
sg22
V
sS'trials_2.thisRepN'
p8205
I1
sS'trials_2.thisTrialN'
p8206
I0
sS'trials.thisRepN'
p8207
I90
sS'trials_2.thisTrial'
p8208
NsS'trials.thisN'
p8209
I181
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8210
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8211
I1
sS'trials_2.thisN'
p8212
I1
sa(dp8213
g20
g21
sS'trials.thisIndex'
p8214
g36
(g38
S'\x00\x00\x00\x00'
tRp8215
sg22
V
sS'trials_2.thisRepN'
p8216
I1
sS'trials_2.thisTrialN'
p8217
I0
sS'trials.thisRepN'
p8218
I91
sS'trials_2.thisTrial'
p8219
NsS'trials.thisN'
p8220
I182
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8221
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8222
I0
sS'trials_2.thisN'
p8223
I1
sa(dp8224
g20
g21
sS'trials.thisIndex'
p8225
g36
(g38
S'\x01\x00\x00\x00'
tRp8226
sg22
V
sS'trials_2.thisRepN'
p8227
I1
sS'trials_2.thisTrialN'
p8228
I0
sS'trials.thisRepN'
p8229
I91
sS'trials_2.thisTrial'
p8230
NsS'trials.thisN'
p8231
I183
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8232
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8233
I1
sS'trials_2.thisN'
p8234
I1
sa(dp8235
g20
g21
sS'trials.thisIndex'
p8236
g36
(g38
S'\x00\x00\x00\x00'
tRp8237
sg22
V
sS'trials_2.thisRepN'
p8238
I1
sS'trials_2.thisTrialN'
p8239
I0
sS'trials.thisRepN'
p8240
I92
sS'trials_2.thisTrial'
p8241
NsS'trials.thisN'
p8242
I184
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8243
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8244
I0
sS'trials_2.thisN'
p8245
I1
sa(dp8246
g20
g21
sS'trials.thisIndex'
p8247
g36
(g38
S'\x01\x00\x00\x00'
tRp8248
sg22
V
sS'trials_2.thisRepN'
p8249
I1
sS'trials_2.thisTrialN'
p8250
I0
sS'trials.thisRepN'
p8251
I92
sS'trials_2.thisTrial'
p8252
NsS'trials.thisN'
p8253
I185
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8254
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8255
I1
sS'trials_2.thisN'
p8256
I1
sa(dp8257
g20
g21
sS'trials.thisIndex'
p8258
g36
(g38
S'\x00\x00\x00\x00'
tRp8259
sg22
V
sS'trials_2.thisRepN'
p8260
I1
sS'trials_2.thisTrialN'
p8261
I0
sS'trials.thisRepN'
p8262
I93
sS'trials_2.thisTrial'
p8263
NsS'trials.thisN'
p8264
I186
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8265
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8266
I0
sS'trials_2.thisN'
p8267
I1
sa(dp8268
g20
g21
sS'trials.thisIndex'
p8269
g36
(g38
S'\x01\x00\x00\x00'
tRp8270
sg22
V
sS'trials_2.thisRepN'
p8271
I1
sS'trials_2.thisTrialN'
p8272
I0
sS'trials.thisRepN'
p8273
I93
sS'trials_2.thisTrial'
p8274
NsS'trials.thisN'
p8275
I187
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8276
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8277
I1
sS'trials_2.thisN'
p8278
I1
sa(dp8279
g20
g21
sS'trials.thisIndex'
p8280
g36
(g38
S'\x00\x00\x00\x00'
tRp8281
sg22
V
sS'trials_2.thisRepN'
p8282
I1
sS'trials_2.thisTrialN'
p8283
I0
sS'trials.thisRepN'
p8284
I94
sS'trials_2.thisTrial'
p8285
NsS'trials.thisN'
p8286
I188
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8287
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8288
I0
sS'trials_2.thisN'
p8289
I1
sa(dp8290
g20
g21
sS'trials.thisIndex'
p8291
g36
(g38
S'\x01\x00\x00\x00'
tRp8292
sg22
V
sS'trials_2.thisRepN'
p8293
I1
sS'trials_2.thisTrialN'
p8294
I0
sS'trials.thisRepN'
p8295
I94
sS'trials_2.thisTrial'
p8296
NsS'trials.thisN'
p8297
I189
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8298
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8299
I1
sS'trials_2.thisN'
p8300
I1
sa(dp8301
g20
g21
sS'trials.thisIndex'
p8302
g36
(g38
S'\x00\x00\x00\x00'
tRp8303
sg22
V
sS'trials_2.thisRepN'
p8304
I1
sS'trials_2.thisTrialN'
p8305
I0
sS'trials.thisRepN'
p8306
I95
sS'trials_2.thisTrial'
p8307
NsS'trials.thisN'
p8308
I190
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8309
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8310
I0
sS'trials_2.thisN'
p8311
I1
sa(dp8312
g20
g21
sS'trials.thisIndex'
p8313
g36
(g38
S'\x01\x00\x00\x00'
tRp8314
sg22
V
sS'trials_2.thisRepN'
p8315
I1
sS'trials_2.thisTrialN'
p8316
I0
sS'trials.thisRepN'
p8317
I95
sS'trials_2.thisTrial'
p8318
NsS'trials.thisN'
p8319
I191
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8320
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8321
I1
sS'trials_2.thisN'
p8322
I1
sa(dp8323
g20
g21
sS'trials.thisIndex'
p8324
g36
(g38
S'\x00\x00\x00\x00'
tRp8325
sg22
V
sS'trials_2.thisRepN'
p8326
I1
sS'trials_2.thisTrialN'
p8327
I0
sS'trials.thisRepN'
p8328
I96
sS'trials_2.thisTrial'
p8329
NsS'trials.thisN'
p8330
I192
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8331
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8332
I0
sS'trials_2.thisN'
p8333
I1
sa(dp8334
g20
g21
sS'trials.thisIndex'
p8335
g36
(g38
S'\x01\x00\x00\x00'
tRp8336
sg22
V
sS'trials_2.thisRepN'
p8337
I1
sS'trials_2.thisTrialN'
p8338
I0
sS'trials.thisRepN'
p8339
I96
sS'trials_2.thisTrial'
p8340
NsS'trials.thisN'
p8341
I193
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8342
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8343
I1
sS'trials_2.thisN'
p8344
I1
sa(dp8345
g20
g21
sS'trials.thisIndex'
p8346
g36
(g38
S'\x00\x00\x00\x00'
tRp8347
sg22
V
sS'trials_2.thisRepN'
p8348
I1
sS'trials_2.thisTrialN'
p8349
I0
sS'trials.thisRepN'
p8350
I97
sS'trials_2.thisTrial'
p8351
NsS'trials.thisN'
p8352
I194
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8353
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8354
I0
sS'trials_2.thisN'
p8355
I1
sa(dp8356
g20
g21
sS'trials.thisIndex'
p8357
g36
(g38
S'\x01\x00\x00\x00'
tRp8358
sg22
V
sS'trials_2.thisRepN'
p8359
I1
sS'trials_2.thisTrialN'
p8360
I0
sS'trials.thisRepN'
p8361
I97
sS'trials_2.thisTrial'
p8362
NsS'trials.thisN'
p8363
I195
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8364
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8365
I1
sS'trials_2.thisN'
p8366
I1
sa(dp8367
g20
g21
sS'trials.thisIndex'
p8368
g36
(g38
S'\x00\x00\x00\x00'
tRp8369
sg22
V
sS'trials_2.thisRepN'
p8370
I1
sS'trials_2.thisTrialN'
p8371
I0
sS'trials.thisRepN'
p8372
I98
sS'trials_2.thisTrial'
p8373
NsS'trials.thisN'
p8374
I196
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8375
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8376
I0
sS'trials_2.thisN'
p8377
I1
sa(dp8378
g20
g21
sS'trials.thisIndex'
p8379
g36
(g38
S'\x01\x00\x00\x00'
tRp8380
sg22
V
sS'trials_2.thisRepN'
p8381
I1
sS'trials_2.thisTrialN'
p8382
I0
sS'trials.thisRepN'
p8383
I98
sS'trials_2.thisTrial'
p8384
NsS'trials.thisN'
p8385
I197
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8386
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8387
I1
sS'trials_2.thisN'
p8388
I1
sa(dp8389
g20
g21
sS'trials.thisIndex'
p8390
g36
(g38
S'\x00\x00\x00\x00'
tRp8391
sg22
V
sS'trials_2.thisRepN'
p8392
I1
sS'trials_2.thisTrialN'
p8393
I0
sS'trials.thisRepN'
p8394
I99
sS'trials_2.thisTrial'
p8395
NsS'trials.thisN'
p8396
I198
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8397
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8398
I0
sS'trials_2.thisN'
p8399
I1
sa(dp8400
g20
g21
sS'trials.thisIndex'
p8401
g36
(g38
S'\x01\x00\x00\x00'
tRp8402
sg22
V
sS'trials_2.thisRepN'
p8403
I1
sS'trials_2.thisTrialN'
p8404
I0
sS'trials.thisRepN'
p8405
I99
sS'trials_2.thisTrial'
p8406
NsS'trials.thisN'
p8407
I199
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8408
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8409
I1
sS'trials_2.thisN'
p8410
I1
sa(dp8411
g20
g21
sS'trials.thisIndex'
p8412
g36
(g38
S'\x00\x00\x00\x00'
tRp8413
sg22
V
sS'trials_2.thisRepN'
p8414
I1
sS'trials_2.thisTrialN'
p8415
I0
sS'trials.thisRepN'
p8416
I100
sS'trials_2.thisTrial'
p8417
NsS'trials.thisN'
p8418
I200
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8419
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8420
I0
sS'trials_2.thisN'
p8421
I1
sa(dp8422
g20
g21
sS'trials.thisIndex'
p8423
g36
(g38
S'\x01\x00\x00\x00'
tRp8424
sg22
V
sS'trials_2.thisRepN'
p8425
I1
sS'trials_2.thisTrialN'
p8426
I0
sS'trials.thisRepN'
p8427
I100
sS'trials_2.thisTrial'
p8428
NsS'trials.thisN'
p8429
I201
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8430
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8431
I1
sS'trials_2.thisN'
p8432
I1
sa(dp8433
g20
g21
sS'trials.thisIndex'
p8434
g36
(g38
S'\x00\x00\x00\x00'
tRp8435
sg22
V
sS'trials_2.thisRepN'
p8436
I1
sS'trials_2.thisTrialN'
p8437
I0
sS'trials.thisRepN'
p8438
I101
sS'trials_2.thisTrial'
p8439
NsS'trials.thisN'
p8440
I202
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8441
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8442
I0
sS'trials_2.thisN'
p8443
I1
sa(dp8444
g20
g21
sS'trials.thisIndex'
p8445
g36
(g38
S'\x01\x00\x00\x00'
tRp8446
sg22
V
sS'trials_2.thisRepN'
p8447
I1
sS'trials_2.thisTrialN'
p8448
I0
sS'trials.thisRepN'
p8449
I101
sS'trials_2.thisTrial'
p8450
NsS'trials.thisN'
p8451
I203
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8452
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8453
I1
sS'trials_2.thisN'
p8454
I1
sa(dp8455
g20
g21
sS'trials.thisIndex'
p8456
g36
(g38
S'\x00\x00\x00\x00'
tRp8457
sg22
V
sS'trials_2.thisRepN'
p8458
I1
sS'trials_2.thisTrialN'
p8459
I0
sS'trials.thisRepN'
p8460
I102
sS'trials_2.thisTrial'
p8461
NsS'trials.thisN'
p8462
I204
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8463
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8464
I0
sS'trials_2.thisN'
p8465
I1
sa(dp8466
g20
g21
sS'trials.thisIndex'
p8467
g36
(g38
S'\x01\x00\x00\x00'
tRp8468
sg22
V
sS'trials_2.thisRepN'
p8469
I1
sS'trials_2.thisTrialN'
p8470
I0
sS'trials.thisRepN'
p8471
I102
sS'trials_2.thisTrial'
p8472
NsS'trials.thisN'
p8473
I205
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8474
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8475
I1
sS'trials_2.thisN'
p8476
I1
sa(dp8477
g20
g21
sS'trials.thisIndex'
p8478
g36
(g38
S'\x00\x00\x00\x00'
tRp8479
sg22
V
sS'trials_2.thisRepN'
p8480
I1
sS'trials_2.thisTrialN'
p8481
I0
sS'trials.thisRepN'
p8482
I103
sS'trials_2.thisTrial'
p8483
NsS'trials.thisN'
p8484
I206
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8485
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8486
I0
sS'trials_2.thisN'
p8487
I1
sa(dp8488
g20
g21
sS'trials.thisIndex'
p8489
g36
(g38
S'\x01\x00\x00\x00'
tRp8490
sg22
V
sS'trials_2.thisRepN'
p8491
I1
sS'trials_2.thisTrialN'
p8492
I0
sS'trials.thisRepN'
p8493
I103
sS'trials_2.thisTrial'
p8494
NsS'trials.thisN'
p8495
I207
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8496
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8497
I1
sS'trials_2.thisN'
p8498
I1
sa(dp8499
g20
g21
sS'trials.thisIndex'
p8500
g36
(g38
S'\x00\x00\x00\x00'
tRp8501
sg22
V
sS'trials_2.thisRepN'
p8502
I1
sS'trials_2.thisTrialN'
p8503
I0
sS'trials.thisRepN'
p8504
I104
sS'trials_2.thisTrial'
p8505
NsS'trials.thisN'
p8506
I208
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8507
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8508
I0
sS'trials_2.thisN'
p8509
I1
sa(dp8510
g20
g21
sS'trials.thisIndex'
p8511
g36
(g38
S'\x01\x00\x00\x00'
tRp8512
sg22
V
sS'trials_2.thisRepN'
p8513
I1
sS'trials_2.thisTrialN'
p8514
I0
sS'trials.thisRepN'
p8515
I104
sS'trials_2.thisTrial'
p8516
NsS'trials.thisN'
p8517
I209
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8518
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8519
I1
sS'trials_2.thisN'
p8520
I1
sa(dp8521
g20
g21
sS'trials.thisIndex'
p8522
g36
(g38
S'\x00\x00\x00\x00'
tRp8523
sg22
V
sS'trials_2.thisRepN'
p8524
I1
sS'trials_2.thisTrialN'
p8525
I0
sS'trials.thisRepN'
p8526
I105
sS'trials_2.thisTrial'
p8527
NsS'trials.thisN'
p8528
I210
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8529
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8530
I0
sS'trials_2.thisN'
p8531
I1
sa(dp8532
g20
g21
sS'trials.thisIndex'
p8533
g36
(g38
S'\x01\x00\x00\x00'
tRp8534
sg22
V
sS'trials_2.thisRepN'
p8535
I1
sS'trials_2.thisTrialN'
p8536
I0
sS'trials.thisRepN'
p8537
I105
sS'trials_2.thisTrial'
p8538
NsS'trials.thisN'
p8539
I211
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8540
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8541
I1
sS'trials_2.thisN'
p8542
I1
sa(dp8543
g20
g21
sS'trials.thisIndex'
p8544
g36
(g38
S'\x00\x00\x00\x00'
tRp8545
sg22
V
sS'trials_2.thisRepN'
p8546
I1
sS'trials_2.thisTrialN'
p8547
I0
sS'trials.thisRepN'
p8548
I106
sS'trials_2.thisTrial'
p8549
NsS'trials.thisN'
p8550
I212
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8551
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8552
I0
sS'trials_2.thisN'
p8553
I1
sa(dp8554
g20
g21
sS'trials.thisIndex'
p8555
g36
(g38
S'\x01\x00\x00\x00'
tRp8556
sg22
V
sS'trials_2.thisRepN'
p8557
I1
sS'trials_2.thisTrialN'
p8558
I0
sS'trials.thisRepN'
p8559
I106
sS'trials_2.thisTrial'
p8560
NsS'trials.thisN'
p8561
I213
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8562
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8563
I1
sS'trials_2.thisN'
p8564
I1
sa(dp8565
g20
g21
sS'trials.thisIndex'
p8566
g36
(g38
S'\x00\x00\x00\x00'
tRp8567
sg22
V
sS'trials_2.thisRepN'
p8568
I1
sS'trials_2.thisTrialN'
p8569
I0
sS'trials.thisRepN'
p8570
I107
sS'trials_2.thisTrial'
p8571
NsS'trials.thisN'
p8572
I214
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8573
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8574
I0
sS'trials_2.thisN'
p8575
I1
sa(dp8576
g20
g21
sS'trials.thisIndex'
p8577
g36
(g38
S'\x01\x00\x00\x00'
tRp8578
sg22
V
sS'trials_2.thisRepN'
p8579
I1
sS'trials_2.thisTrialN'
p8580
I0
sS'trials.thisRepN'
p8581
I107
sS'trials_2.thisTrial'
p8582
NsS'trials.thisN'
p8583
I215
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8584
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8585
I1
sS'trials_2.thisN'
p8586
I1
sa(dp8587
g20
g21
sS'trials.thisIndex'
p8588
g36
(g38
S'\x00\x00\x00\x00'
tRp8589
sg22
V
sS'trials_2.thisRepN'
p8590
I1
sS'trials_2.thisTrialN'
p8591
I0
sS'trials.thisRepN'
p8592
I108
sS'trials_2.thisTrial'
p8593
NsS'trials.thisN'
p8594
I216
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8595
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8596
I0
sS'trials_2.thisN'
p8597
I1
sa(dp8598
g20
g21
sS'trials.thisIndex'
p8599
g36
(g38
S'\x01\x00\x00\x00'
tRp8600
sg22
V
sS'trials_2.thisRepN'
p8601
I1
sS'trials_2.thisTrialN'
p8602
I0
sS'trials.thisRepN'
p8603
I108
sS'trials_2.thisTrial'
p8604
NsS'trials.thisN'
p8605
I217
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8606
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8607
I1
sS'trials_2.thisN'
p8608
I1
sa(dp8609
g20
g21
sS'trials.thisIndex'
p8610
g36
(g38
S'\x00\x00\x00\x00'
tRp8611
sg22
V
sS'trials_2.thisRepN'
p8612
I1
sS'trials_2.thisTrialN'
p8613
I0
sS'trials.thisRepN'
p8614
I109
sS'trials_2.thisTrial'
p8615
NsS'trials.thisN'
p8616
I218
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8617
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8618
I0
sS'trials_2.thisN'
p8619
I1
sa(dp8620
g20
g21
sS'trials.thisIndex'
p8621
g36
(g38
S'\x01\x00\x00\x00'
tRp8622
sg22
V
sS'trials_2.thisRepN'
p8623
I1
sS'trials_2.thisTrialN'
p8624
I0
sS'trials.thisRepN'
p8625
I109
sS'trials_2.thisTrial'
p8626
NsS'trials.thisN'
p8627
I219
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8628
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8629
I1
sS'trials_2.thisN'
p8630
I1
sa(dp8631
g20
g21
sS'trials.thisIndex'
p8632
g36
(g38
S'\x00\x00\x00\x00'
tRp8633
sg22
V
sS'trials_2.thisRepN'
p8634
I1
sS'trials_2.thisTrialN'
p8635
I0
sS'trials.thisRepN'
p8636
I110
sS'trials_2.thisTrial'
p8637
NsS'trials.thisN'
p8638
I220
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8639
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8640
I0
sS'trials_2.thisN'
p8641
I1
sa(dp8642
g20
g21
sS'trials.thisIndex'
p8643
g36
(g38
S'\x01\x00\x00\x00'
tRp8644
sg22
V
sS'trials_2.thisRepN'
p8645
I1
sS'trials_2.thisTrialN'
p8646
I0
sS'trials.thisRepN'
p8647
I110
sS'trials_2.thisTrial'
p8648
NsS'trials.thisN'
p8649
I221
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8650
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8651
I1
sS'trials_2.thisN'
p8652
I1
sa(dp8653
g20
g21
sS'trials.thisIndex'
p8654
g36
(g38
S'\x00\x00\x00\x00'
tRp8655
sg22
V
sS'trials_2.thisRepN'
p8656
I1
sS'trials_2.thisTrialN'
p8657
I0
sS'trials.thisRepN'
p8658
I111
sS'trials_2.thisTrial'
p8659
NsS'trials.thisN'
p8660
I222
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8661
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8662
I0
sS'trials_2.thisN'
p8663
I1
sa(dp8664
g20
g21
sS'trials.thisIndex'
p8665
g36
(g38
S'\x01\x00\x00\x00'
tRp8666
sg22
V
sS'trials_2.thisRepN'
p8667
I1
sS'trials_2.thisTrialN'
p8668
I0
sS'trials.thisRepN'
p8669
I111
sS'trials_2.thisTrial'
p8670
NsS'trials.thisN'
p8671
I223
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8672
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8673
I1
sS'trials_2.thisN'
p8674
I1
sa(dp8675
g20
g21
sS'trials.thisIndex'
p8676
g36
(g38
S'\x00\x00\x00\x00'
tRp8677
sg22
V
sS'trials_2.thisRepN'
p8678
I1
sS'trials_2.thisTrialN'
p8679
I0
sS'trials.thisRepN'
p8680
I112
sS'trials_2.thisTrial'
p8681
NsS'trials.thisN'
p8682
I224
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8683
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8684
I0
sS'trials_2.thisN'
p8685
I1
sa(dp8686
g20
g21
sS'trials.thisIndex'
p8687
g36
(g38
S'\x01\x00\x00\x00'
tRp8688
sg22
V
sS'trials_2.thisRepN'
p8689
I1
sS'trials_2.thisTrialN'
p8690
I0
sS'trials.thisRepN'
p8691
I112
sS'trials_2.thisTrial'
p8692
NsS'trials.thisN'
p8693
I225
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8694
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8695
I1
sS'trials_2.thisN'
p8696
I1
sa(dp8697
g20
g21
sS'trials.thisIndex'
p8698
g36
(g38
S'\x00\x00\x00\x00'
tRp8699
sg22
V
sS'trials_2.thisRepN'
p8700
I1
sS'trials_2.thisTrialN'
p8701
I0
sS'trials.thisRepN'
p8702
I113
sS'trials_2.thisTrial'
p8703
NsS'trials.thisN'
p8704
I226
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8705
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8706
I0
sS'trials_2.thisN'
p8707
I1
sa(dp8708
g20
g21
sS'trials.thisIndex'
p8709
g36
(g38
S'\x01\x00\x00\x00'
tRp8710
sg22
V
sS'trials_2.thisRepN'
p8711
I1
sS'trials_2.thisTrialN'
p8712
I0
sS'trials.thisRepN'
p8713
I113
sS'trials_2.thisTrial'
p8714
NsS'trials.thisN'
p8715
I227
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8716
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8717
I1
sS'trials_2.thisN'
p8718
I1
sa(dp8719
g20
g21
sS'trials.thisIndex'
p8720
g36
(g38
S'\x00\x00\x00\x00'
tRp8721
sg22
V
sS'trials_2.thisRepN'
p8722
I1
sS'trials_2.thisTrialN'
p8723
I0
sS'trials.thisRepN'
p8724
I114
sS'trials_2.thisTrial'
p8725
NsS'trials.thisN'
p8726
I228
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8727
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8728
I0
sS'trials_2.thisN'
p8729
I1
sa(dp8730
g20
g21
sS'trials.thisIndex'
p8731
g36
(g38
S'\x01\x00\x00\x00'
tRp8732
sg22
V
sS'trials_2.thisRepN'
p8733
I1
sS'trials_2.thisTrialN'
p8734
I0
sS'trials.thisRepN'
p8735
I114
sS'trials_2.thisTrial'
p8736
NsS'trials.thisN'
p8737
I229
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8738
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8739
I1
sS'trials_2.thisN'
p8740
I1
sa(dp8741
g20
g21
sS'trials.thisIndex'
p8742
g36
(g38
S'\x00\x00\x00\x00'
tRp8743
sg22
V
sS'trials_2.thisRepN'
p8744
I1
sS'trials_2.thisTrialN'
p8745
I0
sS'trials.thisRepN'
p8746
I115
sS'trials_2.thisTrial'
p8747
NsS'trials.thisN'
p8748
I230
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8749
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8750
I0
sS'trials_2.thisN'
p8751
I1
sa(dp8752
g20
g21
sS'trials.thisIndex'
p8753
g36
(g38
S'\x01\x00\x00\x00'
tRp8754
sg22
V
sS'trials_2.thisRepN'
p8755
I1
sS'trials_2.thisTrialN'
p8756
I0
sS'trials.thisRepN'
p8757
I115
sS'trials_2.thisTrial'
p8758
NsS'trials.thisN'
p8759
I231
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8760
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8761
I1
sS'trials_2.thisN'
p8762
I1
sa(dp8763
g20
g21
sS'trials.thisIndex'
p8764
g36
(g38
S'\x00\x00\x00\x00'
tRp8765
sg22
V
sS'trials_2.thisRepN'
p8766
I1
sS'trials_2.thisTrialN'
p8767
I0
sS'trials.thisRepN'
p8768
I116
sS'trials_2.thisTrial'
p8769
NsS'trials.thisN'
p8770
I232
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8771
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8772
I0
sS'trials_2.thisN'
p8773
I1
sa(dp8774
g20
g21
sS'trials.thisIndex'
p8775
g36
(g38
S'\x01\x00\x00\x00'
tRp8776
sg22
V
sS'trials_2.thisRepN'
p8777
I1
sS'trials_2.thisTrialN'
p8778
I0
sS'trials.thisRepN'
p8779
I116
sS'trials_2.thisTrial'
p8780
NsS'trials.thisN'
p8781
I233
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8782
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8783
I1
sS'trials_2.thisN'
p8784
I1
sa(dp8785
g20
g21
sS'trials.thisIndex'
p8786
g36
(g38
S'\x00\x00\x00\x00'
tRp8787
sg22
V
sS'trials_2.thisRepN'
p8788
I1
sS'trials_2.thisTrialN'
p8789
I0
sS'trials.thisRepN'
p8790
I117
sS'trials_2.thisTrial'
p8791
NsS'trials.thisN'
p8792
I234
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8793
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8794
I0
sS'trials_2.thisN'
p8795
I1
sa(dp8796
g20
g21
sS'trials.thisIndex'
p8797
g36
(g38
S'\x01\x00\x00\x00'
tRp8798
sg22
V
sS'trials_2.thisRepN'
p8799
I1
sS'trials_2.thisTrialN'
p8800
I0
sS'trials.thisRepN'
p8801
I117
sS'trials_2.thisTrial'
p8802
NsS'trials.thisN'
p8803
I235
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8804
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8805
I1
sS'trials_2.thisN'
p8806
I1
sa(dp8807
g20
g21
sS'trials.thisIndex'
p8808
g36
(g38
S'\x00\x00\x00\x00'
tRp8809
sg22
V
sS'trials_2.thisRepN'
p8810
I1
sS'trials_2.thisTrialN'
p8811
I0
sS'trials.thisRepN'
p8812
I118
sS'trials_2.thisTrial'
p8813
NsS'trials.thisN'
p8814
I236
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8815
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8816
I0
sS'trials_2.thisN'
p8817
I1
sa(dp8818
g20
g21
sS'trials.thisIndex'
p8819
g36
(g38
S'\x01\x00\x00\x00'
tRp8820
sg22
V
sS'trials_2.thisRepN'
p8821
I1
sS'trials_2.thisTrialN'
p8822
I0
sS'trials.thisRepN'
p8823
I118
sS'trials_2.thisTrial'
p8824
NsS'trials.thisN'
p8825
I237
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8826
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8827
I1
sS'trials_2.thisN'
p8828
I1
sa(dp8829
g20
g21
sS'trials.thisIndex'
p8830
g36
(g38
S'\x00\x00\x00\x00'
tRp8831
sg22
V
sS'trials_2.thisRepN'
p8832
I1
sS'trials_2.thisTrialN'
p8833
I0
sS'trials.thisRepN'
p8834
I119
sS'trials_2.thisTrial'
p8835
NsS'trials.thisN'
p8836
I238
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8837
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8838
I0
sS'trials_2.thisN'
p8839
I1
sa(dp8840
g20
g21
sS'trials.thisIndex'
p8841
g36
(g38
S'\x01\x00\x00\x00'
tRp8842
sg22
V
sS'trials_2.thisRepN'
p8843
I1
sS'trials_2.thisTrialN'
p8844
I0
sS'trials.thisRepN'
p8845
I119
sS'trials_2.thisTrial'
p8846
NsS'trials.thisN'
p8847
I239
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8848
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8849
I1
sS'trials_2.thisN'
p8850
I1
sa(dp8851
g20
g21
sS'trials.thisIndex'
p8852
g36
(g38
S'\x00\x00\x00\x00'
tRp8853
sg22
V
sS'trials_2.thisRepN'
p8854
I1
sS'trials_2.thisTrialN'
p8855
I0
sS'trials.thisRepN'
p8856
I120
sS'trials_2.thisTrial'
p8857
NsS'trials.thisN'
p8858
I240
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8859
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8860
I0
sS'trials_2.thisN'
p8861
I1
sa(dp8862
g20
g21
sS'trials.thisIndex'
p8863
g36
(g38
S'\x01\x00\x00\x00'
tRp8864
sg22
V
sS'trials_2.thisRepN'
p8865
I1
sS'trials_2.thisTrialN'
p8866
I0
sS'trials.thisRepN'
p8867
I120
sS'trials_2.thisTrial'
p8868
NsS'trials.thisN'
p8869
I241
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8870
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8871
I1
sS'trials_2.thisN'
p8872
I1
sa(dp8873
g20
g21
sS'trials.thisIndex'
p8874
g36
(g38
S'\x00\x00\x00\x00'
tRp8875
sg22
V
sS'trials_2.thisRepN'
p8876
I1
sS'trials_2.thisTrialN'
p8877
I0
sS'trials.thisRepN'
p8878
I121
sS'trials_2.thisTrial'
p8879
NsS'trials.thisN'
p8880
I242
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8881
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8882
I0
sS'trials_2.thisN'
p8883
I1
sa(dp8884
g20
g21
sS'trials.thisIndex'
p8885
g36
(g38
S'\x01\x00\x00\x00'
tRp8886
sg22
V
sS'trials_2.thisRepN'
p8887
I1
sS'trials_2.thisTrialN'
p8888
I0
sS'trials.thisRepN'
p8889
I121
sS'trials_2.thisTrial'
p8890
NsS'trials.thisN'
p8891
I243
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8892
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8893
I1
sS'trials_2.thisN'
p8894
I1
sa(dp8895
g20
g21
sS'trials.thisIndex'
p8896
g36
(g38
S'\x00\x00\x00\x00'
tRp8897
sg22
V
sS'trials_2.thisRepN'
p8898
I1
sS'trials_2.thisTrialN'
p8899
I0
sS'trials.thisRepN'
p8900
I122
sS'trials_2.thisTrial'
p8901
NsS'trials.thisN'
p8902
I244
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8903
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8904
I0
sS'trials_2.thisN'
p8905
I1
sa(dp8906
g20
g21
sS'trials.thisIndex'
p8907
g36
(g38
S'\x01\x00\x00\x00'
tRp8908
sg22
V
sS'trials_2.thisRepN'
p8909
I1
sS'trials_2.thisTrialN'
p8910
I0
sS'trials.thisRepN'
p8911
I122
sS'trials_2.thisTrial'
p8912
NsS'trials.thisN'
p8913
I245
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8914
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8915
I1
sS'trials_2.thisN'
p8916
I1
sa(dp8917
g20
g21
sS'trials.thisIndex'
p8918
g36
(g38
S'\x00\x00\x00\x00'
tRp8919
sg22
V
sS'trials_2.thisRepN'
p8920
I1
sS'trials_2.thisTrialN'
p8921
I0
sS'trials.thisRepN'
p8922
I123
sS'trials_2.thisTrial'
p8923
NsS'trials.thisN'
p8924
I246
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8925
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8926
I0
sS'trials_2.thisN'
p8927
I1
sa(dp8928
g20
g21
sS'trials.thisIndex'
p8929
g36
(g38
S'\x01\x00\x00\x00'
tRp8930
sg22
V
sS'trials_2.thisRepN'
p8931
I1
sS'trials_2.thisTrialN'
p8932
I0
sS'trials.thisRepN'
p8933
I123
sS'trials_2.thisTrial'
p8934
NsS'trials.thisN'
p8935
I247
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8936
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8937
I1
sS'trials_2.thisN'
p8938
I1
sa(dp8939
g20
g21
sS'trials.thisIndex'
p8940
g36
(g38
S'\x00\x00\x00\x00'
tRp8941
sg22
V
sS'trials_2.thisRepN'
p8942
I1
sS'trials_2.thisTrialN'
p8943
I0
sS'trials.thisRepN'
p8944
I124
sS'trials_2.thisTrial'
p8945
NsS'trials.thisN'
p8946
I248
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8947
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8948
I0
sS'trials_2.thisN'
p8949
I1
sa(dp8950
g20
g21
sS'trials.thisIndex'
p8951
g36
(g38
S'\x01\x00\x00\x00'
tRp8952
sg22
V
sS'trials_2.thisRepN'
p8953
I1
sS'trials_2.thisTrialN'
p8954
I0
sS'trials.thisRepN'
p8955
I124
sS'trials_2.thisTrial'
p8956
NsS'trials.thisN'
p8957
I249
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8958
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8959
I1
sS'trials_2.thisN'
p8960
I1
sa(dp8961
g20
g21
sS'trials.thisIndex'
p8962
g36
(g38
S'\x00\x00\x00\x00'
tRp8963
sg22
V
sS'trials_2.thisRepN'
p8964
I1
sS'trials_2.thisTrialN'
p8965
I0
sS'trials.thisRepN'
p8966
I125
sS'trials_2.thisTrial'
p8967
NsS'trials.thisN'
p8968
I250
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8969
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8970
I0
sS'trials_2.thisN'
p8971
I1
sa(dp8972
g20
g21
sS'trials.thisIndex'
p8973
g36
(g38
S'\x01\x00\x00\x00'
tRp8974
sg22
V
sS'trials_2.thisRepN'
p8975
I1
sS'trials_2.thisTrialN'
p8976
I0
sS'trials.thisRepN'
p8977
I125
sS'trials_2.thisTrial'
p8978
NsS'trials.thisN'
p8979
I251
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8980
g6216
sg6217
g6230
sS'trials.thisTrialN'
p8981
I1
sS'trials_2.thisN'
p8982
I1
sa(dp8983
g20
g21
sS'trials.thisIndex'
p8984
g36
(g38
S'\x00\x00\x00\x00'
tRp8985
sg22
V
sS'trials_2.thisRepN'
p8986
I1
sS'trials_2.thisTrialN'
p8987
I0
sS'trials.thisRepN'
p8988
I126
sS'trials_2.thisTrial'
p8989
NsS'trials.thisN'
p8990
I252
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p8991
g6216
sg6217
g6218
sS'trials.thisTrialN'
p8992
I0
sS'trials_2.thisN'
p8993
I1
sa(dp8994
g20
g21
sS'trials.thisIndex'
p8995
g36
(g38
S'\x01\x00\x00\x00'
tRp8996
sg22
V
sS'trials_2.thisRepN'
p8997
I1
sS'trials_2.thisTrialN'
p8998
I0
sS'trials.thisRepN'
p8999
I126
sS'trials_2.thisTrial'
p9000
NsS'trials.thisN'
p9001
I253
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9002
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9003
I1
sS'trials_2.thisN'
p9004
I1
sa(dp9005
g20
g21
sS'trials.thisIndex'
p9006
g36
(g38
S'\x00\x00\x00\x00'
tRp9007
sg22
V
sS'trials_2.thisRepN'
p9008
I1
sS'trials_2.thisTrialN'
p9009
I0
sS'trials.thisRepN'
p9010
I127
sS'trials_2.thisTrial'
p9011
NsS'trials.thisN'
p9012
I254
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9013
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9014
I0
sS'trials_2.thisN'
p9015
I1
sa(dp9016
g20
g21
sS'trials.thisIndex'
p9017
g36
(g38
S'\x01\x00\x00\x00'
tRp9018
sg22
V
sS'trials_2.thisRepN'
p9019
I1
sS'trials_2.thisTrialN'
p9020
I0
sS'trials.thisRepN'
p9021
I127
sS'trials_2.thisTrial'
p9022
NsS'trials.thisN'
p9023
I255
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9024
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9025
I1
sS'trials_2.thisN'
p9026
I1
sa(dp9027
g20
g21
sS'trials.thisIndex'
p9028
g36
(g38
S'\x00\x00\x00\x00'
tRp9029
sg22
V
sS'trials_2.thisRepN'
p9030
I1
sS'trials_2.thisTrialN'
p9031
I0
sS'trials.thisRepN'
p9032
I128
sS'trials_2.thisTrial'
p9033
NsS'trials.thisN'
p9034
I256
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9035
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9036
I0
sS'trials_2.thisN'
p9037
I1
sa(dp9038
g20
g21
sS'trials.thisIndex'
p9039
g36
(g38
S'\x01\x00\x00\x00'
tRp9040
sg22
V
sS'trials_2.thisRepN'
p9041
I1
sS'trials_2.thisTrialN'
p9042
I0
sS'trials.thisRepN'
p9043
I128
sS'trials_2.thisTrial'
p9044
NsS'trials.thisN'
p9045
I257
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9046
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9047
I1
sS'trials_2.thisN'
p9048
I1
sa(dp9049
g20
g21
sS'trials.thisIndex'
p9050
g36
(g38
S'\x00\x00\x00\x00'
tRp9051
sg22
V
sS'trials_2.thisRepN'
p9052
I1
sS'trials_2.thisTrialN'
p9053
I0
sS'trials.thisRepN'
p9054
I129
sS'trials_2.thisTrial'
p9055
NsS'trials.thisN'
p9056
I258
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9057
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9058
I0
sS'trials_2.thisN'
p9059
I1
sa(dp9060
g20
g21
sS'trials.thisIndex'
p9061
g36
(g38
S'\x01\x00\x00\x00'
tRp9062
sg22
V
sS'trials_2.thisRepN'
p9063
I1
sS'trials_2.thisTrialN'
p9064
I0
sS'trials.thisRepN'
p9065
I129
sS'trials_2.thisTrial'
p9066
NsS'trials.thisN'
p9067
I259
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9068
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9069
I1
sS'trials_2.thisN'
p9070
I1
sa(dp9071
g20
g21
sS'trials.thisIndex'
p9072
g36
(g38
S'\x00\x00\x00\x00'
tRp9073
sg22
V
sS'trials_2.thisRepN'
p9074
I1
sS'trials_2.thisTrialN'
p9075
I0
sS'trials.thisRepN'
p9076
I130
sS'trials_2.thisTrial'
p9077
NsS'trials.thisN'
p9078
I260
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9079
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9080
I0
sS'trials_2.thisN'
p9081
I1
sa(dp9082
g20
g21
sS'trials.thisIndex'
p9083
g36
(g38
S'\x01\x00\x00\x00'
tRp9084
sg22
V
sS'trials_2.thisRepN'
p9085
I1
sS'trials_2.thisTrialN'
p9086
I0
sS'trials.thisRepN'
p9087
I130
sS'trials_2.thisTrial'
p9088
NsS'trials.thisN'
p9089
I261
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9090
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9091
I1
sS'trials_2.thisN'
p9092
I1
sa(dp9093
g20
g21
sS'trials.thisIndex'
p9094
g36
(g38
S'\x00\x00\x00\x00'
tRp9095
sg22
V
sS'trials_2.thisRepN'
p9096
I1
sS'trials_2.thisTrialN'
p9097
I0
sS'trials.thisRepN'
p9098
I131
sS'trials_2.thisTrial'
p9099
NsS'trials.thisN'
p9100
I262
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9101
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9102
I0
sS'trials_2.thisN'
p9103
I1
sa(dp9104
g20
g21
sS'trials.thisIndex'
p9105
g36
(g38
S'\x01\x00\x00\x00'
tRp9106
sg22
V
sS'trials_2.thisRepN'
p9107
I1
sS'trials_2.thisTrialN'
p9108
I0
sS'trials.thisRepN'
p9109
I131
sS'trials_2.thisTrial'
p9110
NsS'trials.thisN'
p9111
I263
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9112
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9113
I1
sS'trials_2.thisN'
p9114
I1
sa(dp9115
g20
g21
sS'trials.thisIndex'
p9116
g36
(g38
S'\x00\x00\x00\x00'
tRp9117
sg22
V
sS'trials_2.thisRepN'
p9118
I1
sS'trials_2.thisTrialN'
p9119
I0
sS'trials.thisRepN'
p9120
I132
sS'trials_2.thisTrial'
p9121
NsS'trials.thisN'
p9122
I264
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9123
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9124
I0
sS'trials_2.thisN'
p9125
I1
sa(dp9126
g20
g21
sS'trials.thisIndex'
p9127
g36
(g38
S'\x01\x00\x00\x00'
tRp9128
sg22
V
sS'trials_2.thisRepN'
p9129
I1
sS'trials_2.thisTrialN'
p9130
I0
sS'trials.thisRepN'
p9131
I132
sS'trials_2.thisTrial'
p9132
NsS'trials.thisN'
p9133
I265
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9134
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9135
I1
sS'trials_2.thisN'
p9136
I1
sa(dp9137
g20
g21
sS'trials.thisIndex'
p9138
g36
(g38
S'\x00\x00\x00\x00'
tRp9139
sg22
V
sS'trials_2.thisRepN'
p9140
I1
sS'trials_2.thisTrialN'
p9141
I0
sS'trials.thisRepN'
p9142
I133
sS'trials_2.thisTrial'
p9143
NsS'trials.thisN'
p9144
I266
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9145
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9146
I0
sS'trials_2.thisN'
p9147
I1
sa(dp9148
g20
g21
sS'trials.thisIndex'
p9149
g36
(g38
S'\x01\x00\x00\x00'
tRp9150
sg22
V
sS'trials_2.thisRepN'
p9151
I1
sS'trials_2.thisTrialN'
p9152
I0
sS'trials.thisRepN'
p9153
I133
sS'trials_2.thisTrial'
p9154
NsS'trials.thisN'
p9155
I267
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9156
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9157
I1
sS'trials_2.thisN'
p9158
I1
sa(dp9159
g20
g21
sS'trials.thisIndex'
p9160
g36
(g38
S'\x00\x00\x00\x00'
tRp9161
sg22
V
sS'trials_2.thisRepN'
p9162
I1
sS'trials_2.thisTrialN'
p9163
I0
sS'trials.thisRepN'
p9164
I134
sS'trials_2.thisTrial'
p9165
NsS'trials.thisN'
p9166
I268
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9167
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9168
I0
sS'trials_2.thisN'
p9169
I1
sa(dp9170
g20
g21
sS'trials.thisIndex'
p9171
g36
(g38
S'\x01\x00\x00\x00'
tRp9172
sg22
V
sS'trials_2.thisRepN'
p9173
I1
sS'trials_2.thisTrialN'
p9174
I0
sS'trials.thisRepN'
p9175
I134
sS'trials_2.thisTrial'
p9176
NsS'trials.thisN'
p9177
I269
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9178
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9179
I1
sS'trials_2.thisN'
p9180
I1
sa(dp9181
g20
g21
sS'trials.thisIndex'
p9182
g36
(g38
S'\x00\x00\x00\x00'
tRp9183
sg22
V
sS'trials_2.thisRepN'
p9184
I1
sS'trials_2.thisTrialN'
p9185
I0
sS'trials.thisRepN'
p9186
I135
sS'trials_2.thisTrial'
p9187
NsS'trials.thisN'
p9188
I270
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9189
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9190
I0
sS'trials_2.thisN'
p9191
I1
sa(dp9192
g20
g21
sS'trials.thisIndex'
p9193
g36
(g38
S'\x01\x00\x00\x00'
tRp9194
sg22
V
sS'trials_2.thisRepN'
p9195
I1
sS'trials_2.thisTrialN'
p9196
I0
sS'trials.thisRepN'
p9197
I135
sS'trials_2.thisTrial'
p9198
NsS'trials.thisN'
p9199
I271
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9200
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9201
I1
sS'trials_2.thisN'
p9202
I1
sa(dp9203
g20
g21
sS'trials.thisIndex'
p9204
g36
(g38
S'\x00\x00\x00\x00'
tRp9205
sg22
V
sS'trials_2.thisRepN'
p9206
I1
sS'trials_2.thisTrialN'
p9207
I0
sS'trials.thisRepN'
p9208
I136
sS'trials_2.thisTrial'
p9209
NsS'trials.thisN'
p9210
I272
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9211
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9212
I0
sS'trials_2.thisN'
p9213
I1
sa(dp9214
g20
g21
sS'trials.thisIndex'
p9215
g36
(g38
S'\x01\x00\x00\x00'
tRp9216
sg22
V
sS'trials_2.thisRepN'
p9217
I1
sS'trials_2.thisTrialN'
p9218
I0
sS'trials.thisRepN'
p9219
I136
sS'trials_2.thisTrial'
p9220
NsS'trials.thisN'
p9221
I273
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9222
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9223
I1
sS'trials_2.thisN'
p9224
I1
sa(dp9225
g20
g21
sS'trials.thisIndex'
p9226
g36
(g38
S'\x00\x00\x00\x00'
tRp9227
sg22
V
sS'trials_2.thisRepN'
p9228
I1
sS'trials_2.thisTrialN'
p9229
I0
sS'trials.thisRepN'
p9230
I137
sS'trials_2.thisTrial'
p9231
NsS'trials.thisN'
p9232
I274
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9233
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9234
I0
sS'trials_2.thisN'
p9235
I1
sa(dp9236
g20
g21
sS'trials.thisIndex'
p9237
g36
(g38
S'\x01\x00\x00\x00'
tRp9238
sg22
V
sS'trials_2.thisRepN'
p9239
I1
sS'trials_2.thisTrialN'
p9240
I0
sS'trials.thisRepN'
p9241
I137
sS'trials_2.thisTrial'
p9242
NsS'trials.thisN'
p9243
I275
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9244
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9245
I1
sS'trials_2.thisN'
p9246
I1
sa(dp9247
g20
g21
sS'trials.thisIndex'
p9248
g36
(g38
S'\x00\x00\x00\x00'
tRp9249
sg22
V
sS'trials_2.thisRepN'
p9250
I1
sS'trials_2.thisTrialN'
p9251
I0
sS'trials.thisRepN'
p9252
I138
sS'trials_2.thisTrial'
p9253
NsS'trials.thisN'
p9254
I276
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9255
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9256
I0
sS'trials_2.thisN'
p9257
I1
sa(dp9258
g20
g21
sS'trials.thisIndex'
p9259
g36
(g38
S'\x01\x00\x00\x00'
tRp9260
sg22
V
sS'trials_2.thisRepN'
p9261
I1
sS'trials_2.thisTrialN'
p9262
I0
sS'trials.thisRepN'
p9263
I138
sS'trials_2.thisTrial'
p9264
NsS'trials.thisN'
p9265
I277
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9266
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9267
I1
sS'trials_2.thisN'
p9268
I1
sa(dp9269
g20
g21
sS'trials.thisIndex'
p9270
g36
(g38
S'\x00\x00\x00\x00'
tRp9271
sg22
V
sS'trials_2.thisRepN'
p9272
I1
sS'trials_2.thisTrialN'
p9273
I0
sS'trials.thisRepN'
p9274
I139
sS'trials_2.thisTrial'
p9275
NsS'trials.thisN'
p9276
I278
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9277
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9278
I0
sS'trials_2.thisN'
p9279
I1
sa(dp9280
g20
g21
sS'trials.thisIndex'
p9281
g36
(g38
S'\x01\x00\x00\x00'
tRp9282
sg22
V
sS'trials_2.thisRepN'
p9283
I1
sS'trials_2.thisTrialN'
p9284
I0
sS'trials.thisRepN'
p9285
I139
sS'trials_2.thisTrial'
p9286
NsS'trials.thisN'
p9287
I279
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9288
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9289
I1
sS'trials_2.thisN'
p9290
I1
sa(dp9291
g20
g21
sS'trials.thisIndex'
p9292
g36
(g38
S'\x00\x00\x00\x00'
tRp9293
sg22
V
sS'trials_2.thisRepN'
p9294
I1
sS'trials_2.thisTrialN'
p9295
I0
sS'trials.thisRepN'
p9296
I140
sS'trials_2.thisTrial'
p9297
NsS'trials.thisN'
p9298
I280
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9299
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9300
I0
sS'trials_2.thisN'
p9301
I1
sa(dp9302
g20
g21
sS'trials.thisIndex'
p9303
g36
(g38
S'\x01\x00\x00\x00'
tRp9304
sg22
V
sS'trials_2.thisRepN'
p9305
I1
sS'trials_2.thisTrialN'
p9306
I0
sS'trials.thisRepN'
p9307
I140
sS'trials_2.thisTrial'
p9308
NsS'trials.thisN'
p9309
I281
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9310
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9311
I1
sS'trials_2.thisN'
p9312
I1
sa(dp9313
g20
g21
sS'trials.thisIndex'
p9314
g36
(g38
S'\x00\x00\x00\x00'
tRp9315
sg22
V
sS'trials_2.thisRepN'
p9316
I1
sS'trials_2.thisTrialN'
p9317
I0
sS'trials.thisRepN'
p9318
I141
sS'trials_2.thisTrial'
p9319
NsS'trials.thisN'
p9320
I282
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9321
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9322
I0
sS'trials_2.thisN'
p9323
I1
sa(dp9324
g20
g21
sS'trials.thisIndex'
p9325
g36
(g38
S'\x01\x00\x00\x00'
tRp9326
sg22
V
sS'trials_2.thisRepN'
p9327
I1
sS'trials_2.thisTrialN'
p9328
I0
sS'trials.thisRepN'
p9329
I141
sS'trials_2.thisTrial'
p9330
NsS'trials.thisN'
p9331
I283
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9332
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9333
I1
sS'trials_2.thisN'
p9334
I1
sa(dp9335
g20
g21
sS'trials.thisIndex'
p9336
g36
(g38
S'\x00\x00\x00\x00'
tRp9337
sg22
V
sS'trials_2.thisRepN'
p9338
I1
sS'trials_2.thisTrialN'
p9339
I0
sS'trials.thisRepN'
p9340
I142
sS'trials_2.thisTrial'
p9341
NsS'trials.thisN'
p9342
I284
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9343
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9344
I0
sS'trials_2.thisN'
p9345
I1
sa(dp9346
g20
g21
sS'trials.thisIndex'
p9347
g36
(g38
S'\x01\x00\x00\x00'
tRp9348
sg22
V
sS'trials_2.thisRepN'
p9349
I1
sS'trials_2.thisTrialN'
p9350
I0
sS'trials.thisRepN'
p9351
I142
sS'trials_2.thisTrial'
p9352
NsS'trials.thisN'
p9353
I285
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9354
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9355
I1
sS'trials_2.thisN'
p9356
I1
sa(dp9357
g20
g21
sS'trials.thisIndex'
p9358
g36
(g38
S'\x00\x00\x00\x00'
tRp9359
sg22
V
sS'trials_2.thisRepN'
p9360
I1
sS'trials_2.thisTrialN'
p9361
I0
sS'trials.thisRepN'
p9362
I143
sS'trials_2.thisTrial'
p9363
NsS'trials.thisN'
p9364
I286
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9365
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9366
I0
sS'trials_2.thisN'
p9367
I1
sa(dp9368
g20
g21
sS'trials.thisIndex'
p9369
g36
(g38
S'\x01\x00\x00\x00'
tRp9370
sg22
V
sS'trials_2.thisRepN'
p9371
I1
sS'trials_2.thisTrialN'
p9372
I0
sS'trials.thisRepN'
p9373
I143
sS'trials_2.thisTrial'
p9374
NsS'trials.thisN'
p9375
I287
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9376
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9377
I1
sS'trials_2.thisN'
p9378
I1
sa(dp9379
g20
g21
sS'trials.thisIndex'
p9380
g36
(g38
S'\x00\x00\x00\x00'
tRp9381
sg22
V
sS'trials_2.thisRepN'
p9382
I1
sS'trials_2.thisTrialN'
p9383
I0
sS'trials.thisRepN'
p9384
I144
sS'trials_2.thisTrial'
p9385
NsS'trials.thisN'
p9386
I288
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9387
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9388
I0
sS'trials_2.thisN'
p9389
I1
sa(dp9390
g20
g21
sS'trials.thisIndex'
p9391
g36
(g38
S'\x01\x00\x00\x00'
tRp9392
sg22
V
sS'trials_2.thisRepN'
p9393
I1
sS'trials_2.thisTrialN'
p9394
I0
sS'trials.thisRepN'
p9395
I144
sS'trials_2.thisTrial'
p9396
NsS'trials.thisN'
p9397
I289
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9398
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9399
I1
sS'trials_2.thisN'
p9400
I1
sa(dp9401
g20
g21
sS'trials.thisIndex'
p9402
g36
(g38
S'\x00\x00\x00\x00'
tRp9403
sg22
V
sS'trials_2.thisRepN'
p9404
I1
sS'trials_2.thisTrialN'
p9405
I0
sS'trials.thisRepN'
p9406
I145
sS'trials_2.thisTrial'
p9407
NsS'trials.thisN'
p9408
I290
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9409
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9410
I0
sS'trials_2.thisN'
p9411
I1
sa(dp9412
g20
g21
sS'trials.thisIndex'
p9413
g36
(g38
S'\x01\x00\x00\x00'
tRp9414
sg22
V
sS'trials_2.thisRepN'
p9415
I1
sS'trials_2.thisTrialN'
p9416
I0
sS'trials.thisRepN'
p9417
I145
sS'trials_2.thisTrial'
p9418
NsS'trials.thisN'
p9419
I291
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9420
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9421
I1
sS'trials_2.thisN'
p9422
I1
sa(dp9423
g20
g21
sS'trials.thisIndex'
p9424
g36
(g38
S'\x00\x00\x00\x00'
tRp9425
sg22
V
sS'trials_2.thisRepN'
p9426
I1
sS'trials_2.thisTrialN'
p9427
I0
sS'trials.thisRepN'
p9428
I146
sS'trials_2.thisTrial'
p9429
NsS'trials.thisN'
p9430
I292
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9431
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9432
I0
sS'trials_2.thisN'
p9433
I1
sa(dp9434
g20
g21
sS'trials.thisIndex'
p9435
g36
(g38
S'\x01\x00\x00\x00'
tRp9436
sg22
V
sS'trials_2.thisRepN'
p9437
I1
sS'trials_2.thisTrialN'
p9438
I0
sS'trials.thisRepN'
p9439
I146
sS'trials_2.thisTrial'
p9440
NsS'trials.thisN'
p9441
I293
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9442
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9443
I1
sS'trials_2.thisN'
p9444
I1
sa(dp9445
g20
g21
sS'trials.thisIndex'
p9446
g36
(g38
S'\x00\x00\x00\x00'
tRp9447
sg22
V
sS'trials_2.thisRepN'
p9448
I1
sS'trials_2.thisTrialN'
p9449
I0
sS'trials.thisRepN'
p9450
I147
sS'trials_2.thisTrial'
p9451
NsS'trials.thisN'
p9452
I294
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9453
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9454
I0
sS'trials_2.thisN'
p9455
I1
sa(dp9456
g20
g21
sS'trials.thisIndex'
p9457
g36
(g38
S'\x01\x00\x00\x00'
tRp9458
sg22
V
sS'trials_2.thisRepN'
p9459
I1
sS'trials_2.thisTrialN'
p9460
I0
sS'trials.thisRepN'
p9461
I147
sS'trials_2.thisTrial'
p9462
NsS'trials.thisN'
p9463
I295
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9464
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9465
I1
sS'trials_2.thisN'
p9466
I1
sa(dp9467
g20
g21
sS'trials.thisIndex'
p9468
g36
(g38
S'\x00\x00\x00\x00'
tRp9469
sg22
V
sS'trials_2.thisRepN'
p9470
I1
sS'trials_2.thisTrialN'
p9471
I0
sS'trials.thisRepN'
p9472
I148
sS'trials_2.thisTrial'
p9473
NsS'trials.thisN'
p9474
I296
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9475
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9476
I0
sS'trials_2.thisN'
p9477
I1
sa(dp9478
g20
g21
sS'trials.thisIndex'
p9479
g36
(g38
S'\x01\x00\x00\x00'
tRp9480
sg22
V
sS'trials_2.thisRepN'
p9481
I1
sS'trials_2.thisTrialN'
p9482
I0
sS'trials.thisRepN'
p9483
I148
sS'trials_2.thisTrial'
p9484
NsS'trials.thisN'
p9485
I297
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9486
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9487
I1
sS'trials_2.thisN'
p9488
I1
sa(dp9489
g20
g21
sS'trials.thisIndex'
p9490
g36
(g38
S'\x00\x00\x00\x00'
tRp9491
sg22
V
sS'trials_2.thisRepN'
p9492
I1
sS'trials_2.thisTrialN'
p9493
I0
sS'trials.thisRepN'
p9494
I149
sS'trials_2.thisTrial'
p9495
NsS'trials.thisN'
p9496
I298
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9497
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9498
I0
sS'trials_2.thisN'
p9499
I1
sa(dp9500
g20
g21
sS'trials.thisIndex'
p9501
g36
(g38
S'\x01\x00\x00\x00'
tRp9502
sg22
V
sS'trials_2.thisRepN'
p9503
I1
sS'trials_2.thisTrialN'
p9504
I0
sS'trials.thisRepN'
p9505
I149
sS'trials_2.thisTrial'
p9506
NsS'trials.thisN'
p9507
I299
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9508
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9509
I1
sS'trials_2.thisN'
p9510
I1
sa(dp9511
g20
g21
sS'trials.thisIndex'
p9512
g36
(g38
S'\x00\x00\x00\x00'
tRp9513
sg22
V
sS'trials_2.thisRepN'
p9514
I1
sS'trials_2.thisTrialN'
p9515
I0
sS'trials.thisRepN'
p9516
I150
sS'trials_2.thisTrial'
p9517
NsS'trials.thisN'
p9518
I300
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9519
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9520
I0
sS'trials_2.thisN'
p9521
I1
sa(dp9522
g20
g21
sS'trials.thisIndex'
p9523
g36
(g38
S'\x01\x00\x00\x00'
tRp9524
sg22
V
sS'trials_2.thisRepN'
p9525
I1
sS'trials_2.thisTrialN'
p9526
I0
sS'trials.thisRepN'
p9527
I150
sS'trials_2.thisTrial'
p9528
NsS'trials.thisN'
p9529
I301
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9530
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9531
I1
sS'trials_2.thisN'
p9532
I1
sa(dp9533
g20
g21
sS'trials.thisIndex'
p9534
g36
(g38
S'\x00\x00\x00\x00'
tRp9535
sg22
V
sS'trials_2.thisRepN'
p9536
I1
sS'trials_2.thisTrialN'
p9537
I0
sS'trials.thisRepN'
p9538
I151
sS'trials_2.thisTrial'
p9539
NsS'trials.thisN'
p9540
I302
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9541
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9542
I0
sS'trials_2.thisN'
p9543
I1
sa(dp9544
g20
g21
sS'trials.thisIndex'
p9545
g36
(g38
S'\x01\x00\x00\x00'
tRp9546
sg22
V
sS'trials_2.thisRepN'
p9547
I1
sS'trials_2.thisTrialN'
p9548
I0
sS'trials.thisRepN'
p9549
I151
sS'trials_2.thisTrial'
p9550
NsS'trials.thisN'
p9551
I303
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9552
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9553
I1
sS'trials_2.thisN'
p9554
I1
sa(dp9555
g20
g21
sS'trials.thisIndex'
p9556
g36
(g38
S'\x00\x00\x00\x00'
tRp9557
sg22
V
sS'trials_2.thisRepN'
p9558
I1
sS'trials_2.thisTrialN'
p9559
I0
sS'trials.thisRepN'
p9560
I152
sS'trials_2.thisTrial'
p9561
NsS'trials.thisN'
p9562
I304
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9563
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9564
I0
sS'trials_2.thisN'
p9565
I1
sa(dp9566
g20
g21
sS'trials.thisIndex'
p9567
g36
(g38
S'\x01\x00\x00\x00'
tRp9568
sg22
V
sS'trials_2.thisRepN'
p9569
I1
sS'trials_2.thisTrialN'
p9570
I0
sS'trials.thisRepN'
p9571
I152
sS'trials_2.thisTrial'
p9572
NsS'trials.thisN'
p9573
I305
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9574
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9575
I1
sS'trials_2.thisN'
p9576
I1
sa(dp9577
g20
g21
sS'trials.thisIndex'
p9578
g36
(g38
S'\x00\x00\x00\x00'
tRp9579
sg22
V
sS'trials_2.thisRepN'
p9580
I1
sS'trials_2.thisTrialN'
p9581
I0
sS'trials.thisRepN'
p9582
I153
sS'trials_2.thisTrial'
p9583
NsS'trials.thisN'
p9584
I306
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9585
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9586
I0
sS'trials_2.thisN'
p9587
I1
sa(dp9588
g20
g21
sS'trials.thisIndex'
p9589
g36
(g38
S'\x01\x00\x00\x00'
tRp9590
sg22
V
sS'trials_2.thisRepN'
p9591
I1
sS'trials_2.thisTrialN'
p9592
I0
sS'trials.thisRepN'
p9593
I153
sS'trials_2.thisTrial'
p9594
NsS'trials.thisN'
p9595
I307
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9596
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9597
I1
sS'trials_2.thisN'
p9598
I1
sa(dp9599
g20
g21
sS'trials.thisIndex'
p9600
g36
(g38
S'\x00\x00\x00\x00'
tRp9601
sg22
V
sS'trials_2.thisRepN'
p9602
I1
sS'trials_2.thisTrialN'
p9603
I0
sS'trials.thisRepN'
p9604
I154
sS'trials_2.thisTrial'
p9605
NsS'trials.thisN'
p9606
I308
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9607
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9608
I0
sS'trials_2.thisN'
p9609
I1
sa(dp9610
g20
g21
sS'trials.thisIndex'
p9611
g36
(g38
S'\x01\x00\x00\x00'
tRp9612
sg22
V
sS'trials_2.thisRepN'
p9613
I1
sS'trials_2.thisTrialN'
p9614
I0
sS'trials.thisRepN'
p9615
I154
sS'trials_2.thisTrial'
p9616
NsS'trials.thisN'
p9617
I309
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9618
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9619
I1
sS'trials_2.thisN'
p9620
I1
sa(dp9621
g20
g21
sS'trials.thisIndex'
p9622
g36
(g38
S'\x00\x00\x00\x00'
tRp9623
sg22
V
sS'trials_2.thisRepN'
p9624
I1
sS'trials_2.thisTrialN'
p9625
I0
sS'trials.thisRepN'
p9626
I155
sS'trials_2.thisTrial'
p9627
NsS'trials.thisN'
p9628
I310
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9629
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9630
I0
sS'trials_2.thisN'
p9631
I1
sa(dp9632
g20
g21
sS'trials.thisIndex'
p9633
g36
(g38
S'\x01\x00\x00\x00'
tRp9634
sg22
V
sS'trials_2.thisRepN'
p9635
I1
sS'trials_2.thisTrialN'
p9636
I0
sS'trials.thisRepN'
p9637
I155
sS'trials_2.thisTrial'
p9638
NsS'trials.thisN'
p9639
I311
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9640
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9641
I1
sS'trials_2.thisN'
p9642
I1
sa(dp9643
g20
g21
sS'trials.thisIndex'
p9644
g36
(g38
S'\x00\x00\x00\x00'
tRp9645
sg22
V
sS'trials_2.thisRepN'
p9646
I1
sS'trials_2.thisTrialN'
p9647
I0
sS'trials.thisRepN'
p9648
I156
sS'trials_2.thisTrial'
p9649
NsS'trials.thisN'
p9650
I312
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9651
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9652
I0
sS'trials_2.thisN'
p9653
I1
sa(dp9654
g20
g21
sS'trials.thisIndex'
p9655
g36
(g38
S'\x01\x00\x00\x00'
tRp9656
sg22
V
sS'trials_2.thisRepN'
p9657
I1
sS'trials_2.thisTrialN'
p9658
I0
sS'trials.thisRepN'
p9659
I156
sS'trials_2.thisTrial'
p9660
NsS'trials.thisN'
p9661
I313
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9662
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9663
I1
sS'trials_2.thisN'
p9664
I1
sa(dp9665
g20
g21
sS'trials.thisIndex'
p9666
g36
(g38
S'\x00\x00\x00\x00'
tRp9667
sg22
V
sS'trials_2.thisRepN'
p9668
I1
sS'trials_2.thisTrialN'
p9669
I0
sS'trials.thisRepN'
p9670
I157
sS'trials_2.thisTrial'
p9671
NsS'trials.thisN'
p9672
I314
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9673
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9674
I0
sS'trials_2.thisN'
p9675
I1
sa(dp9676
g20
g21
sS'trials.thisIndex'
p9677
g36
(g38
S'\x01\x00\x00\x00'
tRp9678
sg22
V
sS'trials_2.thisRepN'
p9679
I1
sS'trials_2.thisTrialN'
p9680
I0
sS'trials.thisRepN'
p9681
I157
sS'trials_2.thisTrial'
p9682
NsS'trials.thisN'
p9683
I315
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9684
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9685
I1
sS'trials_2.thisN'
p9686
I1
sa(dp9687
g20
g21
sS'trials.thisIndex'
p9688
g36
(g38
S'\x00\x00\x00\x00'
tRp9689
sg22
V
sS'trials_2.thisRepN'
p9690
I1
sS'trials_2.thisTrialN'
p9691
I0
sS'trials.thisRepN'
p9692
I158
sS'trials_2.thisTrial'
p9693
NsS'trials.thisN'
p9694
I316
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9695
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9696
I0
sS'trials_2.thisN'
p9697
I1
sa(dp9698
g20
g21
sS'trials.thisIndex'
p9699
g36
(g38
S'\x01\x00\x00\x00'
tRp9700
sg22
V
sS'trials_2.thisRepN'
p9701
I1
sS'trials_2.thisTrialN'
p9702
I0
sS'trials.thisRepN'
p9703
I158
sS'trials_2.thisTrial'
p9704
NsS'trials.thisN'
p9705
I317
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9706
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9707
I1
sS'trials_2.thisN'
p9708
I1
sa(dp9709
g20
g21
sS'trials.thisIndex'
p9710
g36
(g38
S'\x00\x00\x00\x00'
tRp9711
sg22
V
sS'trials_2.thisRepN'
p9712
I1
sS'trials_2.thisTrialN'
p9713
I0
sS'trials.thisRepN'
p9714
I159
sS'trials_2.thisTrial'
p9715
NsS'trials.thisN'
p9716
I318
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9717
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9718
I0
sS'trials_2.thisN'
p9719
I1
sa(dp9720
g20
g21
sS'trials.thisIndex'
p9721
g36
(g38
S'\x01\x00\x00\x00'
tRp9722
sg22
V
sS'trials_2.thisRepN'
p9723
I1
sS'trials_2.thisTrialN'
p9724
I0
sS'trials.thisRepN'
p9725
I159
sS'trials_2.thisTrial'
p9726
NsS'trials.thisN'
p9727
I319
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9728
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9729
I1
sS'trials_2.thisN'
p9730
I1
sa(dp9731
g20
g21
sS'trials.thisIndex'
p9732
g36
(g38
S'\x00\x00\x00\x00'
tRp9733
sg22
V
sS'trials_2.thisRepN'
p9734
I1
sS'trials_2.thisTrialN'
p9735
I0
sS'trials.thisRepN'
p9736
I160
sS'trials_2.thisTrial'
p9737
NsS'trials.thisN'
p9738
I320
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9739
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9740
I0
sS'trials_2.thisN'
p9741
I1
sa(dp9742
g20
g21
sS'trials.thisIndex'
p9743
g36
(g38
S'\x01\x00\x00\x00'
tRp9744
sg22
V
sS'trials_2.thisRepN'
p9745
I1
sS'trials_2.thisTrialN'
p9746
I0
sS'trials.thisRepN'
p9747
I160
sS'trials_2.thisTrial'
p9748
NsS'trials.thisN'
p9749
I321
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9750
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9751
I1
sS'trials_2.thisN'
p9752
I1
sa(dp9753
g20
g21
sS'trials.thisIndex'
p9754
g36
(g38
S'\x00\x00\x00\x00'
tRp9755
sg22
V
sS'trials_2.thisRepN'
p9756
I1
sS'trials_2.thisTrialN'
p9757
I0
sS'trials.thisRepN'
p9758
I161
sS'trials_2.thisTrial'
p9759
NsS'trials.thisN'
p9760
I322
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9761
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9762
I0
sS'trials_2.thisN'
p9763
I1
sa(dp9764
g20
g21
sS'trials.thisIndex'
p9765
g36
(g38
S'\x01\x00\x00\x00'
tRp9766
sg22
V
sS'trials_2.thisRepN'
p9767
I1
sS'trials_2.thisTrialN'
p9768
I0
sS'trials.thisRepN'
p9769
I161
sS'trials_2.thisTrial'
p9770
NsS'trials.thisN'
p9771
I323
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9772
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9773
I1
sS'trials_2.thisN'
p9774
I1
sa(dp9775
g20
g21
sS'trials.thisIndex'
p9776
g36
(g38
S'\x00\x00\x00\x00'
tRp9777
sg22
V
sS'trials_2.thisRepN'
p9778
I1
sS'trials_2.thisTrialN'
p9779
I0
sS'trials.thisRepN'
p9780
I162
sS'trials_2.thisTrial'
p9781
NsS'trials.thisN'
p9782
I324
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9783
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9784
I0
sS'trials_2.thisN'
p9785
I1
sa(dp9786
g20
g21
sS'trials.thisIndex'
p9787
g36
(g38
S'\x01\x00\x00\x00'
tRp9788
sg22
V
sS'trials_2.thisRepN'
p9789
I1
sS'trials_2.thisTrialN'
p9790
I0
sS'trials.thisRepN'
p9791
I162
sS'trials_2.thisTrial'
p9792
NsS'trials.thisN'
p9793
I325
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9794
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9795
I1
sS'trials_2.thisN'
p9796
I1
sa(dp9797
g20
g21
sS'trials.thisIndex'
p9798
g36
(g38
S'\x00\x00\x00\x00'
tRp9799
sg22
V
sS'trials_2.thisRepN'
p9800
I1
sS'trials_2.thisTrialN'
p9801
I0
sS'trials.thisRepN'
p9802
I163
sS'trials_2.thisTrial'
p9803
NsS'trials.thisN'
p9804
I326
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9805
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9806
I0
sS'trials_2.thisN'
p9807
I1
sa(dp9808
g20
g21
sS'trials.thisIndex'
p9809
g36
(g38
S'\x01\x00\x00\x00'
tRp9810
sg22
V
sS'trials_2.thisRepN'
p9811
I1
sS'trials_2.thisTrialN'
p9812
I0
sS'trials.thisRepN'
p9813
I163
sS'trials_2.thisTrial'
p9814
NsS'trials.thisN'
p9815
I327
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9816
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9817
I1
sS'trials_2.thisN'
p9818
I1
sa(dp9819
g20
g21
sS'trials.thisIndex'
p9820
g36
(g38
S'\x00\x00\x00\x00'
tRp9821
sg22
V
sS'trials_2.thisRepN'
p9822
I1
sS'trials_2.thisTrialN'
p9823
I0
sS'trials.thisRepN'
p9824
I164
sS'trials_2.thisTrial'
p9825
NsS'trials.thisN'
p9826
I328
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9827
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9828
I0
sS'trials_2.thisN'
p9829
I1
sa(dp9830
g20
g21
sS'trials.thisIndex'
p9831
g36
(g38
S'\x01\x00\x00\x00'
tRp9832
sg22
V
sS'trials_2.thisRepN'
p9833
I1
sS'trials_2.thisTrialN'
p9834
I0
sS'trials.thisRepN'
p9835
I164
sS'trials_2.thisTrial'
p9836
NsS'trials.thisN'
p9837
I329
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9838
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9839
I1
sS'trials_2.thisN'
p9840
I1
sa(dp9841
g20
g21
sS'trials.thisIndex'
p9842
g36
(g38
S'\x00\x00\x00\x00'
tRp9843
sg22
V
sS'trials_2.thisRepN'
p9844
I1
sS'trials_2.thisTrialN'
p9845
I0
sS'trials.thisRepN'
p9846
I165
sS'trials_2.thisTrial'
p9847
NsS'trials.thisN'
p9848
I330
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9849
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9850
I0
sS'trials_2.thisN'
p9851
I1
sa(dp9852
g20
g21
sS'trials.thisIndex'
p9853
g36
(g38
S'\x01\x00\x00\x00'
tRp9854
sg22
V
sS'trials_2.thisRepN'
p9855
I1
sS'trials_2.thisTrialN'
p9856
I0
sS'trials.thisRepN'
p9857
I165
sS'trials_2.thisTrial'
p9858
NsS'trials.thisN'
p9859
I331
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9860
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9861
I1
sS'trials_2.thisN'
p9862
I1
sa(dp9863
g20
g21
sS'trials.thisIndex'
p9864
g36
(g38
S'\x00\x00\x00\x00'
tRp9865
sg22
V
sS'trials_2.thisRepN'
p9866
I1
sS'trials_2.thisTrialN'
p9867
I0
sS'trials.thisRepN'
p9868
I166
sS'trials_2.thisTrial'
p9869
NsS'trials.thisN'
p9870
I332
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9871
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9872
I0
sS'trials_2.thisN'
p9873
I1
sa(dp9874
g20
g21
sS'trials.thisIndex'
p9875
g36
(g38
S'\x01\x00\x00\x00'
tRp9876
sg22
V
sS'trials_2.thisRepN'
p9877
I1
sS'trials_2.thisTrialN'
p9878
I0
sS'trials.thisRepN'
p9879
I166
sS'trials_2.thisTrial'
p9880
NsS'trials.thisN'
p9881
I333
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9882
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9883
I1
sS'trials_2.thisN'
p9884
I1
sa(dp9885
g20
g21
sS'trials.thisIndex'
p9886
g36
(g38
S'\x00\x00\x00\x00'
tRp9887
sg22
V
sS'trials_2.thisRepN'
p9888
I1
sS'trials_2.thisTrialN'
p9889
I0
sS'trials.thisRepN'
p9890
I167
sS'trials_2.thisTrial'
p9891
NsS'trials.thisN'
p9892
I334
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9893
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9894
I0
sS'trials_2.thisN'
p9895
I1
sa(dp9896
g20
g21
sS'trials.thisIndex'
p9897
g36
(g38
S'\x01\x00\x00\x00'
tRp9898
sg22
V
sS'trials_2.thisRepN'
p9899
I1
sS'trials_2.thisTrialN'
p9900
I0
sS'trials.thisRepN'
p9901
I167
sS'trials_2.thisTrial'
p9902
NsS'trials.thisN'
p9903
I335
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9904
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9905
I1
sS'trials_2.thisN'
p9906
I1
sa(dp9907
g20
g21
sS'trials.thisIndex'
p9908
g36
(g38
S'\x00\x00\x00\x00'
tRp9909
sg22
V
sS'trials_2.thisRepN'
p9910
I1
sS'trials_2.thisTrialN'
p9911
I0
sS'trials.thisRepN'
p9912
I168
sS'trials_2.thisTrial'
p9913
NsS'trials.thisN'
p9914
I336
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9915
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9916
I0
sS'trials_2.thisN'
p9917
I1
sa(dp9918
g20
g21
sS'trials.thisIndex'
p9919
g36
(g38
S'\x01\x00\x00\x00'
tRp9920
sg22
V
sS'trials_2.thisRepN'
p9921
I1
sS'trials_2.thisTrialN'
p9922
I0
sS'trials.thisRepN'
p9923
I168
sS'trials_2.thisTrial'
p9924
NsS'trials.thisN'
p9925
I337
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9926
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9927
I1
sS'trials_2.thisN'
p9928
I1
sa(dp9929
g20
g21
sS'trials.thisIndex'
p9930
g36
(g38
S'\x00\x00\x00\x00'
tRp9931
sg22
V
sS'trials_2.thisRepN'
p9932
I1
sS'trials_2.thisTrialN'
p9933
I0
sS'trials.thisRepN'
p9934
I169
sS'trials_2.thisTrial'
p9935
NsS'trials.thisN'
p9936
I338
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9937
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9938
I0
sS'trials_2.thisN'
p9939
I1
sa(dp9940
g20
g21
sS'trials.thisIndex'
p9941
g36
(g38
S'\x01\x00\x00\x00'
tRp9942
sg22
V
sS'trials_2.thisRepN'
p9943
I1
sS'trials_2.thisTrialN'
p9944
I0
sS'trials.thisRepN'
p9945
I169
sS'trials_2.thisTrial'
p9946
NsS'trials.thisN'
p9947
I339
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9948
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9949
I1
sS'trials_2.thisN'
p9950
I1
sa(dp9951
g20
g21
sS'trials.thisIndex'
p9952
g36
(g38
S'\x00\x00\x00\x00'
tRp9953
sg22
V
sS'trials_2.thisRepN'
p9954
I1
sS'trials_2.thisTrialN'
p9955
I0
sS'trials.thisRepN'
p9956
I170
sS'trials_2.thisTrial'
p9957
NsS'trials.thisN'
p9958
I340
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9959
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9960
I0
sS'trials_2.thisN'
p9961
I1
sa(dp9962
g20
g21
sS'trials.thisIndex'
p9963
g36
(g38
S'\x01\x00\x00\x00'
tRp9964
sg22
V
sS'trials_2.thisRepN'
p9965
I1
sS'trials_2.thisTrialN'
p9966
I0
sS'trials.thisRepN'
p9967
I170
sS'trials_2.thisTrial'
p9968
NsS'trials.thisN'
p9969
I341
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9970
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9971
I1
sS'trials_2.thisN'
p9972
I1
sa(dp9973
g20
g21
sS'trials.thisIndex'
p9974
g36
(g38
S'\x00\x00\x00\x00'
tRp9975
sg22
V
sS'trials_2.thisRepN'
p9976
I1
sS'trials_2.thisTrialN'
p9977
I0
sS'trials.thisRepN'
p9978
I171
sS'trials_2.thisTrial'
p9979
NsS'trials.thisN'
p9980
I342
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9981
g6216
sg6217
g6218
sS'trials.thisTrialN'
p9982
I0
sS'trials_2.thisN'
p9983
I1
sa(dp9984
g20
g21
sS'trials.thisIndex'
p9985
g36
(g38
S'\x01\x00\x00\x00'
tRp9986
sg22
V
sS'trials_2.thisRepN'
p9987
I1
sS'trials_2.thisTrialN'
p9988
I0
sS'trials.thisRepN'
p9989
I171
sS'trials_2.thisTrial'
p9990
NsS'trials.thisN'
p9991
I343
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p9992
g6216
sg6217
g6230
sS'trials.thisTrialN'
p9993
I1
sS'trials_2.thisN'
p9994
I1
sa(dp9995
g20
g21
sS'trials.thisIndex'
p9996
g36
(g38
S'\x00\x00\x00\x00'
tRp9997
sg22
V
sS'trials_2.thisRepN'
p9998
I1
sS'trials_2.thisTrialN'
p9999
I0
sS'trials.thisRepN'
p10000
I172
sS'trials_2.thisTrial'
p10001
NsS'trials.thisN'
p10002
I344
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10003
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10004
I0
sS'trials_2.thisN'
p10005
I1
sa(dp10006
g20
g21
sS'trials.thisIndex'
p10007
g36
(g38
S'\x01\x00\x00\x00'
tRp10008
sg22
V
sS'trials_2.thisRepN'
p10009
I1
sS'trials_2.thisTrialN'
p10010
I0
sS'trials.thisRepN'
p10011
I172
sS'trials_2.thisTrial'
p10012
NsS'trials.thisN'
p10013
I345
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10014
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10015
I1
sS'trials_2.thisN'
p10016
I1
sa(dp10017
g20
g21
sS'trials.thisIndex'
p10018
g36
(g38
S'\x00\x00\x00\x00'
tRp10019
sg22
V
sS'trials_2.thisRepN'
p10020
I1
sS'trials_2.thisTrialN'
p10021
I0
sS'trials.thisRepN'
p10022
I173
sS'trials_2.thisTrial'
p10023
NsS'trials.thisN'
p10024
I346
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10025
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10026
I0
sS'trials_2.thisN'
p10027
I1
sa(dp10028
g20
g21
sS'trials.thisIndex'
p10029
g36
(g38
S'\x01\x00\x00\x00'
tRp10030
sg22
V
sS'trials_2.thisRepN'
p10031
I1
sS'trials_2.thisTrialN'
p10032
I0
sS'trials.thisRepN'
p10033
I173
sS'trials_2.thisTrial'
p10034
NsS'trials.thisN'
p10035
I347
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10036
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10037
I1
sS'trials_2.thisN'
p10038
I1
sa(dp10039
g20
g21
sS'trials.thisIndex'
p10040
g36
(g38
S'\x00\x00\x00\x00'
tRp10041
sg22
V
sS'trials_2.thisRepN'
p10042
I1
sS'trials_2.thisTrialN'
p10043
I0
sS'trials.thisRepN'
p10044
I174
sS'trials_2.thisTrial'
p10045
NsS'trials.thisN'
p10046
I348
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10047
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10048
I0
sS'trials_2.thisN'
p10049
I1
sa(dp10050
g20
g21
sS'trials.thisIndex'
p10051
g36
(g38
S'\x01\x00\x00\x00'
tRp10052
sg22
V
sS'trials_2.thisRepN'
p10053
I1
sS'trials_2.thisTrialN'
p10054
I0
sS'trials.thisRepN'
p10055
I174
sS'trials_2.thisTrial'
p10056
NsS'trials.thisN'
p10057
I349
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10058
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10059
I1
sS'trials_2.thisN'
p10060
I1
sa(dp10061
g20
g21
sS'trials.thisIndex'
p10062
g36
(g38
S'\x00\x00\x00\x00'
tRp10063
sg22
V
sS'trials_2.thisRepN'
p10064
I1
sS'trials_2.thisTrialN'
p10065
I0
sS'trials.thisRepN'
p10066
I175
sS'trials_2.thisTrial'
p10067
NsS'trials.thisN'
p10068
I350
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10069
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10070
I0
sS'trials_2.thisN'
p10071
I1
sa(dp10072
g20
g21
sS'trials.thisIndex'
p10073
g36
(g38
S'\x01\x00\x00\x00'
tRp10074
sg22
V
sS'trials_2.thisRepN'
p10075
I1
sS'trials_2.thisTrialN'
p10076
I0
sS'trials.thisRepN'
p10077
I175
sS'trials_2.thisTrial'
p10078
NsS'trials.thisN'
p10079
I351
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10080
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10081
I1
sS'trials_2.thisN'
p10082
I1
sa(dp10083
g20
g21
sS'trials.thisIndex'
p10084
g36
(g38
S'\x00\x00\x00\x00'
tRp10085
sg22
V
sS'trials_2.thisRepN'
p10086
I1
sS'trials_2.thisTrialN'
p10087
I0
sS'trials.thisRepN'
p10088
I176
sS'trials_2.thisTrial'
p10089
NsS'trials.thisN'
p10090
I352
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10091
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10092
I0
sS'trials_2.thisN'
p10093
I1
sa(dp10094
g20
g21
sS'trials.thisIndex'
p10095
g36
(g38
S'\x01\x00\x00\x00'
tRp10096
sg22
V
sS'trials_2.thisRepN'
p10097
I1
sS'trials_2.thisTrialN'
p10098
I0
sS'trials.thisRepN'
p10099
I176
sS'trials_2.thisTrial'
p10100
NsS'trials.thisN'
p10101
I353
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10102
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10103
I1
sS'trials_2.thisN'
p10104
I1
sa(dp10105
g20
g21
sS'trials.thisIndex'
p10106
g36
(g38
S'\x00\x00\x00\x00'
tRp10107
sg22
V
sS'trials_2.thisRepN'
p10108
I1
sS'trials_2.thisTrialN'
p10109
I0
sS'trials.thisRepN'
p10110
I177
sS'trials_2.thisTrial'
p10111
NsS'trials.thisN'
p10112
I354
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10113
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10114
I0
sS'trials_2.thisN'
p10115
I1
sa(dp10116
g20
g21
sS'trials.thisIndex'
p10117
g36
(g38
S'\x01\x00\x00\x00'
tRp10118
sg22
V
sS'trials_2.thisRepN'
p10119
I1
sS'trials_2.thisTrialN'
p10120
I0
sS'trials.thisRepN'
p10121
I177
sS'trials_2.thisTrial'
p10122
NsS'trials.thisN'
p10123
I355
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10124
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10125
I1
sS'trials_2.thisN'
p10126
I1
sa(dp10127
g20
g21
sS'trials.thisIndex'
p10128
g36
(g38
S'\x00\x00\x00\x00'
tRp10129
sg22
V
sS'trials_2.thisRepN'
p10130
I1
sS'trials_2.thisTrialN'
p10131
I0
sS'trials.thisRepN'
p10132
I178
sS'trials_2.thisTrial'
p10133
NsS'trials.thisN'
p10134
I356
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10135
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10136
I0
sS'trials_2.thisN'
p10137
I1
sa(dp10138
g20
g21
sS'trials.thisIndex'
p10139
g36
(g38
S'\x01\x00\x00\x00'
tRp10140
sg22
V
sS'trials_2.thisRepN'
p10141
I1
sS'trials_2.thisTrialN'
p10142
I0
sS'trials.thisRepN'
p10143
I178
sS'trials_2.thisTrial'
p10144
NsS'trials.thisN'
p10145
I357
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10146
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10147
I1
sS'trials_2.thisN'
p10148
I1
sa(dp10149
g20
g21
sS'trials.thisIndex'
p10150
g36
(g38
S'\x00\x00\x00\x00'
tRp10151
sg22
V
sS'trials_2.thisRepN'
p10152
I1
sS'trials_2.thisTrialN'
p10153
I0
sS'trials.thisRepN'
p10154
I179
sS'trials_2.thisTrial'
p10155
NsS'trials.thisN'
p10156
I358
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10157
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10158
I0
sS'trials_2.thisN'
p10159
I1
sa(dp10160
g20
g21
sS'trials.thisIndex'
p10161
g36
(g38
S'\x01\x00\x00\x00'
tRp10162
sg22
V
sS'trials_2.thisRepN'
p10163
I1
sS'trials_2.thisTrialN'
p10164
I0
sS'trials.thisRepN'
p10165
I179
sS'trials_2.thisTrial'
p10166
NsS'trials.thisN'
p10167
I359
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10168
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10169
I1
sS'trials_2.thisN'
p10170
I1
sa(dp10171
g20
g21
sS'trials.thisIndex'
p10172
g36
(g38
S'\x00\x00\x00\x00'
tRp10173
sg22
V
sS'trials_2.thisRepN'
p10174
I1
sS'trials_2.thisTrialN'
p10175
I0
sS'trials.thisRepN'
p10176
I180
sS'trials_2.thisTrial'
p10177
NsS'trials.thisN'
p10178
I360
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10179
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10180
I0
sS'trials_2.thisN'
p10181
I1
sa(dp10182
g20
g21
sS'trials.thisIndex'
p10183
g36
(g38
S'\x01\x00\x00\x00'
tRp10184
sg22
V
sS'trials_2.thisRepN'
p10185
I1
sS'trials_2.thisTrialN'
p10186
I0
sS'trials.thisRepN'
p10187
I180
sS'trials_2.thisTrial'
p10188
NsS'trials.thisN'
p10189
I361
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10190
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10191
I1
sS'trials_2.thisN'
p10192
I1
sa(dp10193
g20
g21
sS'trials.thisIndex'
p10194
g36
(g38
S'\x00\x00\x00\x00'
tRp10195
sg22
V
sS'trials_2.thisRepN'
p10196
I1
sS'trials_2.thisTrialN'
p10197
I0
sS'trials.thisRepN'
p10198
I181
sS'trials_2.thisTrial'
p10199
NsS'trials.thisN'
p10200
I362
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10201
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10202
I0
sS'trials_2.thisN'
p10203
I1
sa(dp10204
g20
g21
sS'trials.thisIndex'
p10205
g36
(g38
S'\x01\x00\x00\x00'
tRp10206
sg22
V
sS'trials_2.thisRepN'
p10207
I1
sS'trials_2.thisTrialN'
p10208
I0
sS'trials.thisRepN'
p10209
I181
sS'trials_2.thisTrial'
p10210
NsS'trials.thisN'
p10211
I363
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10212
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10213
I1
sS'trials_2.thisN'
p10214
I1
sa(dp10215
g20
g21
sS'trials.thisIndex'
p10216
g36
(g38
S'\x00\x00\x00\x00'
tRp10217
sg22
V
sS'trials_2.thisRepN'
p10218
I1
sS'trials_2.thisTrialN'
p10219
I0
sS'trials.thisRepN'
p10220
I182
sS'trials_2.thisTrial'
p10221
NsS'trials.thisN'
p10222
I364
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10223
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10224
I0
sS'trials_2.thisN'
p10225
I1
sa(dp10226
g20
g21
sS'trials.thisIndex'
p10227
g36
(g38
S'\x01\x00\x00\x00'
tRp10228
sg22
V
sS'trials_2.thisRepN'
p10229
I1
sS'trials_2.thisTrialN'
p10230
I0
sS'trials.thisRepN'
p10231
I182
sS'trials_2.thisTrial'
p10232
NsS'trials.thisN'
p10233
I365
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10234
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10235
I1
sS'trials_2.thisN'
p10236
I1
sa(dp10237
g20
g21
sS'trials.thisIndex'
p10238
g36
(g38
S'\x00\x00\x00\x00'
tRp10239
sg22
V
sS'trials_2.thisRepN'
p10240
I1
sS'trials_2.thisTrialN'
p10241
I0
sS'trials.thisRepN'
p10242
I183
sS'trials_2.thisTrial'
p10243
NsS'trials.thisN'
p10244
I366
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10245
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10246
I0
sS'trials_2.thisN'
p10247
I1
sa(dp10248
g20
g21
sS'trials.thisIndex'
p10249
g36
(g38
S'\x01\x00\x00\x00'
tRp10250
sg22
V
sS'trials_2.thisRepN'
p10251
I1
sS'trials_2.thisTrialN'
p10252
I0
sS'trials.thisRepN'
p10253
I183
sS'trials_2.thisTrial'
p10254
NsS'trials.thisN'
p10255
I367
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10256
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10257
I1
sS'trials_2.thisN'
p10258
I1
sa(dp10259
g20
g21
sS'trials.thisIndex'
p10260
g36
(g38
S'\x00\x00\x00\x00'
tRp10261
sg22
V
sS'trials_2.thisRepN'
p10262
I1
sS'trials_2.thisTrialN'
p10263
I0
sS'trials.thisRepN'
p10264
I184
sS'trials_2.thisTrial'
p10265
NsS'trials.thisN'
p10266
I368
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10267
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10268
I0
sS'trials_2.thisN'
p10269
I1
sa(dp10270
g20
g21
sS'trials.thisIndex'
p10271
g36
(g38
S'\x01\x00\x00\x00'
tRp10272
sg22
V
sS'trials_2.thisRepN'
p10273
I1
sS'trials_2.thisTrialN'
p10274
I0
sS'trials.thisRepN'
p10275
I184
sS'trials_2.thisTrial'
p10276
NsS'trials.thisN'
p10277
I369
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10278
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10279
I1
sS'trials_2.thisN'
p10280
I1
sa(dp10281
g20
g21
sS'trials.thisIndex'
p10282
g36
(g38
S'\x00\x00\x00\x00'
tRp10283
sg22
V
sS'trials_2.thisRepN'
p10284
I1
sS'trials_2.thisTrialN'
p10285
I0
sS'trials.thisRepN'
p10286
I185
sS'trials_2.thisTrial'
p10287
NsS'trials.thisN'
p10288
I370
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10289
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10290
I0
sS'trials_2.thisN'
p10291
I1
sa(dp10292
g20
g21
sS'trials.thisIndex'
p10293
g36
(g38
S'\x01\x00\x00\x00'
tRp10294
sg22
V
sS'trials_2.thisRepN'
p10295
I1
sS'trials_2.thisTrialN'
p10296
I0
sS'trials.thisRepN'
p10297
I185
sS'trials_2.thisTrial'
p10298
NsS'trials.thisN'
p10299
I371
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10300
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10301
I1
sS'trials_2.thisN'
p10302
I1
sa(dp10303
g20
g21
sS'trials.thisIndex'
p10304
g36
(g38
S'\x00\x00\x00\x00'
tRp10305
sg22
V
sS'trials_2.thisRepN'
p10306
I1
sS'trials_2.thisTrialN'
p10307
I0
sS'trials.thisRepN'
p10308
I186
sS'trials_2.thisTrial'
p10309
NsS'trials.thisN'
p10310
I372
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10311
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10312
I0
sS'trials_2.thisN'
p10313
I1
sa(dp10314
g20
g21
sS'trials.thisIndex'
p10315
g36
(g38
S'\x01\x00\x00\x00'
tRp10316
sg22
V
sS'trials_2.thisRepN'
p10317
I1
sS'trials_2.thisTrialN'
p10318
I0
sS'trials.thisRepN'
p10319
I186
sS'trials_2.thisTrial'
p10320
NsS'trials.thisN'
p10321
I373
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10322
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10323
I1
sS'trials_2.thisN'
p10324
I1
sa(dp10325
g20
g21
sS'trials.thisIndex'
p10326
g36
(g38
S'\x00\x00\x00\x00'
tRp10327
sg22
V
sS'trials_2.thisRepN'
p10328
I1
sS'trials_2.thisTrialN'
p10329
I0
sS'trials.thisRepN'
p10330
I187
sS'trials_2.thisTrial'
p10331
NsS'trials.thisN'
p10332
I374
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10333
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10334
I0
sS'trials_2.thisN'
p10335
I1
sa(dp10336
g20
g21
sS'trials.thisIndex'
p10337
g36
(g38
S'\x01\x00\x00\x00'
tRp10338
sg22
V
sS'trials_2.thisRepN'
p10339
I1
sS'trials_2.thisTrialN'
p10340
I0
sS'trials.thisRepN'
p10341
I187
sS'trials_2.thisTrial'
p10342
NsS'trials.thisN'
p10343
I375
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10344
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10345
I1
sS'trials_2.thisN'
p10346
I1
sa(dp10347
g20
g21
sS'trials.thisIndex'
p10348
g36
(g38
S'\x00\x00\x00\x00'
tRp10349
sg22
V
sS'trials_2.thisRepN'
p10350
I1
sS'trials_2.thisTrialN'
p10351
I0
sS'trials.thisRepN'
p10352
I188
sS'trials_2.thisTrial'
p10353
NsS'trials.thisN'
p10354
I376
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10355
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10356
I0
sS'trials_2.thisN'
p10357
I1
sa(dp10358
g20
g21
sS'trials.thisIndex'
p10359
g36
(g38
S'\x01\x00\x00\x00'
tRp10360
sg22
V
sS'trials_2.thisRepN'
p10361
I1
sS'trials_2.thisTrialN'
p10362
I0
sS'trials.thisRepN'
p10363
I188
sS'trials_2.thisTrial'
p10364
NsS'trials.thisN'
p10365
I377
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10366
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10367
I1
sS'trials_2.thisN'
p10368
I1
sa(dp10369
g20
g21
sS'trials.thisIndex'
p10370
g36
(g38
S'\x00\x00\x00\x00'
tRp10371
sg22
V
sS'trials_2.thisRepN'
p10372
I1
sS'trials_2.thisTrialN'
p10373
I0
sS'trials.thisRepN'
p10374
I189
sS'trials_2.thisTrial'
p10375
NsS'trials.thisN'
p10376
I378
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10377
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10378
I0
sS'trials_2.thisN'
p10379
I1
sa(dp10380
g20
g21
sS'trials.thisIndex'
p10381
g36
(g38
S'\x01\x00\x00\x00'
tRp10382
sg22
V
sS'trials_2.thisRepN'
p10383
I1
sS'trials_2.thisTrialN'
p10384
I0
sS'trials.thisRepN'
p10385
I189
sS'trials_2.thisTrial'
p10386
NsS'trials.thisN'
p10387
I379
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10388
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10389
I1
sS'trials_2.thisN'
p10390
I1
sa(dp10391
g20
g21
sS'trials.thisIndex'
p10392
g36
(g38
S'\x00\x00\x00\x00'
tRp10393
sg22
V
sS'trials_2.thisRepN'
p10394
I1
sS'trials_2.thisTrialN'
p10395
I0
sS'trials.thisRepN'
p10396
I190
sS'trials_2.thisTrial'
p10397
NsS'trials.thisN'
p10398
I380
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10399
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10400
I0
sS'trials_2.thisN'
p10401
I1
sa(dp10402
g20
g21
sS'trials.thisIndex'
p10403
g36
(g38
S'\x01\x00\x00\x00'
tRp10404
sg22
V
sS'trials_2.thisRepN'
p10405
I1
sS'trials_2.thisTrialN'
p10406
I0
sS'trials.thisRepN'
p10407
I190
sS'trials_2.thisTrial'
p10408
NsS'trials.thisN'
p10409
I381
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10410
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10411
I1
sS'trials_2.thisN'
p10412
I1
sa(dp10413
g20
g21
sS'trials.thisIndex'
p10414
g36
(g38
S'\x00\x00\x00\x00'
tRp10415
sg22
V
sS'trials_2.thisRepN'
p10416
I1
sS'trials_2.thisTrialN'
p10417
I0
sS'trials.thisRepN'
p10418
I191
sS'trials_2.thisTrial'
p10419
NsS'trials.thisN'
p10420
I382
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10421
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10422
I0
sS'trials_2.thisN'
p10423
I1
sa(dp10424
g20
g21
sS'trials.thisIndex'
p10425
g36
(g38
S'\x01\x00\x00\x00'
tRp10426
sg22
V
sS'trials_2.thisRepN'
p10427
I1
sS'trials_2.thisTrialN'
p10428
I0
sS'trials.thisRepN'
p10429
I191
sS'trials_2.thisTrial'
p10430
NsS'trials.thisN'
p10431
I383
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10432
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10433
I1
sS'trials_2.thisN'
p10434
I1
sa(dp10435
g20
g21
sS'trials.thisIndex'
p10436
g36
(g38
S'\x00\x00\x00\x00'
tRp10437
sg22
V
sS'trials_2.thisRepN'
p10438
I1
sS'trials_2.thisTrialN'
p10439
I0
sS'trials.thisRepN'
p10440
I192
sS'trials_2.thisTrial'
p10441
NsS'trials.thisN'
p10442
I384
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10443
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10444
I0
sS'trials_2.thisN'
p10445
I1
sa(dp10446
g20
g21
sS'trials.thisIndex'
p10447
g36
(g38
S'\x01\x00\x00\x00'
tRp10448
sg22
V
sS'trials_2.thisRepN'
p10449
I1
sS'trials_2.thisTrialN'
p10450
I0
sS'trials.thisRepN'
p10451
I192
sS'trials_2.thisTrial'
p10452
NsS'trials.thisN'
p10453
I385
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10454
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10455
I1
sS'trials_2.thisN'
p10456
I1
sa(dp10457
g20
g21
sS'trials.thisIndex'
p10458
g36
(g38
S'\x00\x00\x00\x00'
tRp10459
sg22
V
sS'trials_2.thisRepN'
p10460
I1
sS'trials_2.thisTrialN'
p10461
I0
sS'trials.thisRepN'
p10462
I193
sS'trials_2.thisTrial'
p10463
NsS'trials.thisN'
p10464
I386
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10465
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10466
I0
sS'trials_2.thisN'
p10467
I1
sa(dp10468
g20
g21
sS'trials.thisIndex'
p10469
g36
(g38
S'\x01\x00\x00\x00'
tRp10470
sg22
V
sS'trials_2.thisRepN'
p10471
I1
sS'trials_2.thisTrialN'
p10472
I0
sS'trials.thisRepN'
p10473
I193
sS'trials_2.thisTrial'
p10474
NsS'trials.thisN'
p10475
I387
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10476
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10477
I1
sS'trials_2.thisN'
p10478
I1
sa(dp10479
g20
g21
sS'trials.thisIndex'
p10480
g36
(g38
S'\x00\x00\x00\x00'
tRp10481
sg22
V
sS'trials_2.thisRepN'
p10482
I1
sS'trials_2.thisTrialN'
p10483
I0
sS'trials.thisRepN'
p10484
I194
sS'trials_2.thisTrial'
p10485
NsS'trials.thisN'
p10486
I388
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10487
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10488
I0
sS'trials_2.thisN'
p10489
I1
sa(dp10490
g20
g21
sS'trials.thisIndex'
p10491
g36
(g38
S'\x01\x00\x00\x00'
tRp10492
sg22
V
sS'trials_2.thisRepN'
p10493
I1
sS'trials_2.thisTrialN'
p10494
I0
sS'trials.thisRepN'
p10495
I194
sS'trials_2.thisTrial'
p10496
NsS'trials.thisN'
p10497
I389
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10498
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10499
I1
sS'trials_2.thisN'
p10500
I1
sa(dp10501
g20
g21
sS'trials.thisIndex'
p10502
g36
(g38
S'\x00\x00\x00\x00'
tRp10503
sg22
V
sS'trials_2.thisRepN'
p10504
I1
sS'trials_2.thisTrialN'
p10505
I0
sS'trials.thisRepN'
p10506
I195
sS'trials_2.thisTrial'
p10507
NsS'trials.thisN'
p10508
I390
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10509
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10510
I0
sS'trials_2.thisN'
p10511
I1
sa(dp10512
g20
g21
sS'trials.thisIndex'
p10513
g36
(g38
S'\x01\x00\x00\x00'
tRp10514
sg22
V
sS'trials_2.thisRepN'
p10515
I1
sS'trials_2.thisTrialN'
p10516
I0
sS'trials.thisRepN'
p10517
I195
sS'trials_2.thisTrial'
p10518
NsS'trials.thisN'
p10519
I391
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10520
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10521
I1
sS'trials_2.thisN'
p10522
I1
sa(dp10523
g20
g21
sS'trials.thisIndex'
p10524
g36
(g38
S'\x00\x00\x00\x00'
tRp10525
sg22
V
sS'trials_2.thisRepN'
p10526
I1
sS'trials_2.thisTrialN'
p10527
I0
sS'trials.thisRepN'
p10528
I196
sS'trials_2.thisTrial'
p10529
NsS'trials.thisN'
p10530
I392
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10531
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10532
I0
sS'trials_2.thisN'
p10533
I1
sa(dp10534
g20
g21
sS'trials.thisIndex'
p10535
g36
(g38
S'\x01\x00\x00\x00'
tRp10536
sg22
V
sS'trials_2.thisRepN'
p10537
I1
sS'trials_2.thisTrialN'
p10538
I0
sS'trials.thisRepN'
p10539
I196
sS'trials_2.thisTrial'
p10540
NsS'trials.thisN'
p10541
I393
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10542
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10543
I1
sS'trials_2.thisN'
p10544
I1
sa(dp10545
g20
g21
sS'trials.thisIndex'
p10546
g36
(g38
S'\x00\x00\x00\x00'
tRp10547
sg22
V
sS'trials_2.thisRepN'
p10548
I1
sS'trials_2.thisTrialN'
p10549
I0
sS'trials.thisRepN'
p10550
I197
sS'trials_2.thisTrial'
p10551
NsS'trials.thisN'
p10552
I394
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10553
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10554
I0
sS'trials_2.thisN'
p10555
I1
sa(dp10556
g20
g21
sS'trials.thisIndex'
p10557
g36
(g38
S'\x01\x00\x00\x00'
tRp10558
sg22
V
sS'trials_2.thisRepN'
p10559
I1
sS'trials_2.thisTrialN'
p10560
I0
sS'trials.thisRepN'
p10561
I197
sS'trials_2.thisTrial'
p10562
NsS'trials.thisN'
p10563
I395
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10564
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10565
I1
sS'trials_2.thisN'
p10566
I1
sa(dp10567
g20
g21
sS'trials.thisIndex'
p10568
g36
(g38
S'\x00\x00\x00\x00'
tRp10569
sg22
V
sS'trials_2.thisRepN'
p10570
I1
sS'trials_2.thisTrialN'
p10571
I0
sS'trials.thisRepN'
p10572
I198
sS'trials_2.thisTrial'
p10573
NsS'trials.thisN'
p10574
I396
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10575
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10576
I0
sS'trials_2.thisN'
p10577
I1
sa(dp10578
g20
g21
sS'trials.thisIndex'
p10579
g36
(g38
S'\x01\x00\x00\x00'
tRp10580
sg22
V
sS'trials_2.thisRepN'
p10581
I1
sS'trials_2.thisTrialN'
p10582
I0
sS'trials.thisRepN'
p10583
I198
sS'trials_2.thisTrial'
p10584
NsS'trials.thisN'
p10585
I397
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10586
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10587
I1
sS'trials_2.thisN'
p10588
I1
sa(dp10589
g20
g21
sS'trials.thisIndex'
p10590
g36
(g38
S'\x00\x00\x00\x00'
tRp10591
sg22
V
sS'trials_2.thisRepN'
p10592
I1
sS'trials_2.thisTrialN'
p10593
I0
sS'trials.thisRepN'
p10594
I199
sS'trials_2.thisTrial'
p10595
NsS'trials.thisN'
p10596
I398
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10597
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10598
I0
sS'trials_2.thisN'
p10599
I1
sa(dp10600
g20
g21
sS'trials.thisIndex'
p10601
g36
(g38
S'\x01\x00\x00\x00'
tRp10602
sg22
V
sS'trials_2.thisRepN'
p10603
I1
sS'trials_2.thisTrialN'
p10604
I0
sS'trials.thisRepN'
p10605
I199
sS'trials_2.thisTrial'
p10606
NsS'trials.thisN'
p10607
I399
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10608
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10609
I1
sS'trials_2.thisN'
p10610
I1
sa(dp10611
g20
g21
sS'trials.thisIndex'
p10612
g36
(g38
S'\x00\x00\x00\x00'
tRp10613
sg22
V
sS'trials_2.thisRepN'
p10614
I1
sS'trials_2.thisTrialN'
p10615
I0
sS'trials.thisRepN'
p10616
I200
sS'trials_2.thisTrial'
p10617
NsS'trials.thisN'
p10618
I400
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10619
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10620
I0
sS'trials_2.thisN'
p10621
I1
sa(dp10622
g20
g21
sS'trials.thisIndex'
p10623
g36
(g38
S'\x01\x00\x00\x00'
tRp10624
sg22
V
sS'trials_2.thisRepN'
p10625
I1
sS'trials_2.thisTrialN'
p10626
I0
sS'trials.thisRepN'
p10627
I200
sS'trials_2.thisTrial'
p10628
NsS'trials.thisN'
p10629
I401
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10630
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10631
I1
sS'trials_2.thisN'
p10632
I1
sa(dp10633
g20
g21
sS'trials.thisIndex'
p10634
g36
(g38
S'\x00\x00\x00\x00'
tRp10635
sg22
V
sS'trials_2.thisRepN'
p10636
I1
sS'trials_2.thisTrialN'
p10637
I0
sS'trials.thisRepN'
p10638
I201
sS'trials_2.thisTrial'
p10639
NsS'trials.thisN'
p10640
I402
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10641
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10642
I0
sS'trials_2.thisN'
p10643
I1
sa(dp10644
g20
g21
sS'trials.thisIndex'
p10645
g36
(g38
S'\x01\x00\x00\x00'
tRp10646
sg22
V
sS'trials_2.thisRepN'
p10647
I1
sS'trials_2.thisTrialN'
p10648
I0
sS'trials.thisRepN'
p10649
I201
sS'trials_2.thisTrial'
p10650
NsS'trials.thisN'
p10651
I403
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10652
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10653
I1
sS'trials_2.thisN'
p10654
I1
sa(dp10655
g20
g21
sS'trials.thisIndex'
p10656
g36
(g38
S'\x00\x00\x00\x00'
tRp10657
sg22
V
sS'trials_2.thisRepN'
p10658
I1
sS'trials_2.thisTrialN'
p10659
I0
sS'trials.thisRepN'
p10660
I202
sS'trials_2.thisTrial'
p10661
NsS'trials.thisN'
p10662
I404
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10663
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10664
I0
sS'trials_2.thisN'
p10665
I1
sa(dp10666
g20
g21
sS'trials.thisIndex'
p10667
g36
(g38
S'\x01\x00\x00\x00'
tRp10668
sg22
V
sS'trials_2.thisRepN'
p10669
I1
sS'trials_2.thisTrialN'
p10670
I0
sS'trials.thisRepN'
p10671
I202
sS'trials_2.thisTrial'
p10672
NsS'trials.thisN'
p10673
I405
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10674
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10675
I1
sS'trials_2.thisN'
p10676
I1
sa(dp10677
g20
g21
sS'trials.thisIndex'
p10678
g36
(g38
S'\x00\x00\x00\x00'
tRp10679
sg22
V
sS'trials_2.thisRepN'
p10680
I1
sS'trials_2.thisTrialN'
p10681
I0
sS'trials.thisRepN'
p10682
I203
sS'trials_2.thisTrial'
p10683
NsS'trials.thisN'
p10684
I406
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10685
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10686
I0
sS'trials_2.thisN'
p10687
I1
sa(dp10688
g20
g21
sS'trials.thisIndex'
p10689
g36
(g38
S'\x01\x00\x00\x00'
tRp10690
sg22
V
sS'trials_2.thisRepN'
p10691
I1
sS'trials_2.thisTrialN'
p10692
I0
sS'trials.thisRepN'
p10693
I203
sS'trials_2.thisTrial'
p10694
NsS'trials.thisN'
p10695
I407
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10696
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10697
I1
sS'trials_2.thisN'
p10698
I1
sa(dp10699
g20
g21
sS'trials.thisIndex'
p10700
g36
(g38
S'\x00\x00\x00\x00'
tRp10701
sg22
V
sS'trials_2.thisRepN'
p10702
I1
sS'trials_2.thisTrialN'
p10703
I0
sS'trials.thisRepN'
p10704
I204
sS'trials_2.thisTrial'
p10705
NsS'trials.thisN'
p10706
I408
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10707
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10708
I0
sS'trials_2.thisN'
p10709
I1
sa(dp10710
g20
g21
sS'trials.thisIndex'
p10711
g36
(g38
S'\x01\x00\x00\x00'
tRp10712
sg22
V
sS'trials_2.thisRepN'
p10713
I1
sS'trials_2.thisTrialN'
p10714
I0
sS'trials.thisRepN'
p10715
I204
sS'trials_2.thisTrial'
p10716
NsS'trials.thisN'
p10717
I409
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10718
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10719
I1
sS'trials_2.thisN'
p10720
I1
sa(dp10721
g20
g21
sS'trials.thisIndex'
p10722
g36
(g38
S'\x00\x00\x00\x00'
tRp10723
sg22
V
sS'trials_2.thisRepN'
p10724
I1
sS'trials_2.thisTrialN'
p10725
I0
sS'trials.thisRepN'
p10726
I205
sS'trials_2.thisTrial'
p10727
NsS'trials.thisN'
p10728
I410
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10729
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10730
I0
sS'trials_2.thisN'
p10731
I1
sa(dp10732
g20
g21
sS'trials.thisIndex'
p10733
g36
(g38
S'\x01\x00\x00\x00'
tRp10734
sg22
V
sS'trials_2.thisRepN'
p10735
I1
sS'trials_2.thisTrialN'
p10736
I0
sS'trials.thisRepN'
p10737
I205
sS'trials_2.thisTrial'
p10738
NsS'trials.thisN'
p10739
I411
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10740
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10741
I1
sS'trials_2.thisN'
p10742
I1
sa(dp10743
g20
g21
sS'trials.thisIndex'
p10744
g36
(g38
S'\x00\x00\x00\x00'
tRp10745
sg22
V
sS'trials_2.thisRepN'
p10746
I1
sS'trials_2.thisTrialN'
p10747
I0
sS'trials.thisRepN'
p10748
I206
sS'trials_2.thisTrial'
p10749
NsS'trials.thisN'
p10750
I412
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10751
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10752
I0
sS'trials_2.thisN'
p10753
I1
sa(dp10754
g20
g21
sS'trials.thisIndex'
p10755
g36
(g38
S'\x01\x00\x00\x00'
tRp10756
sg22
V
sS'trials_2.thisRepN'
p10757
I1
sS'trials_2.thisTrialN'
p10758
I0
sS'trials.thisRepN'
p10759
I206
sS'trials_2.thisTrial'
p10760
NsS'trials.thisN'
p10761
I413
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10762
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10763
I1
sS'trials_2.thisN'
p10764
I1
sa(dp10765
g20
g21
sS'trials.thisIndex'
p10766
g36
(g38
S'\x00\x00\x00\x00'
tRp10767
sg22
V
sS'trials_2.thisRepN'
p10768
I1
sS'trials_2.thisTrialN'
p10769
I0
sS'trials.thisRepN'
p10770
I207
sS'trials_2.thisTrial'
p10771
NsS'trials.thisN'
p10772
I414
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10773
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10774
I0
sS'trials_2.thisN'
p10775
I1
sa(dp10776
g20
g21
sS'trials.thisIndex'
p10777
g36
(g38
S'\x01\x00\x00\x00'
tRp10778
sg22
V
sS'trials_2.thisRepN'
p10779
I1
sS'trials_2.thisTrialN'
p10780
I0
sS'trials.thisRepN'
p10781
I207
sS'trials_2.thisTrial'
p10782
NsS'trials.thisN'
p10783
I415
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10784
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10785
I1
sS'trials_2.thisN'
p10786
I1
sa(dp10787
g20
g21
sS'trials.thisIndex'
p10788
g36
(g38
S'\x00\x00\x00\x00'
tRp10789
sg22
V
sS'trials_2.thisRepN'
p10790
I1
sS'trials_2.thisTrialN'
p10791
I0
sS'trials.thisRepN'
p10792
I208
sS'trials_2.thisTrial'
p10793
NsS'trials.thisN'
p10794
I416
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10795
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10796
I0
sS'trials_2.thisN'
p10797
I1
sa(dp10798
g20
g21
sS'trials.thisIndex'
p10799
g36
(g38
S'\x01\x00\x00\x00'
tRp10800
sg22
V
sS'trials_2.thisRepN'
p10801
I1
sS'trials_2.thisTrialN'
p10802
I0
sS'trials.thisRepN'
p10803
I208
sS'trials_2.thisTrial'
p10804
NsS'trials.thisN'
p10805
I417
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10806
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10807
I1
sS'trials_2.thisN'
p10808
I1
sa(dp10809
g20
g21
sS'trials.thisIndex'
p10810
g36
(g38
S'\x00\x00\x00\x00'
tRp10811
sg22
V
sS'trials_2.thisRepN'
p10812
I1
sS'trials_2.thisTrialN'
p10813
I0
sS'trials.thisRepN'
p10814
I209
sS'trials_2.thisTrial'
p10815
NsS'trials.thisN'
p10816
I418
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10817
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10818
I0
sS'trials_2.thisN'
p10819
I1
sa(dp10820
g20
g21
sS'trials.thisIndex'
p10821
g36
(g38
S'\x01\x00\x00\x00'
tRp10822
sg22
V
sS'trials_2.thisRepN'
p10823
I1
sS'trials_2.thisTrialN'
p10824
I0
sS'trials.thisRepN'
p10825
I209
sS'trials_2.thisTrial'
p10826
NsS'trials.thisN'
p10827
I419
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10828
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10829
I1
sS'trials_2.thisN'
p10830
I1
sa(dp10831
g20
g21
sS'trials.thisIndex'
p10832
g36
(g38
S'\x00\x00\x00\x00'
tRp10833
sg22
V
sS'trials_2.thisRepN'
p10834
I1
sS'trials_2.thisTrialN'
p10835
I0
sS'trials.thisRepN'
p10836
I210
sS'trials_2.thisTrial'
p10837
NsS'trials.thisN'
p10838
I420
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10839
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10840
I0
sS'trials_2.thisN'
p10841
I1
sa(dp10842
g20
g21
sS'trials.thisIndex'
p10843
g36
(g38
S'\x01\x00\x00\x00'
tRp10844
sg22
V
sS'trials_2.thisRepN'
p10845
I1
sS'trials_2.thisTrialN'
p10846
I0
sS'trials.thisRepN'
p10847
I210
sS'trials_2.thisTrial'
p10848
NsS'trials.thisN'
p10849
I421
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10850
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10851
I1
sS'trials_2.thisN'
p10852
I1
sa(dp10853
g20
g21
sS'trials.thisIndex'
p10854
g36
(g38
S'\x00\x00\x00\x00'
tRp10855
sg22
V
sS'trials_2.thisRepN'
p10856
I1
sS'trials_2.thisTrialN'
p10857
I0
sS'trials.thisRepN'
p10858
I211
sS'trials_2.thisTrial'
p10859
NsS'trials.thisN'
p10860
I422
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10861
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10862
I0
sS'trials_2.thisN'
p10863
I1
sa(dp10864
g20
g21
sS'trials.thisIndex'
p10865
g36
(g38
S'\x01\x00\x00\x00'
tRp10866
sg22
V
sS'trials_2.thisRepN'
p10867
I1
sS'trials_2.thisTrialN'
p10868
I0
sS'trials.thisRepN'
p10869
I211
sS'trials_2.thisTrial'
p10870
NsS'trials.thisN'
p10871
I423
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10872
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10873
I1
sS'trials_2.thisN'
p10874
I1
sa(dp10875
g20
g21
sS'trials.thisIndex'
p10876
g36
(g38
S'\x00\x00\x00\x00'
tRp10877
sg22
V
sS'trials_2.thisRepN'
p10878
I1
sS'trials_2.thisTrialN'
p10879
I0
sS'trials.thisRepN'
p10880
I212
sS'trials_2.thisTrial'
p10881
NsS'trials.thisN'
p10882
I424
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10883
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10884
I0
sS'trials_2.thisN'
p10885
I1
sa(dp10886
g20
g21
sS'trials.thisIndex'
p10887
g36
(g38
S'\x01\x00\x00\x00'
tRp10888
sg22
V
sS'trials_2.thisRepN'
p10889
I1
sS'trials_2.thisTrialN'
p10890
I0
sS'trials.thisRepN'
p10891
I212
sS'trials_2.thisTrial'
p10892
NsS'trials.thisN'
p10893
I425
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10894
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10895
I1
sS'trials_2.thisN'
p10896
I1
sa(dp10897
g20
g21
sS'trials.thisIndex'
p10898
g36
(g38
S'\x00\x00\x00\x00'
tRp10899
sg22
V
sS'trials_2.thisRepN'
p10900
I1
sS'trials_2.thisTrialN'
p10901
I0
sS'trials.thisRepN'
p10902
I213
sS'trials_2.thisTrial'
p10903
NsS'trials.thisN'
p10904
I426
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10905
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10906
I0
sS'trials_2.thisN'
p10907
I1
sa(dp10908
g20
g21
sS'trials.thisIndex'
p10909
g36
(g38
S'\x01\x00\x00\x00'
tRp10910
sg22
V
sS'trials_2.thisRepN'
p10911
I1
sS'trials_2.thisTrialN'
p10912
I0
sS'trials.thisRepN'
p10913
I213
sS'trials_2.thisTrial'
p10914
NsS'trials.thisN'
p10915
I427
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10916
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10917
I1
sS'trials_2.thisN'
p10918
I1
sa(dp10919
g20
g21
sS'trials.thisIndex'
p10920
g36
(g38
S'\x00\x00\x00\x00'
tRp10921
sg22
V
sS'trials_2.thisRepN'
p10922
I1
sS'trials_2.thisTrialN'
p10923
I0
sS'trials.thisRepN'
p10924
I214
sS'trials_2.thisTrial'
p10925
NsS'trials.thisN'
p10926
I428
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10927
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10928
I0
sS'trials_2.thisN'
p10929
I1
sa(dp10930
g20
g21
sS'trials.thisIndex'
p10931
g36
(g38
S'\x01\x00\x00\x00'
tRp10932
sg22
V
sS'trials_2.thisRepN'
p10933
I1
sS'trials_2.thisTrialN'
p10934
I0
sS'trials.thisRepN'
p10935
I214
sS'trials_2.thisTrial'
p10936
NsS'trials.thisN'
p10937
I429
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10938
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10939
I1
sS'trials_2.thisN'
p10940
I1
sa(dp10941
g20
g21
sS'trials.thisIndex'
p10942
g36
(g38
S'\x00\x00\x00\x00'
tRp10943
sg22
V
sS'trials_2.thisRepN'
p10944
I1
sS'trials_2.thisTrialN'
p10945
I0
sS'trials.thisRepN'
p10946
I215
sS'trials_2.thisTrial'
p10947
NsS'trials.thisN'
p10948
I430
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10949
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10950
I0
sS'trials_2.thisN'
p10951
I1
sa(dp10952
g20
g21
sS'trials.thisIndex'
p10953
g36
(g38
S'\x01\x00\x00\x00'
tRp10954
sg22
V
sS'trials_2.thisRepN'
p10955
I1
sS'trials_2.thisTrialN'
p10956
I0
sS'trials.thisRepN'
p10957
I215
sS'trials_2.thisTrial'
p10958
NsS'trials.thisN'
p10959
I431
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10960
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10961
I1
sS'trials_2.thisN'
p10962
I1
sa(dp10963
g20
g21
sS'trials.thisIndex'
p10964
g36
(g38
S'\x00\x00\x00\x00'
tRp10965
sg22
V
sS'trials_2.thisRepN'
p10966
I1
sS'trials_2.thisTrialN'
p10967
I0
sS'trials.thisRepN'
p10968
I216
sS'trials_2.thisTrial'
p10969
NsS'trials.thisN'
p10970
I432
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10971
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10972
I0
sS'trials_2.thisN'
p10973
I1
sa(dp10974
g20
g21
sS'trials.thisIndex'
p10975
g36
(g38
S'\x01\x00\x00\x00'
tRp10976
sg22
V
sS'trials_2.thisRepN'
p10977
I1
sS'trials_2.thisTrialN'
p10978
I0
sS'trials.thisRepN'
p10979
I216
sS'trials_2.thisTrial'
p10980
NsS'trials.thisN'
p10981
I433
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10982
g6216
sg6217
g6230
sS'trials.thisTrialN'
p10983
I1
sS'trials_2.thisN'
p10984
I1
sa(dp10985
g20
g21
sS'trials.thisIndex'
p10986
g36
(g38
S'\x00\x00\x00\x00'
tRp10987
sg22
V
sS'trials_2.thisRepN'
p10988
I1
sS'trials_2.thisTrialN'
p10989
I0
sS'trials.thisRepN'
p10990
I217
sS'trials_2.thisTrial'
p10991
NsS'trials.thisN'
p10992
I434
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p10993
g6216
sg6217
g6218
sS'trials.thisTrialN'
p10994
I0
sS'trials_2.thisN'
p10995
I1
sa(dp10996
g20
g21
sS'trials.thisIndex'
p10997
g36
(g38
S'\x01\x00\x00\x00'
tRp10998
sg22
V
sS'trials_2.thisRepN'
p10999
I1
sS'trials_2.thisTrialN'
p11000
I0
sS'trials.thisRepN'
p11001
I217
sS'trials_2.thisTrial'
p11002
NsS'trials.thisN'
p11003
I435
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11004
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11005
I1
sS'trials_2.thisN'
p11006
I1
sa(dp11007
g20
g21
sS'trials.thisIndex'
p11008
g36
(g38
S'\x00\x00\x00\x00'
tRp11009
sg22
V
sS'trials_2.thisRepN'
p11010
I1
sS'trials_2.thisTrialN'
p11011
I0
sS'trials.thisRepN'
p11012
I218
sS'trials_2.thisTrial'
p11013
NsS'trials.thisN'
p11014
I436
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11015
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11016
I0
sS'trials_2.thisN'
p11017
I1
sa(dp11018
g20
g21
sS'trials.thisIndex'
p11019
g36
(g38
S'\x01\x00\x00\x00'
tRp11020
sg22
V
sS'trials_2.thisRepN'
p11021
I1
sS'trials_2.thisTrialN'
p11022
I0
sS'trials.thisRepN'
p11023
I218
sS'trials_2.thisTrial'
p11024
NsS'trials.thisN'
p11025
I437
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11026
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11027
I1
sS'trials_2.thisN'
p11028
I1
sa(dp11029
g20
g21
sS'trials.thisIndex'
p11030
g36
(g38
S'\x00\x00\x00\x00'
tRp11031
sg22
V
sS'trials_2.thisRepN'
p11032
I1
sS'trials_2.thisTrialN'
p11033
I0
sS'trials.thisRepN'
p11034
I219
sS'trials_2.thisTrial'
p11035
NsS'trials.thisN'
p11036
I438
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11037
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11038
I0
sS'trials_2.thisN'
p11039
I1
sa(dp11040
g20
g21
sS'trials.thisIndex'
p11041
g36
(g38
S'\x01\x00\x00\x00'
tRp11042
sg22
V
sS'trials_2.thisRepN'
p11043
I1
sS'trials_2.thisTrialN'
p11044
I0
sS'trials.thisRepN'
p11045
I219
sS'trials_2.thisTrial'
p11046
NsS'trials.thisN'
p11047
I439
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11048
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11049
I1
sS'trials_2.thisN'
p11050
I1
sa(dp11051
g20
g21
sS'trials.thisIndex'
p11052
g36
(g38
S'\x00\x00\x00\x00'
tRp11053
sg22
V
sS'trials_2.thisRepN'
p11054
I1
sS'trials_2.thisTrialN'
p11055
I0
sS'trials.thisRepN'
p11056
I220
sS'trials_2.thisTrial'
p11057
NsS'trials.thisN'
p11058
I440
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11059
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11060
I0
sS'trials_2.thisN'
p11061
I1
sa(dp11062
g20
g21
sS'trials.thisIndex'
p11063
g36
(g38
S'\x01\x00\x00\x00'
tRp11064
sg22
V
sS'trials_2.thisRepN'
p11065
I1
sS'trials_2.thisTrialN'
p11066
I0
sS'trials.thisRepN'
p11067
I220
sS'trials_2.thisTrial'
p11068
NsS'trials.thisN'
p11069
I441
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11070
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11071
I1
sS'trials_2.thisN'
p11072
I1
sa(dp11073
g20
g21
sS'trials.thisIndex'
p11074
g36
(g38
S'\x00\x00\x00\x00'
tRp11075
sg22
V
sS'trials_2.thisRepN'
p11076
I1
sS'trials_2.thisTrialN'
p11077
I0
sS'trials.thisRepN'
p11078
I221
sS'trials_2.thisTrial'
p11079
NsS'trials.thisN'
p11080
I442
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11081
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11082
I0
sS'trials_2.thisN'
p11083
I1
sa(dp11084
g20
g21
sS'trials.thisIndex'
p11085
g36
(g38
S'\x01\x00\x00\x00'
tRp11086
sg22
V
sS'trials_2.thisRepN'
p11087
I1
sS'trials_2.thisTrialN'
p11088
I0
sS'trials.thisRepN'
p11089
I221
sS'trials_2.thisTrial'
p11090
NsS'trials.thisN'
p11091
I443
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11092
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11093
I1
sS'trials_2.thisN'
p11094
I1
sa(dp11095
g20
g21
sS'trials.thisIndex'
p11096
g36
(g38
S'\x00\x00\x00\x00'
tRp11097
sg22
V
sS'trials_2.thisRepN'
p11098
I1
sS'trials_2.thisTrialN'
p11099
I0
sS'trials.thisRepN'
p11100
I222
sS'trials_2.thisTrial'
p11101
NsS'trials.thisN'
p11102
I444
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11103
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11104
I0
sS'trials_2.thisN'
p11105
I1
sa(dp11106
g20
g21
sS'trials.thisIndex'
p11107
g36
(g38
S'\x01\x00\x00\x00'
tRp11108
sg22
V
sS'trials_2.thisRepN'
p11109
I1
sS'trials_2.thisTrialN'
p11110
I0
sS'trials.thisRepN'
p11111
I222
sS'trials_2.thisTrial'
p11112
NsS'trials.thisN'
p11113
I445
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11114
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11115
I1
sS'trials_2.thisN'
p11116
I1
sa(dp11117
g20
g21
sS'trials.thisIndex'
p11118
g36
(g38
S'\x00\x00\x00\x00'
tRp11119
sg22
V
sS'trials_2.thisRepN'
p11120
I1
sS'trials_2.thisTrialN'
p11121
I0
sS'trials.thisRepN'
p11122
I223
sS'trials_2.thisTrial'
p11123
NsS'trials.thisN'
p11124
I446
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11125
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11126
I0
sS'trials_2.thisN'
p11127
I1
sa(dp11128
g20
g21
sS'trials.thisIndex'
p11129
g36
(g38
S'\x01\x00\x00\x00'
tRp11130
sg22
V
sS'trials_2.thisRepN'
p11131
I1
sS'trials_2.thisTrialN'
p11132
I0
sS'trials.thisRepN'
p11133
I223
sS'trials_2.thisTrial'
p11134
NsS'trials.thisN'
p11135
I447
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11136
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11137
I1
sS'trials_2.thisN'
p11138
I1
sa(dp11139
g20
g21
sS'trials.thisIndex'
p11140
g36
(g38
S'\x00\x00\x00\x00'
tRp11141
sg22
V
sS'trials_2.thisRepN'
p11142
I1
sS'trials_2.thisTrialN'
p11143
I0
sS'trials.thisRepN'
p11144
I224
sS'trials_2.thisTrial'
p11145
NsS'trials.thisN'
p11146
I448
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11147
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11148
I0
sS'trials_2.thisN'
p11149
I1
sa(dp11150
g20
g21
sS'trials.thisIndex'
p11151
g36
(g38
S'\x01\x00\x00\x00'
tRp11152
sg22
V
sS'trials_2.thisRepN'
p11153
I1
sS'trials_2.thisTrialN'
p11154
I0
sS'trials.thisRepN'
p11155
I224
sS'trials_2.thisTrial'
p11156
NsS'trials.thisN'
p11157
I449
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11158
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11159
I1
sS'trials_2.thisN'
p11160
I1
sa(dp11161
g20
g21
sS'trials.thisIndex'
p11162
g36
(g38
S'\x00\x00\x00\x00'
tRp11163
sg22
V
sS'trials_2.thisRepN'
p11164
I1
sS'trials_2.thisTrialN'
p11165
I0
sS'trials.thisRepN'
p11166
I225
sS'trials_2.thisTrial'
p11167
NsS'trials.thisN'
p11168
I450
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11169
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11170
I0
sS'trials_2.thisN'
p11171
I1
sa(dp11172
g20
g21
sS'trials.thisIndex'
p11173
g36
(g38
S'\x01\x00\x00\x00'
tRp11174
sg22
V
sS'trials_2.thisRepN'
p11175
I1
sS'trials_2.thisTrialN'
p11176
I0
sS'trials.thisRepN'
p11177
I225
sS'trials_2.thisTrial'
p11178
NsS'trials.thisN'
p11179
I451
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11180
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11181
I1
sS'trials_2.thisN'
p11182
I1
sa(dp11183
g20
g21
sS'trials.thisIndex'
p11184
g36
(g38
S'\x00\x00\x00\x00'
tRp11185
sg22
V
sS'trials_2.thisRepN'
p11186
I1
sS'trials_2.thisTrialN'
p11187
I0
sS'trials.thisRepN'
p11188
I226
sS'trials_2.thisTrial'
p11189
NsS'trials.thisN'
p11190
I452
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11191
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11192
I0
sS'trials_2.thisN'
p11193
I1
sa(dp11194
g20
g21
sS'trials.thisIndex'
p11195
g36
(g38
S'\x01\x00\x00\x00'
tRp11196
sg22
V
sS'trials_2.thisRepN'
p11197
I1
sS'trials_2.thisTrialN'
p11198
I0
sS'trials.thisRepN'
p11199
I226
sS'trials_2.thisTrial'
p11200
NsS'trials.thisN'
p11201
I453
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11202
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11203
I1
sS'trials_2.thisN'
p11204
I1
sa(dp11205
g20
g21
sS'trials.thisIndex'
p11206
g36
(g38
S'\x00\x00\x00\x00'
tRp11207
sg22
V
sS'trials_2.thisRepN'
p11208
I1
sS'trials_2.thisTrialN'
p11209
I0
sS'trials.thisRepN'
p11210
I227
sS'trials_2.thisTrial'
p11211
NsS'trials.thisN'
p11212
I454
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11213
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11214
I0
sS'trials_2.thisN'
p11215
I1
sa(dp11216
g20
g21
sS'trials.thisIndex'
p11217
g36
(g38
S'\x01\x00\x00\x00'
tRp11218
sg22
V
sS'trials_2.thisRepN'
p11219
I1
sS'trials_2.thisTrialN'
p11220
I0
sS'trials.thisRepN'
p11221
I227
sS'trials_2.thisTrial'
p11222
NsS'trials.thisN'
p11223
I455
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11224
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11225
I1
sS'trials_2.thisN'
p11226
I1
sa(dp11227
g20
g21
sS'trials.thisIndex'
p11228
g36
(g38
S'\x00\x00\x00\x00'
tRp11229
sg22
V
sS'trials_2.thisRepN'
p11230
I1
sS'trials_2.thisTrialN'
p11231
I0
sS'trials.thisRepN'
p11232
I228
sS'trials_2.thisTrial'
p11233
NsS'trials.thisN'
p11234
I456
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11235
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11236
I0
sS'trials_2.thisN'
p11237
I1
sa(dp11238
g20
g21
sS'trials.thisIndex'
p11239
g36
(g38
S'\x01\x00\x00\x00'
tRp11240
sg22
V
sS'trials_2.thisRepN'
p11241
I1
sS'trials_2.thisTrialN'
p11242
I0
sS'trials.thisRepN'
p11243
I228
sS'trials_2.thisTrial'
p11244
NsS'trials.thisN'
p11245
I457
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11246
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11247
I1
sS'trials_2.thisN'
p11248
I1
sa(dp11249
g20
g21
sS'trials.thisIndex'
p11250
g36
(g38
S'\x00\x00\x00\x00'
tRp11251
sg22
V
sS'trials_2.thisRepN'
p11252
I1
sS'trials_2.thisTrialN'
p11253
I0
sS'trials.thisRepN'
p11254
I229
sS'trials_2.thisTrial'
p11255
NsS'trials.thisN'
p11256
I458
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11257
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11258
I0
sS'trials_2.thisN'
p11259
I1
sa(dp11260
g20
g21
sS'trials.thisIndex'
p11261
g36
(g38
S'\x01\x00\x00\x00'
tRp11262
sg22
V
sS'trials_2.thisRepN'
p11263
I1
sS'trials_2.thisTrialN'
p11264
I0
sS'trials.thisRepN'
p11265
I229
sS'trials_2.thisTrial'
p11266
NsS'trials.thisN'
p11267
I459
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11268
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11269
I1
sS'trials_2.thisN'
p11270
I1
sa(dp11271
g20
g21
sS'trials.thisIndex'
p11272
g36
(g38
S'\x00\x00\x00\x00'
tRp11273
sg22
V
sS'trials_2.thisRepN'
p11274
I1
sS'trials_2.thisTrialN'
p11275
I0
sS'trials.thisRepN'
p11276
I230
sS'trials_2.thisTrial'
p11277
NsS'trials.thisN'
p11278
I460
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11279
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11280
I0
sS'trials_2.thisN'
p11281
I1
sa(dp11282
g20
g21
sS'trials.thisIndex'
p11283
g36
(g38
S'\x01\x00\x00\x00'
tRp11284
sg22
V
sS'trials_2.thisRepN'
p11285
I1
sS'trials_2.thisTrialN'
p11286
I0
sS'trials.thisRepN'
p11287
I230
sS'trials_2.thisTrial'
p11288
NsS'trials.thisN'
p11289
I461
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11290
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11291
I1
sS'trials_2.thisN'
p11292
I1
sa(dp11293
g20
g21
sS'trials.thisIndex'
p11294
g36
(g38
S'\x00\x00\x00\x00'
tRp11295
sg22
V
sS'trials_2.thisRepN'
p11296
I1
sS'trials_2.thisTrialN'
p11297
I0
sS'trials.thisRepN'
p11298
I231
sS'trials_2.thisTrial'
p11299
NsS'trials.thisN'
p11300
I462
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11301
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11302
I0
sS'trials_2.thisN'
p11303
I1
sa(dp11304
g20
g21
sS'trials.thisIndex'
p11305
g36
(g38
S'\x01\x00\x00\x00'
tRp11306
sg22
V
sS'trials_2.thisRepN'
p11307
I1
sS'trials_2.thisTrialN'
p11308
I0
sS'trials.thisRepN'
p11309
I231
sS'trials_2.thisTrial'
p11310
NsS'trials.thisN'
p11311
I463
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11312
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11313
I1
sS'trials_2.thisN'
p11314
I1
sa(dp11315
g20
g21
sS'trials.thisIndex'
p11316
g36
(g38
S'\x00\x00\x00\x00'
tRp11317
sg22
V
sS'trials_2.thisRepN'
p11318
I1
sS'trials_2.thisTrialN'
p11319
I0
sS'trials.thisRepN'
p11320
I232
sS'trials_2.thisTrial'
p11321
NsS'trials.thisN'
p11322
I464
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11323
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11324
I0
sS'trials_2.thisN'
p11325
I1
sa(dp11326
g20
g21
sS'trials.thisIndex'
p11327
g36
(g38
S'\x01\x00\x00\x00'
tRp11328
sg22
V
sS'trials_2.thisRepN'
p11329
I1
sS'trials_2.thisTrialN'
p11330
I0
sS'trials.thisRepN'
p11331
I232
sS'trials_2.thisTrial'
p11332
NsS'trials.thisN'
p11333
I465
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11334
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11335
I1
sS'trials_2.thisN'
p11336
I1
sa(dp11337
g20
g21
sS'trials.thisIndex'
p11338
g36
(g38
S'\x00\x00\x00\x00'
tRp11339
sg22
V
sS'trials_2.thisRepN'
p11340
I1
sS'trials_2.thisTrialN'
p11341
I0
sS'trials.thisRepN'
p11342
I233
sS'trials_2.thisTrial'
p11343
NsS'trials.thisN'
p11344
I466
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11345
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11346
I0
sS'trials_2.thisN'
p11347
I1
sa(dp11348
g20
g21
sS'trials.thisIndex'
p11349
g36
(g38
S'\x01\x00\x00\x00'
tRp11350
sg22
V
sS'trials_2.thisRepN'
p11351
I1
sS'trials_2.thisTrialN'
p11352
I0
sS'trials.thisRepN'
p11353
I233
sS'trials_2.thisTrial'
p11354
NsS'trials.thisN'
p11355
I467
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11356
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11357
I1
sS'trials_2.thisN'
p11358
I1
sa(dp11359
g20
g21
sS'trials.thisIndex'
p11360
g36
(g38
S'\x00\x00\x00\x00'
tRp11361
sg22
V
sS'trials_2.thisRepN'
p11362
I1
sS'trials_2.thisTrialN'
p11363
I0
sS'trials.thisRepN'
p11364
I234
sS'trials_2.thisTrial'
p11365
NsS'trials.thisN'
p11366
I468
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11367
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11368
I0
sS'trials_2.thisN'
p11369
I1
sa(dp11370
g20
g21
sS'trials.thisIndex'
p11371
g36
(g38
S'\x01\x00\x00\x00'
tRp11372
sg22
V
sS'trials_2.thisRepN'
p11373
I1
sS'trials_2.thisTrialN'
p11374
I0
sS'trials.thisRepN'
p11375
I234
sS'trials_2.thisTrial'
p11376
NsS'trials.thisN'
p11377
I469
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11378
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11379
I1
sS'trials_2.thisN'
p11380
I1
sa(dp11381
g20
g21
sS'trials.thisIndex'
p11382
g36
(g38
S'\x00\x00\x00\x00'
tRp11383
sg22
V
sS'trials_2.thisRepN'
p11384
I1
sS'trials_2.thisTrialN'
p11385
I0
sS'trials.thisRepN'
p11386
I235
sS'trials_2.thisTrial'
p11387
NsS'trials.thisN'
p11388
I470
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11389
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11390
I0
sS'trials_2.thisN'
p11391
I1
sa(dp11392
g20
g21
sS'trials.thisIndex'
p11393
g36
(g38
S'\x01\x00\x00\x00'
tRp11394
sg22
V
sS'trials_2.thisRepN'
p11395
I1
sS'trials_2.thisTrialN'
p11396
I0
sS'trials.thisRepN'
p11397
I235
sS'trials_2.thisTrial'
p11398
NsS'trials.thisN'
p11399
I471
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11400
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11401
I1
sS'trials_2.thisN'
p11402
I1
sa(dp11403
g20
g21
sS'trials.thisIndex'
p11404
g36
(g38
S'\x00\x00\x00\x00'
tRp11405
sg22
V
sS'trials_2.thisRepN'
p11406
I1
sS'trials_2.thisTrialN'
p11407
I0
sS'trials.thisRepN'
p11408
I236
sS'trials_2.thisTrial'
p11409
NsS'trials.thisN'
p11410
I472
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11411
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11412
I0
sS'trials_2.thisN'
p11413
I1
sa(dp11414
g20
g21
sS'trials.thisIndex'
p11415
g36
(g38
S'\x01\x00\x00\x00'
tRp11416
sg22
V
sS'trials_2.thisRepN'
p11417
I1
sS'trials_2.thisTrialN'
p11418
I0
sS'trials.thisRepN'
p11419
I236
sS'trials_2.thisTrial'
p11420
NsS'trials.thisN'
p11421
I473
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11422
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11423
I1
sS'trials_2.thisN'
p11424
I1
sa(dp11425
g20
g21
sS'trials.thisIndex'
p11426
g36
(g38
S'\x00\x00\x00\x00'
tRp11427
sg22
V
sS'trials_2.thisRepN'
p11428
I1
sS'trials_2.thisTrialN'
p11429
I0
sS'trials.thisRepN'
p11430
I237
sS'trials_2.thisTrial'
p11431
NsS'trials.thisN'
p11432
I474
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11433
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11434
I0
sS'trials_2.thisN'
p11435
I1
sa(dp11436
g20
g21
sS'trials.thisIndex'
p11437
g36
(g38
S'\x01\x00\x00\x00'
tRp11438
sg22
V
sS'trials_2.thisRepN'
p11439
I1
sS'trials_2.thisTrialN'
p11440
I0
sS'trials.thisRepN'
p11441
I237
sS'trials_2.thisTrial'
p11442
NsS'trials.thisN'
p11443
I475
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11444
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11445
I1
sS'trials_2.thisN'
p11446
I1
sa(dp11447
g20
g21
sS'trials.thisIndex'
p11448
g36
(g38
S'\x00\x00\x00\x00'
tRp11449
sg22
V
sS'trials_2.thisRepN'
p11450
I1
sS'trials_2.thisTrialN'
p11451
I0
sS'trials.thisRepN'
p11452
I238
sS'trials_2.thisTrial'
p11453
NsS'trials.thisN'
p11454
I476
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11455
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11456
I0
sS'trials_2.thisN'
p11457
I1
sa(dp11458
g20
g21
sS'trials.thisIndex'
p11459
g36
(g38
S'\x01\x00\x00\x00'
tRp11460
sg22
V
sS'trials_2.thisRepN'
p11461
I1
sS'trials_2.thisTrialN'
p11462
I0
sS'trials.thisRepN'
p11463
I238
sS'trials_2.thisTrial'
p11464
NsS'trials.thisN'
p11465
I477
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11466
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11467
I1
sS'trials_2.thisN'
p11468
I1
sa(dp11469
g20
g21
sS'trials.thisIndex'
p11470
g36
(g38
S'\x00\x00\x00\x00'
tRp11471
sg22
V
sS'trials_2.thisRepN'
p11472
I1
sS'trials_2.thisTrialN'
p11473
I0
sS'trials.thisRepN'
p11474
I239
sS'trials_2.thisTrial'
p11475
NsS'trials.thisN'
p11476
I478
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11477
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11478
I0
sS'trials_2.thisN'
p11479
I1
sa(dp11480
g20
g21
sS'trials.thisIndex'
p11481
g36
(g38
S'\x01\x00\x00\x00'
tRp11482
sg22
V
sS'trials_2.thisRepN'
p11483
I1
sS'trials_2.thisTrialN'
p11484
I0
sS'trials.thisRepN'
p11485
I239
sS'trials_2.thisTrial'
p11486
NsS'trials.thisN'
p11487
I479
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11488
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11489
I1
sS'trials_2.thisN'
p11490
I1
sa(dp11491
g20
g21
sS'trials.thisIndex'
p11492
g36
(g38
S'\x00\x00\x00\x00'
tRp11493
sg22
V
sS'trials_2.thisRepN'
p11494
I1
sS'trials_2.thisTrialN'
p11495
I0
sS'trials.thisRepN'
p11496
I240
sS'trials_2.thisTrial'
p11497
NsS'trials.thisN'
p11498
I480
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11499
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11500
I0
sS'trials_2.thisN'
p11501
I1
sa(dp11502
g20
g21
sS'trials.thisIndex'
p11503
g36
(g38
S'\x01\x00\x00\x00'
tRp11504
sg22
V
sS'trials_2.thisRepN'
p11505
I1
sS'trials_2.thisTrialN'
p11506
I0
sS'trials.thisRepN'
p11507
I240
sS'trials_2.thisTrial'
p11508
NsS'trials.thisN'
p11509
I481
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11510
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11511
I1
sS'trials_2.thisN'
p11512
I1
sa(dp11513
g20
g21
sS'trials.thisIndex'
p11514
g36
(g38
S'\x00\x00\x00\x00'
tRp11515
sg22
V
sS'trials_2.thisRepN'
p11516
I1
sS'trials_2.thisTrialN'
p11517
I0
sS'trials.thisRepN'
p11518
I241
sS'trials_2.thisTrial'
p11519
NsS'trials.thisN'
p11520
I482
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11521
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11522
I0
sS'trials_2.thisN'
p11523
I1
sa(dp11524
g20
g21
sS'trials.thisIndex'
p11525
g36
(g38
S'\x01\x00\x00\x00'
tRp11526
sg22
V
sS'trials_2.thisRepN'
p11527
I1
sS'trials_2.thisTrialN'
p11528
I0
sS'trials.thisRepN'
p11529
I241
sS'trials_2.thisTrial'
p11530
NsS'trials.thisN'
p11531
I483
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11532
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11533
I1
sS'trials_2.thisN'
p11534
I1
sa(dp11535
g20
g21
sS'trials.thisIndex'
p11536
g36
(g38
S'\x00\x00\x00\x00'
tRp11537
sg22
V
sS'trials_2.thisRepN'
p11538
I1
sS'trials_2.thisTrialN'
p11539
I0
sS'trials.thisRepN'
p11540
I242
sS'trials_2.thisTrial'
p11541
NsS'trials.thisN'
p11542
I484
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11543
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11544
I0
sS'trials_2.thisN'
p11545
I1
sa(dp11546
g20
g21
sS'trials.thisIndex'
p11547
g36
(g38
S'\x01\x00\x00\x00'
tRp11548
sg22
V
sS'trials_2.thisRepN'
p11549
I1
sS'trials_2.thisTrialN'
p11550
I0
sS'trials.thisRepN'
p11551
I242
sS'trials_2.thisTrial'
p11552
NsS'trials.thisN'
p11553
I485
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11554
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11555
I1
sS'trials_2.thisN'
p11556
I1
sa(dp11557
g20
g21
sS'trials.thisIndex'
p11558
g36
(g38
S'\x00\x00\x00\x00'
tRp11559
sg22
V
sS'trials_2.thisRepN'
p11560
I1
sS'trials_2.thisTrialN'
p11561
I0
sS'trials.thisRepN'
p11562
I243
sS'trials_2.thisTrial'
p11563
NsS'trials.thisN'
p11564
I486
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11565
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11566
I0
sS'trials_2.thisN'
p11567
I1
sa(dp11568
g20
g21
sS'trials.thisIndex'
p11569
g36
(g38
S'\x01\x00\x00\x00'
tRp11570
sg22
V
sS'trials_2.thisRepN'
p11571
I1
sS'trials_2.thisTrialN'
p11572
I0
sS'trials.thisRepN'
p11573
I243
sS'trials_2.thisTrial'
p11574
NsS'trials.thisN'
p11575
I487
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11576
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11577
I1
sS'trials_2.thisN'
p11578
I1
sa(dp11579
g20
g21
sS'trials.thisIndex'
p11580
g36
(g38
S'\x00\x00\x00\x00'
tRp11581
sg22
V
sS'trials_2.thisRepN'
p11582
I1
sS'trials_2.thisTrialN'
p11583
I0
sS'trials.thisRepN'
p11584
I244
sS'trials_2.thisTrial'
p11585
NsS'trials.thisN'
p11586
I488
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11587
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11588
I0
sS'trials_2.thisN'
p11589
I1
sa(dp11590
g20
g21
sS'trials.thisIndex'
p11591
g36
(g38
S'\x01\x00\x00\x00'
tRp11592
sg22
V
sS'trials_2.thisRepN'
p11593
I1
sS'trials_2.thisTrialN'
p11594
I0
sS'trials.thisRepN'
p11595
I244
sS'trials_2.thisTrial'
p11596
NsS'trials.thisN'
p11597
I489
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11598
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11599
I1
sS'trials_2.thisN'
p11600
I1
sa(dp11601
g20
g21
sS'trials.thisIndex'
p11602
g36
(g38
S'\x00\x00\x00\x00'
tRp11603
sg22
V
sS'trials_2.thisRepN'
p11604
I1
sS'trials_2.thisTrialN'
p11605
I0
sS'trials.thisRepN'
p11606
I245
sS'trials_2.thisTrial'
p11607
NsS'trials.thisN'
p11608
I490
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11609
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11610
I0
sS'trials_2.thisN'
p11611
I1
sa(dp11612
g20
g21
sS'trials.thisIndex'
p11613
g36
(g38
S'\x01\x00\x00\x00'
tRp11614
sg22
V
sS'trials_2.thisRepN'
p11615
I1
sS'trials_2.thisTrialN'
p11616
I0
sS'trials.thisRepN'
p11617
I245
sS'trials_2.thisTrial'
p11618
NsS'trials.thisN'
p11619
I491
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11620
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11621
I1
sS'trials_2.thisN'
p11622
I1
sa(dp11623
g20
g21
sS'trials.thisIndex'
p11624
g36
(g38
S'\x00\x00\x00\x00'
tRp11625
sg22
V
sS'trials_2.thisRepN'
p11626
I1
sS'trials_2.thisTrialN'
p11627
I0
sS'trials.thisRepN'
p11628
I246
sS'trials_2.thisTrial'
p11629
NsS'trials.thisN'
p11630
I492
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11631
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11632
I0
sS'trials_2.thisN'
p11633
I1
sa(dp11634
g20
g21
sS'trials.thisIndex'
p11635
g36
(g38
S'\x01\x00\x00\x00'
tRp11636
sg22
V
sS'trials_2.thisRepN'
p11637
I1
sS'trials_2.thisTrialN'
p11638
I0
sS'trials.thisRepN'
p11639
I246
sS'trials_2.thisTrial'
p11640
NsS'trials.thisN'
p11641
I493
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11642
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11643
I1
sS'trials_2.thisN'
p11644
I1
sa(dp11645
g20
g21
sS'trials.thisIndex'
p11646
g36
(g38
S'\x00\x00\x00\x00'
tRp11647
sg22
V
sS'trials_2.thisRepN'
p11648
I1
sS'trials_2.thisTrialN'
p11649
I0
sS'trials.thisRepN'
p11650
I247
sS'trials_2.thisTrial'
p11651
NsS'trials.thisN'
p11652
I494
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11653
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11654
I0
sS'trials_2.thisN'
p11655
I1
sa(dp11656
g20
g21
sS'trials.thisIndex'
p11657
g36
(g38
S'\x01\x00\x00\x00'
tRp11658
sg22
V
sS'trials_2.thisRepN'
p11659
I1
sS'trials_2.thisTrialN'
p11660
I0
sS'trials.thisRepN'
p11661
I247
sS'trials_2.thisTrial'
p11662
NsS'trials.thisN'
p11663
I495
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11664
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11665
I1
sS'trials_2.thisN'
p11666
I1
sa(dp11667
g20
g21
sS'trials.thisIndex'
p11668
g36
(g38
S'\x00\x00\x00\x00'
tRp11669
sg22
V
sS'trials_2.thisRepN'
p11670
I1
sS'trials_2.thisTrialN'
p11671
I0
sS'trials.thisRepN'
p11672
I248
sS'trials_2.thisTrial'
p11673
NsS'trials.thisN'
p11674
I496
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11675
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11676
I0
sS'trials_2.thisN'
p11677
I1
sa(dp11678
g20
g21
sS'trials.thisIndex'
p11679
g36
(g38
S'\x01\x00\x00\x00'
tRp11680
sg22
V
sS'trials_2.thisRepN'
p11681
I1
sS'trials_2.thisTrialN'
p11682
I0
sS'trials.thisRepN'
p11683
I248
sS'trials_2.thisTrial'
p11684
NsS'trials.thisN'
p11685
I497
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11686
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11687
I1
sS'trials_2.thisN'
p11688
I1
sa(dp11689
g20
g21
sS'trials.thisIndex'
p11690
g36
(g38
S'\x00\x00\x00\x00'
tRp11691
sg22
V
sS'trials_2.thisRepN'
p11692
I1
sS'trials_2.thisTrialN'
p11693
I0
sS'trials.thisRepN'
p11694
I249
sS'trials_2.thisTrial'
p11695
NsS'trials.thisN'
p11696
I498
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11697
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11698
I0
sS'trials_2.thisN'
p11699
I1
sa(dp11700
g20
g21
sS'trials.thisIndex'
p11701
g36
(g38
S'\x01\x00\x00\x00'
tRp11702
sg22
V
sS'trials_2.thisRepN'
p11703
I1
sS'trials_2.thisTrialN'
p11704
I0
sS'trials.thisRepN'
p11705
I249
sS'trials_2.thisTrial'
p11706
NsS'trials.thisN'
p11707
I499
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11708
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11709
I1
sS'trials_2.thisN'
p11710
I1
sa(dp11711
g20
g21
sS'trials.thisIndex'
p11712
g36
(g38
S'\x00\x00\x00\x00'
tRp11713
sg22
V
sS'trials_2.thisRepN'
p11714
I1
sS'trials_2.thisTrialN'
p11715
I0
sS'trials.thisRepN'
p11716
I250
sS'trials_2.thisTrial'
p11717
NsS'trials.thisN'
p11718
I500
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11719
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11720
I0
sS'trials_2.thisN'
p11721
I1
sa(dp11722
g20
g21
sS'trials.thisIndex'
p11723
g36
(g38
S'\x01\x00\x00\x00'
tRp11724
sg22
V
sS'trials_2.thisRepN'
p11725
I1
sS'trials_2.thisTrialN'
p11726
I0
sS'trials.thisRepN'
p11727
I250
sS'trials_2.thisTrial'
p11728
NsS'trials.thisN'
p11729
I501
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11730
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11731
I1
sS'trials_2.thisN'
p11732
I1
sa(dp11733
g20
g21
sS'trials.thisIndex'
p11734
g36
(g38
S'\x00\x00\x00\x00'
tRp11735
sg22
V
sS'trials_2.thisRepN'
p11736
I1
sS'trials_2.thisTrialN'
p11737
I0
sS'trials.thisRepN'
p11738
I251
sS'trials_2.thisTrial'
p11739
NsS'trials.thisN'
p11740
I502
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11741
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11742
I0
sS'trials_2.thisN'
p11743
I1
sa(dp11744
g20
g21
sS'trials.thisIndex'
p11745
g36
(g38
S'\x01\x00\x00\x00'
tRp11746
sg22
V
sS'trials_2.thisRepN'
p11747
I1
sS'trials_2.thisTrialN'
p11748
I0
sS'trials.thisRepN'
p11749
I251
sS'trials_2.thisTrial'
p11750
NsS'trials.thisN'
p11751
I503
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11752
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11753
I1
sS'trials_2.thisN'
p11754
I1
sa(dp11755
g20
g21
sS'trials.thisIndex'
p11756
g36
(g38
S'\x00\x00\x00\x00'
tRp11757
sg22
V
sS'trials_2.thisRepN'
p11758
I1
sS'trials_2.thisTrialN'
p11759
I0
sS'trials.thisRepN'
p11760
I252
sS'trials_2.thisTrial'
p11761
NsS'trials.thisN'
p11762
I504
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11763
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11764
I0
sS'trials_2.thisN'
p11765
I1
sa(dp11766
g20
g21
sS'trials.thisIndex'
p11767
g36
(g38
S'\x01\x00\x00\x00'
tRp11768
sg22
V
sS'trials_2.thisRepN'
p11769
I1
sS'trials_2.thisTrialN'
p11770
I0
sS'trials.thisRepN'
p11771
I252
sS'trials_2.thisTrial'
p11772
NsS'trials.thisN'
p11773
I505
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11774
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11775
I1
sS'trials_2.thisN'
p11776
I1
sa(dp11777
g20
g21
sS'trials.thisIndex'
p11778
g36
(g38
S'\x00\x00\x00\x00'
tRp11779
sg22
V
sS'trials_2.thisRepN'
p11780
I1
sS'trials_2.thisTrialN'
p11781
I0
sS'trials.thisRepN'
p11782
I253
sS'trials_2.thisTrial'
p11783
NsS'trials.thisN'
p11784
I506
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11785
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11786
I0
sS'trials_2.thisN'
p11787
I1
sa(dp11788
g20
g21
sS'trials.thisIndex'
p11789
g36
(g38
S'\x01\x00\x00\x00'
tRp11790
sg22
V
sS'trials_2.thisRepN'
p11791
I1
sS'trials_2.thisTrialN'
p11792
I0
sS'trials.thisRepN'
p11793
I253
sS'trials_2.thisTrial'
p11794
NsS'trials.thisN'
p11795
I507
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11796
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11797
I1
sS'trials_2.thisN'
p11798
I1
sa(dp11799
g20
g21
sS'trials.thisIndex'
p11800
g36
(g38
S'\x00\x00\x00\x00'
tRp11801
sg22
V
sS'trials_2.thisRepN'
p11802
I1
sS'trials_2.thisTrialN'
p11803
I0
sS'trials.thisRepN'
p11804
I254
sS'trials_2.thisTrial'
p11805
NsS'trials.thisN'
p11806
I508
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11807
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11808
I0
sS'trials_2.thisN'
p11809
I1
sa(dp11810
g20
g21
sS'trials.thisIndex'
p11811
g36
(g38
S'\x01\x00\x00\x00'
tRp11812
sg22
V
sS'trials_2.thisRepN'
p11813
I1
sS'trials_2.thisTrialN'
p11814
I0
sS'trials.thisRepN'
p11815
I254
sS'trials_2.thisTrial'
p11816
NsS'trials.thisN'
p11817
I509
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11818
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11819
I1
sS'trials_2.thisN'
p11820
I1
sa(dp11821
g20
g21
sS'trials.thisIndex'
p11822
g36
(g38
S'\x00\x00\x00\x00'
tRp11823
sg22
V
sS'trials_2.thisRepN'
p11824
I1
sS'trials_2.thisTrialN'
p11825
I0
sS'trials.thisRepN'
p11826
I255
sS'trials_2.thisTrial'
p11827
NsS'trials.thisN'
p11828
I510
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11829
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11830
I0
sS'trials_2.thisN'
p11831
I1
sa(dp11832
g20
g21
sS'trials.thisIndex'
p11833
g36
(g38
S'\x01\x00\x00\x00'
tRp11834
sg22
V
sS'trials_2.thisRepN'
p11835
I1
sS'trials_2.thisTrialN'
p11836
I0
sS'trials.thisRepN'
p11837
I255
sS'trials_2.thisTrial'
p11838
NsS'trials.thisN'
p11839
I511
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11840
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11841
I1
sS'trials_2.thisN'
p11842
I1
sa(dp11843
g20
g21
sS'trials.thisIndex'
p11844
g36
(g38
S'\x00\x00\x00\x00'
tRp11845
sg22
V
sS'trials_2.thisRepN'
p11846
I1
sS'trials_2.thisTrialN'
p11847
I0
sS'trials.thisRepN'
p11848
I256
sS'trials_2.thisTrial'
p11849
NsS'trials.thisN'
p11850
I512
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11851
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11852
I0
sS'trials_2.thisN'
p11853
I1
sa(dp11854
g20
g21
sS'trials.thisIndex'
p11855
g36
(g38
S'\x01\x00\x00\x00'
tRp11856
sg22
V
sS'trials_2.thisRepN'
p11857
I1
sS'trials_2.thisTrialN'
p11858
I0
sS'trials.thisRepN'
p11859
I256
sS'trials_2.thisTrial'
p11860
NsS'trials.thisN'
p11861
I513
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11862
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11863
I1
sS'trials_2.thisN'
p11864
I1
sa(dp11865
g20
g21
sS'trials.thisIndex'
p11866
g36
(g38
S'\x00\x00\x00\x00'
tRp11867
sg22
V
sS'trials_2.thisRepN'
p11868
I1
sS'trials_2.thisTrialN'
p11869
I0
sS'trials.thisRepN'
p11870
I257
sS'trials_2.thisTrial'
p11871
NsS'trials.thisN'
p11872
I514
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11873
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11874
I0
sS'trials_2.thisN'
p11875
I1
sa(dp11876
g20
g21
sS'trials.thisIndex'
p11877
g36
(g38
S'\x01\x00\x00\x00'
tRp11878
sg22
V
sS'trials_2.thisRepN'
p11879
I1
sS'trials_2.thisTrialN'
p11880
I0
sS'trials.thisRepN'
p11881
I257
sS'trials_2.thisTrial'
p11882
NsS'trials.thisN'
p11883
I515
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11884
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11885
I1
sS'trials_2.thisN'
p11886
I1
sa(dp11887
g20
g21
sS'trials.thisIndex'
p11888
g36
(g38
S'\x00\x00\x00\x00'
tRp11889
sg22
V
sS'trials_2.thisRepN'
p11890
I1
sS'trials_2.thisTrialN'
p11891
I0
sS'trials.thisRepN'
p11892
I258
sS'trials_2.thisTrial'
p11893
NsS'trials.thisN'
p11894
I516
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11895
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11896
I0
sS'trials_2.thisN'
p11897
I1
sa(dp11898
g20
g21
sS'trials.thisIndex'
p11899
g36
(g38
S'\x01\x00\x00\x00'
tRp11900
sg22
V
sS'trials_2.thisRepN'
p11901
I1
sS'trials_2.thisTrialN'
p11902
I0
sS'trials.thisRepN'
p11903
I258
sS'trials_2.thisTrial'
p11904
NsS'trials.thisN'
p11905
I517
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11906
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11907
I1
sS'trials_2.thisN'
p11908
I1
sa(dp11909
g20
g21
sS'trials.thisIndex'
p11910
g36
(g38
S'\x00\x00\x00\x00'
tRp11911
sg22
V
sS'trials_2.thisRepN'
p11912
I1
sS'trials_2.thisTrialN'
p11913
I0
sS'trials.thisRepN'
p11914
I259
sS'trials_2.thisTrial'
p11915
NsS'trials.thisN'
p11916
I518
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11917
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11918
I0
sS'trials_2.thisN'
p11919
I1
sa(dp11920
g20
g21
sS'trials.thisIndex'
p11921
g36
(g38
S'\x01\x00\x00\x00'
tRp11922
sg22
V
sS'trials_2.thisRepN'
p11923
I1
sS'trials_2.thisTrialN'
p11924
I0
sS'trials.thisRepN'
p11925
I259
sS'trials_2.thisTrial'
p11926
NsS'trials.thisN'
p11927
I519
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11928
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11929
I1
sS'trials_2.thisN'
p11930
I1
sa(dp11931
g20
g21
sS'trials.thisIndex'
p11932
g36
(g38
S'\x00\x00\x00\x00'
tRp11933
sg22
V
sS'trials_2.thisRepN'
p11934
I1
sS'trials_2.thisTrialN'
p11935
I0
sS'trials.thisRepN'
p11936
I260
sS'trials_2.thisTrial'
p11937
NsS'trials.thisN'
p11938
I520
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11939
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11940
I0
sS'trials_2.thisN'
p11941
I1
sa(dp11942
g20
g21
sS'trials.thisIndex'
p11943
g36
(g38
S'\x01\x00\x00\x00'
tRp11944
sg22
V
sS'trials_2.thisRepN'
p11945
I1
sS'trials_2.thisTrialN'
p11946
I0
sS'trials.thisRepN'
p11947
I260
sS'trials_2.thisTrial'
p11948
NsS'trials.thisN'
p11949
I521
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11950
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11951
I1
sS'trials_2.thisN'
p11952
I1
sa(dp11953
g20
g21
sS'trials.thisIndex'
p11954
g36
(g38
S'\x00\x00\x00\x00'
tRp11955
sg22
V
sS'trials_2.thisRepN'
p11956
I1
sS'trials_2.thisTrialN'
p11957
I0
sS'trials.thisRepN'
p11958
I261
sS'trials_2.thisTrial'
p11959
NsS'trials.thisN'
p11960
I522
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11961
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11962
I0
sS'trials_2.thisN'
p11963
I1
sa(dp11964
g20
g21
sS'trials.thisIndex'
p11965
g36
(g38
S'\x01\x00\x00\x00'
tRp11966
sg22
V
sS'trials_2.thisRepN'
p11967
I1
sS'trials_2.thisTrialN'
p11968
I0
sS'trials.thisRepN'
p11969
I261
sS'trials_2.thisTrial'
p11970
NsS'trials.thisN'
p11971
I523
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11972
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11973
I1
sS'trials_2.thisN'
p11974
I1
sa(dp11975
g20
g21
sS'trials.thisIndex'
p11976
g36
(g38
S'\x00\x00\x00\x00'
tRp11977
sg22
V
sS'trials_2.thisRepN'
p11978
I1
sS'trials_2.thisTrialN'
p11979
I0
sS'trials.thisRepN'
p11980
I262
sS'trials_2.thisTrial'
p11981
NsS'trials.thisN'
p11982
I524
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11983
g6216
sg6217
g6218
sS'trials.thisTrialN'
p11984
I0
sS'trials_2.thisN'
p11985
I1
sa(dp11986
g20
g21
sS'trials.thisIndex'
p11987
g36
(g38
S'\x01\x00\x00\x00'
tRp11988
sg22
V
sS'trials_2.thisRepN'
p11989
I1
sS'trials_2.thisTrialN'
p11990
I0
sS'trials.thisRepN'
p11991
I262
sS'trials_2.thisTrial'
p11992
NsS'trials.thisN'
p11993
I525
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p11994
g6216
sg6217
g6230
sS'trials.thisTrialN'
p11995
I1
sS'trials_2.thisN'
p11996
I1
sa(dp11997
g20
g21
sS'trials.thisIndex'
p11998
g36
(g38
S'\x00\x00\x00\x00'
tRp11999
sg22
V
sS'trials_2.thisRepN'
p12000
I1
sS'trials_2.thisTrialN'
p12001
I0
sS'trials.thisRepN'
p12002
I263
sS'trials_2.thisTrial'
p12003
NsS'trials.thisN'
p12004
I526
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12005
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12006
I0
sS'trials_2.thisN'
p12007
I1
sa(dp12008
g20
g21
sS'trials.thisIndex'
p12009
g36
(g38
S'\x01\x00\x00\x00'
tRp12010
sg22
V
sS'trials_2.thisRepN'
p12011
I1
sS'trials_2.thisTrialN'
p12012
I0
sS'trials.thisRepN'
p12013
I263
sS'trials_2.thisTrial'
p12014
NsS'trials.thisN'
p12015
I527
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12016
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12017
I1
sS'trials_2.thisN'
p12018
I1
sa(dp12019
g20
g21
sS'trials.thisIndex'
p12020
g36
(g38
S'\x00\x00\x00\x00'
tRp12021
sg22
V
sS'trials_2.thisRepN'
p12022
I1
sS'trials_2.thisTrialN'
p12023
I0
sS'trials.thisRepN'
p12024
I264
sS'trials_2.thisTrial'
p12025
NsS'trials.thisN'
p12026
I528
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12027
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12028
I0
sS'trials_2.thisN'
p12029
I1
sa(dp12030
g20
g21
sS'trials.thisIndex'
p12031
g36
(g38
S'\x01\x00\x00\x00'
tRp12032
sg22
V
sS'trials_2.thisRepN'
p12033
I1
sS'trials_2.thisTrialN'
p12034
I0
sS'trials.thisRepN'
p12035
I264
sS'trials_2.thisTrial'
p12036
NsS'trials.thisN'
p12037
I529
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12038
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12039
I1
sS'trials_2.thisN'
p12040
I1
sa(dp12041
g20
g21
sS'trials.thisIndex'
p12042
g36
(g38
S'\x00\x00\x00\x00'
tRp12043
sg22
V
sS'trials_2.thisRepN'
p12044
I1
sS'trials_2.thisTrialN'
p12045
I0
sS'trials.thisRepN'
p12046
I265
sS'trials_2.thisTrial'
p12047
NsS'trials.thisN'
p12048
I530
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12049
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12050
I0
sS'trials_2.thisN'
p12051
I1
sa(dp12052
g20
g21
sS'trials.thisIndex'
p12053
g36
(g38
S'\x01\x00\x00\x00'
tRp12054
sg22
V
sS'trials_2.thisRepN'
p12055
I1
sS'trials_2.thisTrialN'
p12056
I0
sS'trials.thisRepN'
p12057
I265
sS'trials_2.thisTrial'
p12058
NsS'trials.thisN'
p12059
I531
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12060
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12061
I1
sS'trials_2.thisN'
p12062
I1
sa(dp12063
g20
g21
sS'trials.thisIndex'
p12064
g36
(g38
S'\x00\x00\x00\x00'
tRp12065
sg22
V
sS'trials_2.thisRepN'
p12066
I1
sS'trials_2.thisTrialN'
p12067
I0
sS'trials.thisRepN'
p12068
I266
sS'trials_2.thisTrial'
p12069
NsS'trials.thisN'
p12070
I532
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12071
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12072
I0
sS'trials_2.thisN'
p12073
I1
sa(dp12074
g20
g21
sS'trials.thisIndex'
p12075
g36
(g38
S'\x01\x00\x00\x00'
tRp12076
sg22
V
sS'trials_2.thisRepN'
p12077
I1
sS'trials_2.thisTrialN'
p12078
I0
sS'trials.thisRepN'
p12079
I266
sS'trials_2.thisTrial'
p12080
NsS'trials.thisN'
p12081
I533
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12082
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12083
I1
sS'trials_2.thisN'
p12084
I1
sa(dp12085
g20
g21
sS'trials.thisIndex'
p12086
g36
(g38
S'\x00\x00\x00\x00'
tRp12087
sg22
V
sS'trials_2.thisRepN'
p12088
I1
sS'trials_2.thisTrialN'
p12089
I0
sS'trials.thisRepN'
p12090
I267
sS'trials_2.thisTrial'
p12091
NsS'trials.thisN'
p12092
I534
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12093
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12094
I0
sS'trials_2.thisN'
p12095
I1
sa(dp12096
g20
g21
sS'trials.thisIndex'
p12097
g36
(g38
S'\x01\x00\x00\x00'
tRp12098
sg22
V
sS'trials_2.thisRepN'
p12099
I1
sS'trials_2.thisTrialN'
p12100
I0
sS'trials.thisRepN'
p12101
I267
sS'trials_2.thisTrial'
p12102
NsS'trials.thisN'
p12103
I535
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12104
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12105
I1
sS'trials_2.thisN'
p12106
I1
sa(dp12107
g20
g21
sS'trials.thisIndex'
p12108
g36
(g38
S'\x00\x00\x00\x00'
tRp12109
sg22
V
sS'trials_2.thisRepN'
p12110
I1
sS'trials_2.thisTrialN'
p12111
I0
sS'trials.thisRepN'
p12112
I268
sS'trials_2.thisTrial'
p12113
NsS'trials.thisN'
p12114
I536
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12115
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12116
I0
sS'trials_2.thisN'
p12117
I1
sa(dp12118
g20
g21
sS'trials.thisIndex'
p12119
g36
(g38
S'\x01\x00\x00\x00'
tRp12120
sg22
V
sS'trials_2.thisRepN'
p12121
I1
sS'trials_2.thisTrialN'
p12122
I0
sS'trials.thisRepN'
p12123
I268
sS'trials_2.thisTrial'
p12124
NsS'trials.thisN'
p12125
I537
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12126
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12127
I1
sS'trials_2.thisN'
p12128
I1
sa(dp12129
g20
g21
sS'trials.thisIndex'
p12130
g36
(g38
S'\x00\x00\x00\x00'
tRp12131
sg22
V
sS'trials_2.thisRepN'
p12132
I1
sS'trials_2.thisTrialN'
p12133
I0
sS'trials.thisRepN'
p12134
I269
sS'trials_2.thisTrial'
p12135
NsS'trials.thisN'
p12136
I538
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12137
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12138
I0
sS'trials_2.thisN'
p12139
I1
sa(dp12140
g20
g21
sS'trials.thisIndex'
p12141
g36
(g38
S'\x01\x00\x00\x00'
tRp12142
sg22
V
sS'trials_2.thisRepN'
p12143
I1
sS'trials_2.thisTrialN'
p12144
I0
sS'trials.thisRepN'
p12145
I269
sS'trials_2.thisTrial'
p12146
NsS'trials.thisN'
p12147
I539
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12148
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12149
I1
sS'trials_2.thisN'
p12150
I1
sa(dp12151
g20
g21
sS'trials.thisIndex'
p12152
g36
(g38
S'\x00\x00\x00\x00'
tRp12153
sg22
V
sS'trials_2.thisRepN'
p12154
I1
sS'trials_2.thisTrialN'
p12155
I0
sS'trials.thisRepN'
p12156
I270
sS'trials_2.thisTrial'
p12157
NsS'trials.thisN'
p12158
I540
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12159
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12160
I0
sS'trials_2.thisN'
p12161
I1
sa(dp12162
g20
g21
sS'trials.thisIndex'
p12163
g36
(g38
S'\x01\x00\x00\x00'
tRp12164
sg22
V
sS'trials_2.thisRepN'
p12165
I1
sS'trials_2.thisTrialN'
p12166
I0
sS'trials.thisRepN'
p12167
I270
sS'trials_2.thisTrial'
p12168
NsS'trials.thisN'
p12169
I541
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12170
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12171
I1
sS'trials_2.thisN'
p12172
I1
sa(dp12173
g20
g21
sS'trials.thisIndex'
p12174
g36
(g38
S'\x00\x00\x00\x00'
tRp12175
sg22
V
sS'trials_2.thisRepN'
p12176
I1
sS'trials_2.thisTrialN'
p12177
I0
sS'trials.thisRepN'
p12178
I271
sS'trials_2.thisTrial'
p12179
NsS'trials.thisN'
p12180
I542
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12181
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12182
I0
sS'trials_2.thisN'
p12183
I1
sa(dp12184
g20
g21
sS'trials.thisIndex'
p12185
g36
(g38
S'\x01\x00\x00\x00'
tRp12186
sg22
V
sS'trials_2.thisRepN'
p12187
I1
sS'trials_2.thisTrialN'
p12188
I0
sS'trials.thisRepN'
p12189
I271
sS'trials_2.thisTrial'
p12190
NsS'trials.thisN'
p12191
I543
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12192
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12193
I1
sS'trials_2.thisN'
p12194
I1
sa(dp12195
g20
g21
sS'trials.thisIndex'
p12196
g36
(g38
S'\x00\x00\x00\x00'
tRp12197
sg22
V
sS'trials_2.thisRepN'
p12198
I1
sS'trials_2.thisTrialN'
p12199
I0
sS'trials.thisRepN'
p12200
I272
sS'trials_2.thisTrial'
p12201
NsS'trials.thisN'
p12202
I544
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12203
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12204
I0
sS'trials_2.thisN'
p12205
I1
sa(dp12206
g20
g21
sS'trials.thisIndex'
p12207
g36
(g38
S'\x01\x00\x00\x00'
tRp12208
sg22
V
sS'trials_2.thisRepN'
p12209
I1
sS'trials_2.thisTrialN'
p12210
I0
sS'trials.thisRepN'
p12211
I272
sS'trials_2.thisTrial'
p12212
NsS'trials.thisN'
p12213
I545
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12214
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12215
I1
sS'trials_2.thisN'
p12216
I1
sa(dp12217
g20
g21
sS'trials.thisIndex'
p12218
g36
(g38
S'\x00\x00\x00\x00'
tRp12219
sg22
V
sS'trials_2.thisRepN'
p12220
I1
sS'trials_2.thisTrialN'
p12221
I0
sS'trials.thisRepN'
p12222
I273
sS'trials_2.thisTrial'
p12223
NsS'trials.thisN'
p12224
I546
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12225
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12226
I0
sS'trials_2.thisN'
p12227
I1
sa(dp12228
g20
g21
sS'trials.thisIndex'
p12229
g36
(g38
S'\x01\x00\x00\x00'
tRp12230
sg22
V
sS'trials_2.thisRepN'
p12231
I1
sS'trials_2.thisTrialN'
p12232
I0
sS'trials.thisRepN'
p12233
I273
sS'trials_2.thisTrial'
p12234
NsS'trials.thisN'
p12235
I547
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12236
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12237
I1
sS'trials_2.thisN'
p12238
I1
sa(dp12239
g20
g21
sS'trials.thisIndex'
p12240
g36
(g38
S'\x00\x00\x00\x00'
tRp12241
sg22
V
sS'trials_2.thisRepN'
p12242
I1
sS'trials_2.thisTrialN'
p12243
I0
sS'trials.thisRepN'
p12244
I274
sS'trials_2.thisTrial'
p12245
NsS'trials.thisN'
p12246
I548
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12247
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12248
I0
sS'trials_2.thisN'
p12249
I1
sa(dp12250
g20
g21
sS'trials.thisIndex'
p12251
g36
(g38
S'\x01\x00\x00\x00'
tRp12252
sg22
V
sS'trials_2.thisRepN'
p12253
I1
sS'trials_2.thisTrialN'
p12254
I0
sS'trials.thisRepN'
p12255
I274
sS'trials_2.thisTrial'
p12256
NsS'trials.thisN'
p12257
I549
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12258
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12259
I1
sS'trials_2.thisN'
p12260
I1
sa(dp12261
g20
g21
sS'trials.thisIndex'
p12262
g36
(g38
S'\x00\x00\x00\x00'
tRp12263
sg22
V
sS'trials_2.thisRepN'
p12264
I1
sS'trials_2.thisTrialN'
p12265
I0
sS'trials.thisRepN'
p12266
I275
sS'trials_2.thisTrial'
p12267
NsS'trials.thisN'
p12268
I550
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12269
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12270
I0
sS'trials_2.thisN'
p12271
I1
sa(dp12272
g20
g21
sS'trials.thisIndex'
p12273
g36
(g38
S'\x01\x00\x00\x00'
tRp12274
sg22
V
sS'trials_2.thisRepN'
p12275
I1
sS'trials_2.thisTrialN'
p12276
I0
sS'trials.thisRepN'
p12277
I275
sS'trials_2.thisTrial'
p12278
NsS'trials.thisN'
p12279
I551
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12280
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12281
I1
sS'trials_2.thisN'
p12282
I1
sa(dp12283
g20
g21
sS'trials.thisIndex'
p12284
g36
(g38
S'\x00\x00\x00\x00'
tRp12285
sg22
V
sS'trials_2.thisRepN'
p12286
I1
sS'trials_2.thisTrialN'
p12287
I0
sS'trials.thisRepN'
p12288
I276
sS'trials_2.thisTrial'
p12289
NsS'trials.thisN'
p12290
I552
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12291
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12292
I0
sS'trials_2.thisN'
p12293
I1
sa(dp12294
g20
g21
sS'trials.thisIndex'
p12295
g36
(g38
S'\x01\x00\x00\x00'
tRp12296
sg22
V
sS'trials_2.thisRepN'
p12297
I1
sS'trials_2.thisTrialN'
p12298
I0
sS'trials.thisRepN'
p12299
I276
sS'trials_2.thisTrial'
p12300
NsS'trials.thisN'
p12301
I553
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12302
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12303
I1
sS'trials_2.thisN'
p12304
I1
sa(dp12305
g20
g21
sS'trials.thisIndex'
p12306
g36
(g38
S'\x00\x00\x00\x00'
tRp12307
sg22
V
sS'trials_2.thisRepN'
p12308
I1
sS'trials_2.thisTrialN'
p12309
I0
sS'trials.thisRepN'
p12310
I277
sS'trials_2.thisTrial'
p12311
NsS'trials.thisN'
p12312
I554
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12313
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12314
I0
sS'trials_2.thisN'
p12315
I1
sa(dp12316
g20
g21
sS'trials.thisIndex'
p12317
g36
(g38
S'\x01\x00\x00\x00'
tRp12318
sg22
V
sS'trials_2.thisRepN'
p12319
I1
sS'trials_2.thisTrialN'
p12320
I0
sS'trials.thisRepN'
p12321
I277
sS'trials_2.thisTrial'
p12322
NsS'trials.thisN'
p12323
I555
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12324
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12325
I1
sS'trials_2.thisN'
p12326
I1
sa(dp12327
g20
g21
sS'trials.thisIndex'
p12328
g36
(g38
S'\x00\x00\x00\x00'
tRp12329
sg22
V
sS'trials_2.thisRepN'
p12330
I1
sS'trials_2.thisTrialN'
p12331
I0
sS'trials.thisRepN'
p12332
I278
sS'trials_2.thisTrial'
p12333
NsS'trials.thisN'
p12334
I556
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12335
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12336
I0
sS'trials_2.thisN'
p12337
I1
sa(dp12338
g20
g21
sS'trials.thisIndex'
p12339
g36
(g38
S'\x01\x00\x00\x00'
tRp12340
sg22
V
sS'trials_2.thisRepN'
p12341
I1
sS'trials_2.thisTrialN'
p12342
I0
sS'trials.thisRepN'
p12343
I278
sS'trials_2.thisTrial'
p12344
NsS'trials.thisN'
p12345
I557
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12346
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12347
I1
sS'trials_2.thisN'
p12348
I1
sa(dp12349
g20
g21
sS'trials.thisIndex'
p12350
g36
(g38
S'\x00\x00\x00\x00'
tRp12351
sg22
V
sS'trials_2.thisRepN'
p12352
I1
sS'trials_2.thisTrialN'
p12353
I0
sS'trials.thisRepN'
p12354
I279
sS'trials_2.thisTrial'
p12355
NsS'trials.thisN'
p12356
I558
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12357
g6216
sg6217
g6218
sS'trials.thisTrialN'
p12358
I0
sS'trials_2.thisN'
p12359
I1
sa(dp12360
g20
g21
sS'trials.thisIndex'
p12361
g36
(g38
S'\x01\x00\x00\x00'
tRp12362
sg22
V
sS'trials_2.thisRepN'
p12363
I1
sS'trials_2.thisTrialN'
p12364
I0
sS'trials.thisRepN'
p12365
I279
sS'trials_2.thisTrial'
p12366
NsS'trials.thisN'
p12367
I559
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12368
g6216
sg6217
g6230
sS'trials.thisTrialN'
p12369
I1
sS'trials_2.thisN'
p12370
I1
sa(dp12371
g20
g21
sg22
V
sS'trials_2.thisRepN'
p12372
I1
sS'trials_2.thisTrialN'
p12373
I0
sS'trials_2.thisTrial'
p12374
Nsg19
g11
sS'trials_2.thisIndex'
p12375
g6216
sg17
g18
sS'trials_2.thisN'
p12376
I1
sa(dp12377
g20
g21
sS'trials.thisIndex'
p12378
g36
(g38
S'\x00\x00\x00\x00'
tRp12379
sg22
V
sS'trials_2.thisRepN'
p12380
I2
sS'trials_2.thisTrialN'
p12381
I0
sS'trials.thisRepN'
p12382
I0
sS'trials_2.thisTrial'
p12383
NsS'trials.thisN'
p12384
I0
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12385
g36
(g38
S'\x00\x00\x00\x00'
tRp12386
sS'phase'
p12387
g36
(g47
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp12388
sS'trials.thisTrialN'
p12389
I0
sS'trials_2.thisN'
p12390
I2
sa(dp12391
g20
g21
sS'trials.thisIndex'
p12392
g36
(g38
S'\x01\x00\x00\x00'
tRp12393
sg22
V
sS'trials_2.thisRepN'
p12394
I2
sS'trials_2.thisTrialN'
p12395
I0
sS'trials.thisRepN'
p12396
I0
sS'trials_2.thisTrial'
p12397
NsS'trials.thisN'
p12398
I1
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12399
g12386
sg12387
g36
(g47
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp12400
sS'trials.thisTrialN'
p12401
I1
sS'trials_2.thisN'
p12402
I2
sa(dp12403
g20
g21
sS'trials.thisIndex'
p12404
g36
(g38
S'\x00\x00\x00\x00'
tRp12405
sg22
V
sS'trials_2.thisRepN'
p12406
I2
sS'trials_2.thisTrialN'
p12407
I0
sS'trials.thisRepN'
p12408
I1
sS'trials_2.thisTrial'
p12409
NsS'trials.thisN'
p12410
I2
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12411
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12412
I0
sS'trials_2.thisN'
p12413
I2
sa(dp12414
g20
g21
sS'trials.thisIndex'
p12415
g36
(g38
S'\x01\x00\x00\x00'
tRp12416
sg22
V
sS'trials_2.thisRepN'
p12417
I2
sS'trials_2.thisTrialN'
p12418
I0
sS'trials.thisRepN'
p12419
I1
sS'trials_2.thisTrial'
p12420
NsS'trials.thisN'
p12421
I3
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12422
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12423
I1
sS'trials_2.thisN'
p12424
I2
sa(dp12425
g20
g21
sS'trials.thisIndex'
p12426
g36
(g38
S'\x00\x00\x00\x00'
tRp12427
sg22
V
sS'trials_2.thisRepN'
p12428
I2
sS'trials_2.thisTrialN'
p12429
I0
sS'trials.thisRepN'
p12430
I2
sS'trials_2.thisTrial'
p12431
NsS'trials.thisN'
p12432
I4
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12433
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12434
I0
sS'trials_2.thisN'
p12435
I2
sa(dp12436
g20
g21
sS'trials.thisIndex'
p12437
g36
(g38
S'\x01\x00\x00\x00'
tRp12438
sg22
V
sS'trials_2.thisRepN'
p12439
I2
sS'trials_2.thisTrialN'
p12440
I0
sS'trials.thisRepN'
p12441
I2
sS'trials_2.thisTrial'
p12442
NsS'trials.thisN'
p12443
I5
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12444
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12445
I1
sS'trials_2.thisN'
p12446
I2
sa(dp12447
g20
g21
sS'trials.thisIndex'
p12448
g36
(g38
S'\x00\x00\x00\x00'
tRp12449
sg22
V
sS'trials_2.thisRepN'
p12450
I2
sS'trials_2.thisTrialN'
p12451
I0
sS'trials.thisRepN'
p12452
I3
sS'trials_2.thisTrial'
p12453
NsS'trials.thisN'
p12454
I6
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12455
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12456
I0
sS'trials_2.thisN'
p12457
I2
sa(dp12458
g20
g21
sS'trials.thisIndex'
p12459
g36
(g38
S'\x01\x00\x00\x00'
tRp12460
sg22
V
sS'trials_2.thisRepN'
p12461
I2
sS'trials_2.thisTrialN'
p12462
I0
sS'trials.thisRepN'
p12463
I3
sS'trials_2.thisTrial'
p12464
NsS'trials.thisN'
p12465
I7
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12466
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12467
I1
sS'trials_2.thisN'
p12468
I2
sa(dp12469
g20
g21
sS'trials.thisIndex'
p12470
g36
(g38
S'\x00\x00\x00\x00'
tRp12471
sg22
V
sS'trials_2.thisRepN'
p12472
I2
sS'trials_2.thisTrialN'
p12473
I0
sS'trials.thisRepN'
p12474
I4
sS'trials_2.thisTrial'
p12475
NsS'trials.thisN'
p12476
I8
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12477
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12478
I0
sS'trials_2.thisN'
p12479
I2
sa(dp12480
g20
g21
sS'trials.thisIndex'
p12481
g36
(g38
S'\x01\x00\x00\x00'
tRp12482
sg22
V
sS'trials_2.thisRepN'
p12483
I2
sS'trials_2.thisTrialN'
p12484
I0
sS'trials.thisRepN'
p12485
I4
sS'trials_2.thisTrial'
p12486
NsS'trials.thisN'
p12487
I9
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12488
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12489
I1
sS'trials_2.thisN'
p12490
I2
sa(dp12491
g20
g21
sS'trials.thisIndex'
p12492
g36
(g38
S'\x00\x00\x00\x00'
tRp12493
sg22
V
sS'trials_2.thisRepN'
p12494
I2
sS'trials_2.thisTrialN'
p12495
I0
sS'trials.thisRepN'
p12496
I5
sS'trials_2.thisTrial'
p12497
NsS'trials.thisN'
p12498
I10
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12499
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12500
I0
sS'trials_2.thisN'
p12501
I2
sa(dp12502
g20
g21
sS'trials.thisIndex'
p12503
g36
(g38
S'\x01\x00\x00\x00'
tRp12504
sg22
V
sS'trials_2.thisRepN'
p12505
I2
sS'trials_2.thisTrialN'
p12506
I0
sS'trials.thisRepN'
p12507
I5
sS'trials_2.thisTrial'
p12508
NsS'trials.thisN'
p12509
I11
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12510
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12511
I1
sS'trials_2.thisN'
p12512
I2
sa(dp12513
g20
g21
sS'trials.thisIndex'
p12514
g36
(g38
S'\x00\x00\x00\x00'
tRp12515
sg22
V
sS'trials_2.thisRepN'
p12516
I2
sS'trials_2.thisTrialN'
p12517
I0
sS'trials.thisRepN'
p12518
I6
sS'trials_2.thisTrial'
p12519
NsS'trials.thisN'
p12520
I12
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12521
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12522
I0
sS'trials_2.thisN'
p12523
I2
sa(dp12524
g20
g21
sS'trials.thisIndex'
p12525
g36
(g38
S'\x01\x00\x00\x00'
tRp12526
sg22
V
sS'trials_2.thisRepN'
p12527
I2
sS'trials_2.thisTrialN'
p12528
I0
sS'trials.thisRepN'
p12529
I6
sS'trials_2.thisTrial'
p12530
NsS'trials.thisN'
p12531
I13
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12532
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12533
I1
sS'trials_2.thisN'
p12534
I2
sa(dp12535
g20
g21
sS'trials.thisIndex'
p12536
g36
(g38
S'\x00\x00\x00\x00'
tRp12537
sg22
V
sS'trials_2.thisRepN'
p12538
I2
sS'trials_2.thisTrialN'
p12539
I0
sS'trials.thisRepN'
p12540
I7
sS'trials_2.thisTrial'
p12541
NsS'trials.thisN'
p12542
I14
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12543
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12544
I0
sS'trials_2.thisN'
p12545
I2
sa(dp12546
g20
g21
sS'trials.thisIndex'
p12547
g36
(g38
S'\x01\x00\x00\x00'
tRp12548
sg22
V
sS'trials_2.thisRepN'
p12549
I2
sS'trials_2.thisTrialN'
p12550
I0
sS'trials.thisRepN'
p12551
I7
sS'trials_2.thisTrial'
p12552
NsS'trials.thisN'
p12553
I15
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12554
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12555
I1
sS'trials_2.thisN'
p12556
I2
sa(dp12557
g20
g21
sS'trials.thisIndex'
p12558
g36
(g38
S'\x00\x00\x00\x00'
tRp12559
sg22
V
sS'trials_2.thisRepN'
p12560
I2
sS'trials_2.thisTrialN'
p12561
I0
sS'trials.thisRepN'
p12562
I8
sS'trials_2.thisTrial'
p12563
NsS'trials.thisN'
p12564
I16
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12565
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12566
I0
sS'trials_2.thisN'
p12567
I2
sa(dp12568
g20
g21
sS'trials.thisIndex'
p12569
g36
(g38
S'\x01\x00\x00\x00'
tRp12570
sg22
V
sS'trials_2.thisRepN'
p12571
I2
sS'trials_2.thisTrialN'
p12572
I0
sS'trials.thisRepN'
p12573
I8
sS'trials_2.thisTrial'
p12574
NsS'trials.thisN'
p12575
I17
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12576
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12577
I1
sS'trials_2.thisN'
p12578
I2
sa(dp12579
g20
g21
sS'trials.thisIndex'
p12580
g36
(g38
S'\x00\x00\x00\x00'
tRp12581
sg22
V
sS'trials_2.thisRepN'
p12582
I2
sS'trials_2.thisTrialN'
p12583
I0
sS'trials.thisRepN'
p12584
I9
sS'trials_2.thisTrial'
p12585
NsS'trials.thisN'
p12586
I18
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12587
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12588
I0
sS'trials_2.thisN'
p12589
I2
sa(dp12590
g20
g21
sS'trials.thisIndex'
p12591
g36
(g38
S'\x01\x00\x00\x00'
tRp12592
sg22
V
sS'trials_2.thisRepN'
p12593
I2
sS'trials_2.thisTrialN'
p12594
I0
sS'trials.thisRepN'
p12595
I9
sS'trials_2.thisTrial'
p12596
NsS'trials.thisN'
p12597
I19
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12598
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12599
I1
sS'trials_2.thisN'
p12600
I2
sa(dp12601
g20
g21
sS'trials.thisIndex'
p12602
g36
(g38
S'\x00\x00\x00\x00'
tRp12603
sg22
V
sS'trials_2.thisRepN'
p12604
I2
sS'trials_2.thisTrialN'
p12605
I0
sS'trials.thisRepN'
p12606
I10
sS'trials_2.thisTrial'
p12607
NsS'trials.thisN'
p12608
I20
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12609
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12610
I0
sS'trials_2.thisN'
p12611
I2
sa(dp12612
g20
g21
sS'trials.thisIndex'
p12613
g36
(g38
S'\x01\x00\x00\x00'
tRp12614
sg22
V
sS'trials_2.thisRepN'
p12615
I2
sS'trials_2.thisTrialN'
p12616
I0
sS'trials.thisRepN'
p12617
I10
sS'trials_2.thisTrial'
p12618
NsS'trials.thisN'
p12619
I21
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12620
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12621
I1
sS'trials_2.thisN'
p12622
I2
sa(dp12623
g20
g21
sS'trials.thisIndex'
p12624
g36
(g38
S'\x00\x00\x00\x00'
tRp12625
sg22
V
sS'trials_2.thisRepN'
p12626
I2
sS'trials_2.thisTrialN'
p12627
I0
sS'trials.thisRepN'
p12628
I11
sS'trials_2.thisTrial'
p12629
NsS'trials.thisN'
p12630
I22
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12631
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12632
I0
sS'trials_2.thisN'
p12633
I2
sa(dp12634
g20
g21
sS'trials.thisIndex'
p12635
g36
(g38
S'\x01\x00\x00\x00'
tRp12636
sg22
V
sS'trials_2.thisRepN'
p12637
I2
sS'trials_2.thisTrialN'
p12638
I0
sS'trials.thisRepN'
p12639
I11
sS'trials_2.thisTrial'
p12640
NsS'trials.thisN'
p12641
I23
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12642
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12643
I1
sS'trials_2.thisN'
p12644
I2
sa(dp12645
g20
g21
sS'trials.thisIndex'
p12646
g36
(g38
S'\x00\x00\x00\x00'
tRp12647
sg22
V
sS'trials_2.thisRepN'
p12648
I2
sS'trials_2.thisTrialN'
p12649
I0
sS'trials.thisRepN'
p12650
I12
sS'trials_2.thisTrial'
p12651
NsS'trials.thisN'
p12652
I24
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12653
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12654
I0
sS'trials_2.thisN'
p12655
I2
sa(dp12656
g20
g21
sS'trials.thisIndex'
p12657
g36
(g38
S'\x01\x00\x00\x00'
tRp12658
sg22
V
sS'trials_2.thisRepN'
p12659
I2
sS'trials_2.thisTrialN'
p12660
I0
sS'trials.thisRepN'
p12661
I12
sS'trials_2.thisTrial'
p12662
NsS'trials.thisN'
p12663
I25
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12664
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12665
I1
sS'trials_2.thisN'
p12666
I2
sa(dp12667
g20
g21
sS'trials.thisIndex'
p12668
g36
(g38
S'\x00\x00\x00\x00'
tRp12669
sg22
V
sS'trials_2.thisRepN'
p12670
I2
sS'trials_2.thisTrialN'
p12671
I0
sS'trials.thisRepN'
p12672
I13
sS'trials_2.thisTrial'
p12673
NsS'trials.thisN'
p12674
I26
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12675
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12676
I0
sS'trials_2.thisN'
p12677
I2
sa(dp12678
g20
g21
sS'trials.thisIndex'
p12679
g36
(g38
S'\x01\x00\x00\x00'
tRp12680
sg22
V
sS'trials_2.thisRepN'
p12681
I2
sS'trials_2.thisTrialN'
p12682
I0
sS'trials.thisRepN'
p12683
I13
sS'trials_2.thisTrial'
p12684
NsS'trials.thisN'
p12685
I27
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12686
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12687
I1
sS'trials_2.thisN'
p12688
I2
sa(dp12689
g20
g21
sS'trials.thisIndex'
p12690
g36
(g38
S'\x00\x00\x00\x00'
tRp12691
sg22
V
sS'trials_2.thisRepN'
p12692
I2
sS'trials_2.thisTrialN'
p12693
I0
sS'trials.thisRepN'
p12694
I14
sS'trials_2.thisTrial'
p12695
NsS'trials.thisN'
p12696
I28
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12697
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12698
I0
sS'trials_2.thisN'
p12699
I2
sa(dp12700
g20
g21
sS'trials.thisIndex'
p12701
g36
(g38
S'\x01\x00\x00\x00'
tRp12702
sg22
V
sS'trials_2.thisRepN'
p12703
I2
sS'trials_2.thisTrialN'
p12704
I0
sS'trials.thisRepN'
p12705
I14
sS'trials_2.thisTrial'
p12706
NsS'trials.thisN'
p12707
I29
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12708
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12709
I1
sS'trials_2.thisN'
p12710
I2
sa(dp12711
g20
g21
sS'trials.thisIndex'
p12712
g36
(g38
S'\x00\x00\x00\x00'
tRp12713
sg22
V
sS'trials_2.thisRepN'
p12714
I2
sS'trials_2.thisTrialN'
p12715
I0
sS'trials.thisRepN'
p12716
I15
sS'trials_2.thisTrial'
p12717
NsS'trials.thisN'
p12718
I30
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12719
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12720
I0
sS'trials_2.thisN'
p12721
I2
sa(dp12722
g20
g21
sS'trials.thisIndex'
p12723
g36
(g38
S'\x01\x00\x00\x00'
tRp12724
sg22
V
sS'trials_2.thisRepN'
p12725
I2
sS'trials_2.thisTrialN'
p12726
I0
sS'trials.thisRepN'
p12727
I15
sS'trials_2.thisTrial'
p12728
NsS'trials.thisN'
p12729
I31
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12730
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12731
I1
sS'trials_2.thisN'
p12732
I2
sa(dp12733
g20
g21
sS'trials.thisIndex'
p12734
g36
(g38
S'\x00\x00\x00\x00'
tRp12735
sg22
V
sS'trials_2.thisRepN'
p12736
I2
sS'trials_2.thisTrialN'
p12737
I0
sS'trials.thisRepN'
p12738
I16
sS'trials_2.thisTrial'
p12739
NsS'trials.thisN'
p12740
I32
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12741
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12742
I0
sS'trials_2.thisN'
p12743
I2
sa(dp12744
g20
g21
sS'trials.thisIndex'
p12745
g36
(g38
S'\x01\x00\x00\x00'
tRp12746
sg22
V
sS'trials_2.thisRepN'
p12747
I2
sS'trials_2.thisTrialN'
p12748
I0
sS'trials.thisRepN'
p12749
I16
sS'trials_2.thisTrial'
p12750
NsS'trials.thisN'
p12751
I33
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12752
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12753
I1
sS'trials_2.thisN'
p12754
I2
sa(dp12755
g20
g21
sS'trials.thisIndex'
p12756
g36
(g38
S'\x00\x00\x00\x00'
tRp12757
sg22
V
sS'trials_2.thisRepN'
p12758
I2
sS'trials_2.thisTrialN'
p12759
I0
sS'trials.thisRepN'
p12760
I17
sS'trials_2.thisTrial'
p12761
NsS'trials.thisN'
p12762
I34
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12763
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12764
I0
sS'trials_2.thisN'
p12765
I2
sa(dp12766
g20
g21
sS'trials.thisIndex'
p12767
g36
(g38
S'\x01\x00\x00\x00'
tRp12768
sg22
V
sS'trials_2.thisRepN'
p12769
I2
sS'trials_2.thisTrialN'
p12770
I0
sS'trials.thisRepN'
p12771
I17
sS'trials_2.thisTrial'
p12772
NsS'trials.thisN'
p12773
I35
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12774
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12775
I1
sS'trials_2.thisN'
p12776
I2
sa(dp12777
g20
g21
sS'trials.thisIndex'
p12778
g36
(g38
S'\x00\x00\x00\x00'
tRp12779
sg22
V
sS'trials_2.thisRepN'
p12780
I2
sS'trials_2.thisTrialN'
p12781
I0
sS'trials.thisRepN'
p12782
I18
sS'trials_2.thisTrial'
p12783
NsS'trials.thisN'
p12784
I36
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12785
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12786
I0
sS'trials_2.thisN'
p12787
I2
sa(dp12788
g20
g21
sS'trials.thisIndex'
p12789
g36
(g38
S'\x01\x00\x00\x00'
tRp12790
sg22
V
sS'trials_2.thisRepN'
p12791
I2
sS'trials_2.thisTrialN'
p12792
I0
sS'trials.thisRepN'
p12793
I18
sS'trials_2.thisTrial'
p12794
NsS'trials.thisN'
p12795
I37
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12796
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12797
I1
sS'trials_2.thisN'
p12798
I2
sa(dp12799
g20
g21
sS'trials.thisIndex'
p12800
g36
(g38
S'\x00\x00\x00\x00'
tRp12801
sg22
V
sS'trials_2.thisRepN'
p12802
I2
sS'trials_2.thisTrialN'
p12803
I0
sS'trials.thisRepN'
p12804
I19
sS'trials_2.thisTrial'
p12805
NsS'trials.thisN'
p12806
I38
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12807
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12808
I0
sS'trials_2.thisN'
p12809
I2
sa(dp12810
g20
g21
sS'trials.thisIndex'
p12811
g36
(g38
S'\x01\x00\x00\x00'
tRp12812
sg22
V
sS'trials_2.thisRepN'
p12813
I2
sS'trials_2.thisTrialN'
p12814
I0
sS'trials.thisRepN'
p12815
I19
sS'trials_2.thisTrial'
p12816
NsS'trials.thisN'
p12817
I39
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12818
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12819
I1
sS'trials_2.thisN'
p12820
I2
sa(dp12821
g20
g21
sS'trials.thisIndex'
p12822
g36
(g38
S'\x00\x00\x00\x00'
tRp12823
sg22
V
sS'trials_2.thisRepN'
p12824
I2
sS'trials_2.thisTrialN'
p12825
I0
sS'trials.thisRepN'
p12826
I20
sS'trials_2.thisTrial'
p12827
NsS'trials.thisN'
p12828
I40
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12829
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12830
I0
sS'trials_2.thisN'
p12831
I2
sa(dp12832
g20
g21
sS'trials.thisIndex'
p12833
g36
(g38
S'\x01\x00\x00\x00'
tRp12834
sg22
V
sS'trials_2.thisRepN'
p12835
I2
sS'trials_2.thisTrialN'
p12836
I0
sS'trials.thisRepN'
p12837
I20
sS'trials_2.thisTrial'
p12838
NsS'trials.thisN'
p12839
I41
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12840
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12841
I1
sS'trials_2.thisN'
p12842
I2
sa(dp12843
g20
g21
sS'trials.thisIndex'
p12844
g36
(g38
S'\x00\x00\x00\x00'
tRp12845
sg22
V
sS'trials_2.thisRepN'
p12846
I2
sS'trials_2.thisTrialN'
p12847
I0
sS'trials.thisRepN'
p12848
I21
sS'trials_2.thisTrial'
p12849
NsS'trials.thisN'
p12850
I42
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12851
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12852
I0
sS'trials_2.thisN'
p12853
I2
sa(dp12854
g20
g21
sS'trials.thisIndex'
p12855
g36
(g38
S'\x01\x00\x00\x00'
tRp12856
sg22
V
sS'trials_2.thisRepN'
p12857
I2
sS'trials_2.thisTrialN'
p12858
I0
sS'trials.thisRepN'
p12859
I21
sS'trials_2.thisTrial'
p12860
NsS'trials.thisN'
p12861
I43
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12862
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12863
I1
sS'trials_2.thisN'
p12864
I2
sa(dp12865
g20
g21
sS'trials.thisIndex'
p12866
g36
(g38
S'\x00\x00\x00\x00'
tRp12867
sg22
V
sS'trials_2.thisRepN'
p12868
I2
sS'trials_2.thisTrialN'
p12869
I0
sS'trials.thisRepN'
p12870
I22
sS'trials_2.thisTrial'
p12871
NsS'trials.thisN'
p12872
I44
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12873
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12874
I0
sS'trials_2.thisN'
p12875
I2
sa(dp12876
g20
g21
sS'trials.thisIndex'
p12877
g36
(g38
S'\x01\x00\x00\x00'
tRp12878
sg22
V
sS'trials_2.thisRepN'
p12879
I2
sS'trials_2.thisTrialN'
p12880
I0
sS'trials.thisRepN'
p12881
I22
sS'trials_2.thisTrial'
p12882
NsS'trials.thisN'
p12883
I45
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12884
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12885
I1
sS'trials_2.thisN'
p12886
I2
sa(dp12887
g20
g21
sS'trials.thisIndex'
p12888
g36
(g38
S'\x00\x00\x00\x00'
tRp12889
sg22
V
sS'trials_2.thisRepN'
p12890
I2
sS'trials_2.thisTrialN'
p12891
I0
sS'trials.thisRepN'
p12892
I23
sS'trials_2.thisTrial'
p12893
NsS'trials.thisN'
p12894
I46
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12895
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12896
I0
sS'trials_2.thisN'
p12897
I2
sa(dp12898
g20
g21
sS'trials.thisIndex'
p12899
g36
(g38
S'\x01\x00\x00\x00'
tRp12900
sg22
V
sS'trials_2.thisRepN'
p12901
I2
sS'trials_2.thisTrialN'
p12902
I0
sS'trials.thisRepN'
p12903
I23
sS'trials_2.thisTrial'
p12904
NsS'trials.thisN'
p12905
I47
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12906
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12907
I1
sS'trials_2.thisN'
p12908
I2
sa(dp12909
g20
g21
sS'trials.thisIndex'
p12910
g36
(g38
S'\x00\x00\x00\x00'
tRp12911
sg22
V
sS'trials_2.thisRepN'
p12912
I2
sS'trials_2.thisTrialN'
p12913
I0
sS'trials.thisRepN'
p12914
I24
sS'trials_2.thisTrial'
p12915
NsS'trials.thisN'
p12916
I48
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12917
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12918
I0
sS'trials_2.thisN'
p12919
I2
sa(dp12920
g20
g21
sS'trials.thisIndex'
p12921
g36
(g38
S'\x01\x00\x00\x00'
tRp12922
sg22
V
sS'trials_2.thisRepN'
p12923
I2
sS'trials_2.thisTrialN'
p12924
I0
sS'trials.thisRepN'
p12925
I24
sS'trials_2.thisTrial'
p12926
NsS'trials.thisN'
p12927
I49
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12928
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12929
I1
sS'trials_2.thisN'
p12930
I2
sa(dp12931
g20
g21
sS'trials.thisIndex'
p12932
g36
(g38
S'\x00\x00\x00\x00'
tRp12933
sg22
V
sS'trials_2.thisRepN'
p12934
I2
sS'trials_2.thisTrialN'
p12935
I0
sS'trials.thisRepN'
p12936
I25
sS'trials_2.thisTrial'
p12937
NsS'trials.thisN'
p12938
I50
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12939
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12940
I0
sS'trials_2.thisN'
p12941
I2
sa(dp12942
g20
g21
sS'trials.thisIndex'
p12943
g36
(g38
S'\x01\x00\x00\x00'
tRp12944
sg22
V
sS'trials_2.thisRepN'
p12945
I2
sS'trials_2.thisTrialN'
p12946
I0
sS'trials.thisRepN'
p12947
I25
sS'trials_2.thisTrial'
p12948
NsS'trials.thisN'
p12949
I51
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12950
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12951
I1
sS'trials_2.thisN'
p12952
I2
sa(dp12953
g20
g21
sS'trials.thisIndex'
p12954
g36
(g38
S'\x00\x00\x00\x00'
tRp12955
sg22
V
sS'trials_2.thisRepN'
p12956
I2
sS'trials_2.thisTrialN'
p12957
I0
sS'trials.thisRepN'
p12958
I26
sS'trials_2.thisTrial'
p12959
NsS'trials.thisN'
p12960
I52
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12961
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12962
I0
sS'trials_2.thisN'
p12963
I2
sa(dp12964
g20
g21
sS'trials.thisIndex'
p12965
g36
(g38
S'\x01\x00\x00\x00'
tRp12966
sg22
V
sS'trials_2.thisRepN'
p12967
I2
sS'trials_2.thisTrialN'
p12968
I0
sS'trials.thisRepN'
p12969
I26
sS'trials_2.thisTrial'
p12970
NsS'trials.thisN'
p12971
I53
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12972
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12973
I1
sS'trials_2.thisN'
p12974
I2
sa(dp12975
g20
g21
sS'trials.thisIndex'
p12976
g36
(g38
S'\x00\x00\x00\x00'
tRp12977
sg22
V
sS'trials_2.thisRepN'
p12978
I2
sS'trials_2.thisTrialN'
p12979
I0
sS'trials.thisRepN'
p12980
I27
sS'trials_2.thisTrial'
p12981
NsS'trials.thisN'
p12982
I54
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12983
g12386
sg12387
g12388
sS'trials.thisTrialN'
p12984
I0
sS'trials_2.thisN'
p12985
I2
sa(dp12986
g20
g21
sS'trials.thisIndex'
p12987
g36
(g38
S'\x01\x00\x00\x00'
tRp12988
sg22
V
sS'trials_2.thisRepN'
p12989
I2
sS'trials_2.thisTrialN'
p12990
I0
sS'trials.thisRepN'
p12991
I27
sS'trials_2.thisTrial'
p12992
NsS'trials.thisN'
p12993
I55
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p12994
g12386
sg12387
g12400
sS'trials.thisTrialN'
p12995
I1
sS'trials_2.thisN'
p12996
I2
sa(dp12997
g20
g21
sS'trials.thisIndex'
p12998
g36
(g38
S'\x00\x00\x00\x00'
tRp12999
sg22
V
sS'trials_2.thisRepN'
p13000
I2
sS'trials_2.thisTrialN'
p13001
I0
sS'trials.thisRepN'
p13002
I28
sS'trials_2.thisTrial'
p13003
NsS'trials.thisN'
p13004
I56
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13005
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13006
I0
sS'trials_2.thisN'
p13007
I2
sa(dp13008
g20
g21
sS'trials.thisIndex'
p13009
g36
(g38
S'\x01\x00\x00\x00'
tRp13010
sg22
V
sS'trials_2.thisRepN'
p13011
I2
sS'trials_2.thisTrialN'
p13012
I0
sS'trials.thisRepN'
p13013
I28
sS'trials_2.thisTrial'
p13014
NsS'trials.thisN'
p13015
I57
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13016
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13017
I1
sS'trials_2.thisN'
p13018
I2
sa(dp13019
g20
g21
sS'trials.thisIndex'
p13020
g36
(g38
S'\x00\x00\x00\x00'
tRp13021
sg22
V
sS'trials_2.thisRepN'
p13022
I2
sS'trials_2.thisTrialN'
p13023
I0
sS'trials.thisRepN'
p13024
I29
sS'trials_2.thisTrial'
p13025
NsS'trials.thisN'
p13026
I58
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13027
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13028
I0
sS'trials_2.thisN'
p13029
I2
sa(dp13030
g20
g21
sS'trials.thisIndex'
p13031
g36
(g38
S'\x01\x00\x00\x00'
tRp13032
sg22
V
sS'trials_2.thisRepN'
p13033
I2
sS'trials_2.thisTrialN'
p13034
I0
sS'trials.thisRepN'
p13035
I29
sS'trials_2.thisTrial'
p13036
NsS'trials.thisN'
p13037
I59
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13038
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13039
I1
sS'trials_2.thisN'
p13040
I2
sa(dp13041
g20
g21
sS'trials.thisIndex'
p13042
g36
(g38
S'\x00\x00\x00\x00'
tRp13043
sg22
V
sS'trials_2.thisRepN'
p13044
I2
sS'trials_2.thisTrialN'
p13045
I0
sS'trials.thisRepN'
p13046
I30
sS'trials_2.thisTrial'
p13047
NsS'trials.thisN'
p13048
I60
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13049
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13050
I0
sS'trials_2.thisN'
p13051
I2
sa(dp13052
g20
g21
sS'trials.thisIndex'
p13053
g36
(g38
S'\x01\x00\x00\x00'
tRp13054
sg22
V
sS'trials_2.thisRepN'
p13055
I2
sS'trials_2.thisTrialN'
p13056
I0
sS'trials.thisRepN'
p13057
I30
sS'trials_2.thisTrial'
p13058
NsS'trials.thisN'
p13059
I61
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13060
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13061
I1
sS'trials_2.thisN'
p13062
I2
sa(dp13063
g20
g21
sS'trials.thisIndex'
p13064
g36
(g38
S'\x00\x00\x00\x00'
tRp13065
sg22
V
sS'trials_2.thisRepN'
p13066
I2
sS'trials_2.thisTrialN'
p13067
I0
sS'trials.thisRepN'
p13068
I31
sS'trials_2.thisTrial'
p13069
NsS'trials.thisN'
p13070
I62
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13071
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13072
I0
sS'trials_2.thisN'
p13073
I2
sa(dp13074
g20
g21
sS'trials.thisIndex'
p13075
g36
(g38
S'\x01\x00\x00\x00'
tRp13076
sg22
V
sS'trials_2.thisRepN'
p13077
I2
sS'trials_2.thisTrialN'
p13078
I0
sS'trials.thisRepN'
p13079
I31
sS'trials_2.thisTrial'
p13080
NsS'trials.thisN'
p13081
I63
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13082
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13083
I1
sS'trials_2.thisN'
p13084
I2
sa(dp13085
g20
g21
sS'trials.thisIndex'
p13086
g36
(g38
S'\x00\x00\x00\x00'
tRp13087
sg22
V
sS'trials_2.thisRepN'
p13088
I2
sS'trials_2.thisTrialN'
p13089
I0
sS'trials.thisRepN'
p13090
I32
sS'trials_2.thisTrial'
p13091
NsS'trials.thisN'
p13092
I64
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13093
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13094
I0
sS'trials_2.thisN'
p13095
I2
sa(dp13096
g20
g21
sS'trials.thisIndex'
p13097
g36
(g38
S'\x01\x00\x00\x00'
tRp13098
sg22
V
sS'trials_2.thisRepN'
p13099
I2
sS'trials_2.thisTrialN'
p13100
I0
sS'trials.thisRepN'
p13101
I32
sS'trials_2.thisTrial'
p13102
NsS'trials.thisN'
p13103
I65
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13104
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13105
I1
sS'trials_2.thisN'
p13106
I2
sa(dp13107
g20
g21
sS'trials.thisIndex'
p13108
g36
(g38
S'\x00\x00\x00\x00'
tRp13109
sg22
V
sS'trials_2.thisRepN'
p13110
I2
sS'trials_2.thisTrialN'
p13111
I0
sS'trials.thisRepN'
p13112
I33
sS'trials_2.thisTrial'
p13113
NsS'trials.thisN'
p13114
I66
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13115
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13116
I0
sS'trials_2.thisN'
p13117
I2
sa(dp13118
g20
g21
sS'trials.thisIndex'
p13119
g36
(g38
S'\x01\x00\x00\x00'
tRp13120
sg22
V
sS'trials_2.thisRepN'
p13121
I2
sS'trials_2.thisTrialN'
p13122
I0
sS'trials.thisRepN'
p13123
I33
sS'trials_2.thisTrial'
p13124
NsS'trials.thisN'
p13125
I67
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13126
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13127
I1
sS'trials_2.thisN'
p13128
I2
sa(dp13129
g20
g21
sS'trials.thisIndex'
p13130
g36
(g38
S'\x00\x00\x00\x00'
tRp13131
sg22
V
sS'trials_2.thisRepN'
p13132
I2
sS'trials_2.thisTrialN'
p13133
I0
sS'trials.thisRepN'
p13134
I34
sS'trials_2.thisTrial'
p13135
NsS'trials.thisN'
p13136
I68
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13137
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13138
I0
sS'trials_2.thisN'
p13139
I2
sa(dp13140
g20
g21
sS'trials.thisIndex'
p13141
g36
(g38
S'\x01\x00\x00\x00'
tRp13142
sg22
V
sS'trials_2.thisRepN'
p13143
I2
sS'trials_2.thisTrialN'
p13144
I0
sS'trials.thisRepN'
p13145
I34
sS'trials_2.thisTrial'
p13146
NsS'trials.thisN'
p13147
I69
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13148
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13149
I1
sS'trials_2.thisN'
p13150
I2
sa(dp13151
g20
g21
sS'trials.thisIndex'
p13152
g36
(g38
S'\x00\x00\x00\x00'
tRp13153
sg22
V
sS'trials_2.thisRepN'
p13154
I2
sS'trials_2.thisTrialN'
p13155
I0
sS'trials.thisRepN'
p13156
I35
sS'trials_2.thisTrial'
p13157
NsS'trials.thisN'
p13158
I70
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13159
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13160
I0
sS'trials_2.thisN'
p13161
I2
sa(dp13162
g20
g21
sS'trials.thisIndex'
p13163
g36
(g38
S'\x01\x00\x00\x00'
tRp13164
sg22
V
sS'trials_2.thisRepN'
p13165
I2
sS'trials_2.thisTrialN'
p13166
I0
sS'trials.thisRepN'
p13167
I35
sS'trials_2.thisTrial'
p13168
NsS'trials.thisN'
p13169
I71
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13170
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13171
I1
sS'trials_2.thisN'
p13172
I2
sa(dp13173
g20
g21
sS'trials.thisIndex'
p13174
g36
(g38
S'\x00\x00\x00\x00'
tRp13175
sg22
V
sS'trials_2.thisRepN'
p13176
I2
sS'trials_2.thisTrialN'
p13177
I0
sS'trials.thisRepN'
p13178
I36
sS'trials_2.thisTrial'
p13179
NsS'trials.thisN'
p13180
I72
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13181
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13182
I0
sS'trials_2.thisN'
p13183
I2
sa(dp13184
g20
g21
sS'trials.thisIndex'
p13185
g36
(g38
S'\x01\x00\x00\x00'
tRp13186
sg22
V
sS'trials_2.thisRepN'
p13187
I2
sS'trials_2.thisTrialN'
p13188
I0
sS'trials.thisRepN'
p13189
I36
sS'trials_2.thisTrial'
p13190
NsS'trials.thisN'
p13191
I73
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13192
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13193
I1
sS'trials_2.thisN'
p13194
I2
sa(dp13195
g20
g21
sS'trials.thisIndex'
p13196
g36
(g38
S'\x00\x00\x00\x00'
tRp13197
sg22
V
sS'trials_2.thisRepN'
p13198
I2
sS'trials_2.thisTrialN'
p13199
I0
sS'trials.thisRepN'
p13200
I37
sS'trials_2.thisTrial'
p13201
NsS'trials.thisN'
p13202
I74
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13203
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13204
I0
sS'trials_2.thisN'
p13205
I2
sa(dp13206
g20
g21
sS'trials.thisIndex'
p13207
g36
(g38
S'\x01\x00\x00\x00'
tRp13208
sg22
V
sS'trials_2.thisRepN'
p13209
I2
sS'trials_2.thisTrialN'
p13210
I0
sS'trials.thisRepN'
p13211
I37
sS'trials_2.thisTrial'
p13212
NsS'trials.thisN'
p13213
I75
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13214
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13215
I1
sS'trials_2.thisN'
p13216
I2
sa(dp13217
g20
g21
sS'trials.thisIndex'
p13218
g36
(g38
S'\x00\x00\x00\x00'
tRp13219
sg22
V
sS'trials_2.thisRepN'
p13220
I2
sS'trials_2.thisTrialN'
p13221
I0
sS'trials.thisRepN'
p13222
I38
sS'trials_2.thisTrial'
p13223
NsS'trials.thisN'
p13224
I76
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13225
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13226
I0
sS'trials_2.thisN'
p13227
I2
sa(dp13228
g20
g21
sS'trials.thisIndex'
p13229
g36
(g38
S'\x01\x00\x00\x00'
tRp13230
sg22
V
sS'trials_2.thisRepN'
p13231
I2
sS'trials_2.thisTrialN'
p13232
I0
sS'trials.thisRepN'
p13233
I38
sS'trials_2.thisTrial'
p13234
NsS'trials.thisN'
p13235
I77
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13236
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13237
I1
sS'trials_2.thisN'
p13238
I2
sa(dp13239
g20
g21
sS'trials.thisIndex'
p13240
g36
(g38
S'\x00\x00\x00\x00'
tRp13241
sg22
V
sS'trials_2.thisRepN'
p13242
I2
sS'trials_2.thisTrialN'
p13243
I0
sS'trials.thisRepN'
p13244
I39
sS'trials_2.thisTrial'
p13245
NsS'trials.thisN'
p13246
I78
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13247
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13248
I0
sS'trials_2.thisN'
p13249
I2
sa(dp13250
g20
g21
sS'trials.thisIndex'
p13251
g36
(g38
S'\x01\x00\x00\x00'
tRp13252
sg22
V
sS'trials_2.thisRepN'
p13253
I2
sS'trials_2.thisTrialN'
p13254
I0
sS'trials.thisRepN'
p13255
I39
sS'trials_2.thisTrial'
p13256
NsS'trials.thisN'
p13257
I79
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13258
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13259
I1
sS'trials_2.thisN'
p13260
I2
sa(dp13261
g20
g21
sS'trials.thisIndex'
p13262
g36
(g38
S'\x00\x00\x00\x00'
tRp13263
sg22
V
sS'trials_2.thisRepN'
p13264
I2
sS'trials_2.thisTrialN'
p13265
I0
sS'trials.thisRepN'
p13266
I40
sS'trials_2.thisTrial'
p13267
NsS'trials.thisN'
p13268
I80
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13269
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13270
I0
sS'trials_2.thisN'
p13271
I2
sa(dp13272
g20
g21
sS'trials.thisIndex'
p13273
g36
(g38
S'\x01\x00\x00\x00'
tRp13274
sg22
V
sS'trials_2.thisRepN'
p13275
I2
sS'trials_2.thisTrialN'
p13276
I0
sS'trials.thisRepN'
p13277
I40
sS'trials_2.thisTrial'
p13278
NsS'trials.thisN'
p13279
I81
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13280
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13281
I1
sS'trials_2.thisN'
p13282
I2
sa(dp13283
g20
g21
sS'trials.thisIndex'
p13284
g36
(g38
S'\x00\x00\x00\x00'
tRp13285
sg22
V
sS'trials_2.thisRepN'
p13286
I2
sS'trials_2.thisTrialN'
p13287
I0
sS'trials.thisRepN'
p13288
I41
sS'trials_2.thisTrial'
p13289
NsS'trials.thisN'
p13290
I82
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13291
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13292
I0
sS'trials_2.thisN'
p13293
I2
sa(dp13294
g20
g21
sS'trials.thisIndex'
p13295
g36
(g38
S'\x01\x00\x00\x00'
tRp13296
sg22
V
sS'trials_2.thisRepN'
p13297
I2
sS'trials_2.thisTrialN'
p13298
I0
sS'trials.thisRepN'
p13299
I41
sS'trials_2.thisTrial'
p13300
NsS'trials.thisN'
p13301
I83
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13302
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13303
I1
sS'trials_2.thisN'
p13304
I2
sa(dp13305
g20
g21
sS'trials.thisIndex'
p13306
g36
(g38
S'\x00\x00\x00\x00'
tRp13307
sg22
V
sS'trials_2.thisRepN'
p13308
I2
sS'trials_2.thisTrialN'
p13309
I0
sS'trials.thisRepN'
p13310
I42
sS'trials_2.thisTrial'
p13311
NsS'trials.thisN'
p13312
I84
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13313
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13314
I0
sS'trials_2.thisN'
p13315
I2
sa(dp13316
g20
g21
sS'trials.thisIndex'
p13317
g36
(g38
S'\x01\x00\x00\x00'
tRp13318
sg22
V
sS'trials_2.thisRepN'
p13319
I2
sS'trials_2.thisTrialN'
p13320
I0
sS'trials.thisRepN'
p13321
I42
sS'trials_2.thisTrial'
p13322
NsS'trials.thisN'
p13323
I85
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13324
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13325
I1
sS'trials_2.thisN'
p13326
I2
sa(dp13327
g20
g21
sS'trials.thisIndex'
p13328
g36
(g38
S'\x00\x00\x00\x00'
tRp13329
sg22
V
sS'trials_2.thisRepN'
p13330
I2
sS'trials_2.thisTrialN'
p13331
I0
sS'trials.thisRepN'
p13332
I43
sS'trials_2.thisTrial'
p13333
NsS'trials.thisN'
p13334
I86
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13335
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13336
I0
sS'trials_2.thisN'
p13337
I2
sa(dp13338
g20
g21
sS'trials.thisIndex'
p13339
g36
(g38
S'\x01\x00\x00\x00'
tRp13340
sg22
V
sS'trials_2.thisRepN'
p13341
I2
sS'trials_2.thisTrialN'
p13342
I0
sS'trials.thisRepN'
p13343
I43
sS'trials_2.thisTrial'
p13344
NsS'trials.thisN'
p13345
I87
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13346
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13347
I1
sS'trials_2.thisN'
p13348
I2
sa(dp13349
g20
g21
sS'trials.thisIndex'
p13350
g36
(g38
S'\x00\x00\x00\x00'
tRp13351
sg22
V
sS'trials_2.thisRepN'
p13352
I2
sS'trials_2.thisTrialN'
p13353
I0
sS'trials.thisRepN'
p13354
I44
sS'trials_2.thisTrial'
p13355
NsS'trials.thisN'
p13356
I88
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13357
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13358
I0
sS'trials_2.thisN'
p13359
I2
sa(dp13360
g20
g21
sS'trials.thisIndex'
p13361
g36
(g38
S'\x01\x00\x00\x00'
tRp13362
sg22
V
sS'trials_2.thisRepN'
p13363
I2
sS'trials_2.thisTrialN'
p13364
I0
sS'trials.thisRepN'
p13365
I44
sS'trials_2.thisTrial'
p13366
NsS'trials.thisN'
p13367
I89
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13368
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13369
I1
sS'trials_2.thisN'
p13370
I2
sa(dp13371
g20
g21
sS'trials.thisIndex'
p13372
g36
(g38
S'\x00\x00\x00\x00'
tRp13373
sg22
V
sS'trials_2.thisRepN'
p13374
I2
sS'trials_2.thisTrialN'
p13375
I0
sS'trials.thisRepN'
p13376
I45
sS'trials_2.thisTrial'
p13377
NsS'trials.thisN'
p13378
I90
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13379
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13380
I0
sS'trials_2.thisN'
p13381
I2
sa(dp13382
g20
g21
sS'trials.thisIndex'
p13383
g36
(g38
S'\x01\x00\x00\x00'
tRp13384
sg22
V
sS'trials_2.thisRepN'
p13385
I2
sS'trials_2.thisTrialN'
p13386
I0
sS'trials.thisRepN'
p13387
I45
sS'trials_2.thisTrial'
p13388
NsS'trials.thisN'
p13389
I91
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13390
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13391
I1
sS'trials_2.thisN'
p13392
I2
sa(dp13393
g20
g21
sS'trials.thisIndex'
p13394
g36
(g38
S'\x00\x00\x00\x00'
tRp13395
sg22
V
sS'trials_2.thisRepN'
p13396
I2
sS'trials_2.thisTrialN'
p13397
I0
sS'trials.thisRepN'
p13398
I46
sS'trials_2.thisTrial'
p13399
NsS'trials.thisN'
p13400
I92
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13401
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13402
I0
sS'trials_2.thisN'
p13403
I2
sa(dp13404
g20
g21
sS'trials.thisIndex'
p13405
g36
(g38
S'\x01\x00\x00\x00'
tRp13406
sg22
V
sS'trials_2.thisRepN'
p13407
I2
sS'trials_2.thisTrialN'
p13408
I0
sS'trials.thisRepN'
p13409
I46
sS'trials_2.thisTrial'
p13410
NsS'trials.thisN'
p13411
I93
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13412
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13413
I1
sS'trials_2.thisN'
p13414
I2
sa(dp13415
g20
g21
sS'trials.thisIndex'
p13416
g36
(g38
S'\x00\x00\x00\x00'
tRp13417
sg22
V
sS'trials_2.thisRepN'
p13418
I2
sS'trials_2.thisTrialN'
p13419
I0
sS'trials.thisRepN'
p13420
I47
sS'trials_2.thisTrial'
p13421
NsS'trials.thisN'
p13422
I94
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13423
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13424
I0
sS'trials_2.thisN'
p13425
I2
sa(dp13426
g20
g21
sS'trials.thisIndex'
p13427
g36
(g38
S'\x01\x00\x00\x00'
tRp13428
sg22
V
sS'trials_2.thisRepN'
p13429
I2
sS'trials_2.thisTrialN'
p13430
I0
sS'trials.thisRepN'
p13431
I47
sS'trials_2.thisTrial'
p13432
NsS'trials.thisN'
p13433
I95
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13434
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13435
I1
sS'trials_2.thisN'
p13436
I2
sa(dp13437
g20
g21
sS'trials.thisIndex'
p13438
g36
(g38
S'\x00\x00\x00\x00'
tRp13439
sg22
V
sS'trials_2.thisRepN'
p13440
I2
sS'trials_2.thisTrialN'
p13441
I0
sS'trials.thisRepN'
p13442
I48
sS'trials_2.thisTrial'
p13443
NsS'trials.thisN'
p13444
I96
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13445
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13446
I0
sS'trials_2.thisN'
p13447
I2
sa(dp13448
g20
g21
sS'trials.thisIndex'
p13449
g36
(g38
S'\x01\x00\x00\x00'
tRp13450
sg22
V
sS'trials_2.thisRepN'
p13451
I2
sS'trials_2.thisTrialN'
p13452
I0
sS'trials.thisRepN'
p13453
I48
sS'trials_2.thisTrial'
p13454
NsS'trials.thisN'
p13455
I97
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13456
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13457
I1
sS'trials_2.thisN'
p13458
I2
sa(dp13459
g20
g21
sS'trials.thisIndex'
p13460
g36
(g38
S'\x00\x00\x00\x00'
tRp13461
sg22
V
sS'trials_2.thisRepN'
p13462
I2
sS'trials_2.thisTrialN'
p13463
I0
sS'trials.thisRepN'
p13464
I49
sS'trials_2.thisTrial'
p13465
NsS'trials.thisN'
p13466
I98
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13467
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13468
I0
sS'trials_2.thisN'
p13469
I2
sa(dp13470
g20
g21
sS'trials.thisIndex'
p13471
g36
(g38
S'\x01\x00\x00\x00'
tRp13472
sg22
V
sS'trials_2.thisRepN'
p13473
I2
sS'trials_2.thisTrialN'
p13474
I0
sS'trials.thisRepN'
p13475
I49
sS'trials_2.thisTrial'
p13476
NsS'trials.thisN'
p13477
I99
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13478
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13479
I1
sS'trials_2.thisN'
p13480
I2
sa(dp13481
g20
g21
sS'trials.thisIndex'
p13482
g36
(g38
S'\x00\x00\x00\x00'
tRp13483
sg22
V
sS'trials_2.thisRepN'
p13484
I2
sS'trials_2.thisTrialN'
p13485
I0
sS'trials.thisRepN'
p13486
I50
sS'trials_2.thisTrial'
p13487
NsS'trials.thisN'
p13488
I100
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13489
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13490
I0
sS'trials_2.thisN'
p13491
I2
sa(dp13492
g20
g21
sS'trials.thisIndex'
p13493
g36
(g38
S'\x01\x00\x00\x00'
tRp13494
sg22
V
sS'trials_2.thisRepN'
p13495
I2
sS'trials_2.thisTrialN'
p13496
I0
sS'trials.thisRepN'
p13497
I50
sS'trials_2.thisTrial'
p13498
NsS'trials.thisN'
p13499
I101
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13500
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13501
I1
sS'trials_2.thisN'
p13502
I2
sa(dp13503
g20
g21
sS'trials.thisIndex'
p13504
g36
(g38
S'\x00\x00\x00\x00'
tRp13505
sg22
V
sS'trials_2.thisRepN'
p13506
I2
sS'trials_2.thisTrialN'
p13507
I0
sS'trials.thisRepN'
p13508
I51
sS'trials_2.thisTrial'
p13509
NsS'trials.thisN'
p13510
I102
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13511
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13512
I0
sS'trials_2.thisN'
p13513
I2
sa(dp13514
g20
g21
sS'trials.thisIndex'
p13515
g36
(g38
S'\x01\x00\x00\x00'
tRp13516
sg22
V
sS'trials_2.thisRepN'
p13517
I2
sS'trials_2.thisTrialN'
p13518
I0
sS'trials.thisRepN'
p13519
I51
sS'trials_2.thisTrial'
p13520
NsS'trials.thisN'
p13521
I103
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13522
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13523
I1
sS'trials_2.thisN'
p13524
I2
sa(dp13525
g20
g21
sS'trials.thisIndex'
p13526
g36
(g38
S'\x00\x00\x00\x00'
tRp13527
sg22
V
sS'trials_2.thisRepN'
p13528
I2
sS'trials_2.thisTrialN'
p13529
I0
sS'trials.thisRepN'
p13530
I52
sS'trials_2.thisTrial'
p13531
NsS'trials.thisN'
p13532
I104
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13533
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13534
I0
sS'trials_2.thisN'
p13535
I2
sa(dp13536
g20
g21
sS'trials.thisIndex'
p13537
g36
(g38
S'\x01\x00\x00\x00'
tRp13538
sg22
V
sS'trials_2.thisRepN'
p13539
I2
sS'trials_2.thisTrialN'
p13540
I0
sS'trials.thisRepN'
p13541
I52
sS'trials_2.thisTrial'
p13542
NsS'trials.thisN'
p13543
I105
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13544
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13545
I1
sS'trials_2.thisN'
p13546
I2
sa(dp13547
g20
g21
sS'trials.thisIndex'
p13548
g36
(g38
S'\x00\x00\x00\x00'
tRp13549
sg22
V
sS'trials_2.thisRepN'
p13550
I2
sS'trials_2.thisTrialN'
p13551
I0
sS'trials.thisRepN'
p13552
I53
sS'trials_2.thisTrial'
p13553
NsS'trials.thisN'
p13554
I106
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13555
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13556
I0
sS'trials_2.thisN'
p13557
I2
sa(dp13558
g20
g21
sS'trials.thisIndex'
p13559
g36
(g38
S'\x01\x00\x00\x00'
tRp13560
sg22
V
sS'trials_2.thisRepN'
p13561
I2
sS'trials_2.thisTrialN'
p13562
I0
sS'trials.thisRepN'
p13563
I53
sS'trials_2.thisTrial'
p13564
NsS'trials.thisN'
p13565
I107
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13566
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13567
I1
sS'trials_2.thisN'
p13568
I2
sa(dp13569
g20
g21
sS'trials.thisIndex'
p13570
g36
(g38
S'\x00\x00\x00\x00'
tRp13571
sg22
V
sS'trials_2.thisRepN'
p13572
I2
sS'trials_2.thisTrialN'
p13573
I0
sS'trials.thisRepN'
p13574
I54
sS'trials_2.thisTrial'
p13575
NsS'trials.thisN'
p13576
I108
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13577
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13578
I0
sS'trials_2.thisN'
p13579
I2
sa(dp13580
g20
g21
sS'trials.thisIndex'
p13581
g36
(g38
S'\x01\x00\x00\x00'
tRp13582
sg22
V
sS'trials_2.thisRepN'
p13583
I2
sS'trials_2.thisTrialN'
p13584
I0
sS'trials.thisRepN'
p13585
I54
sS'trials_2.thisTrial'
p13586
NsS'trials.thisN'
p13587
I109
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13588
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13589
I1
sS'trials_2.thisN'
p13590
I2
sa(dp13591
g20
g21
sS'trials.thisIndex'
p13592
g36
(g38
S'\x00\x00\x00\x00'
tRp13593
sg22
V
sS'trials_2.thisRepN'
p13594
I2
sS'trials_2.thisTrialN'
p13595
I0
sS'trials.thisRepN'
p13596
I55
sS'trials_2.thisTrial'
p13597
NsS'trials.thisN'
p13598
I110
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13599
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13600
I0
sS'trials_2.thisN'
p13601
I2
sa(dp13602
g20
g21
sS'trials.thisIndex'
p13603
g36
(g38
S'\x01\x00\x00\x00'
tRp13604
sg22
V
sS'trials_2.thisRepN'
p13605
I2
sS'trials_2.thisTrialN'
p13606
I0
sS'trials.thisRepN'
p13607
I55
sS'trials_2.thisTrial'
p13608
NsS'trials.thisN'
p13609
I111
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13610
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13611
I1
sS'trials_2.thisN'
p13612
I2
sa(dp13613
g20
g21
sS'trials.thisIndex'
p13614
g36
(g38
S'\x00\x00\x00\x00'
tRp13615
sg22
V
sS'trials_2.thisRepN'
p13616
I2
sS'trials_2.thisTrialN'
p13617
I0
sS'trials.thisRepN'
p13618
I56
sS'trials_2.thisTrial'
p13619
NsS'trials.thisN'
p13620
I112
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13621
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13622
I0
sS'trials_2.thisN'
p13623
I2
sa(dp13624
g20
g21
sS'trials.thisIndex'
p13625
g36
(g38
S'\x01\x00\x00\x00'
tRp13626
sg22
V
sS'trials_2.thisRepN'
p13627
I2
sS'trials_2.thisTrialN'
p13628
I0
sS'trials.thisRepN'
p13629
I56
sS'trials_2.thisTrial'
p13630
NsS'trials.thisN'
p13631
I113
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13632
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13633
I1
sS'trials_2.thisN'
p13634
I2
sa(dp13635
g20
g21
sS'trials.thisIndex'
p13636
g36
(g38
S'\x00\x00\x00\x00'
tRp13637
sg22
V
sS'trials_2.thisRepN'
p13638
I2
sS'trials_2.thisTrialN'
p13639
I0
sS'trials.thisRepN'
p13640
I57
sS'trials_2.thisTrial'
p13641
NsS'trials.thisN'
p13642
I114
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13643
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13644
I0
sS'trials_2.thisN'
p13645
I2
sa(dp13646
g20
g21
sS'trials.thisIndex'
p13647
g36
(g38
S'\x01\x00\x00\x00'
tRp13648
sg22
V
sS'trials_2.thisRepN'
p13649
I2
sS'trials_2.thisTrialN'
p13650
I0
sS'trials.thisRepN'
p13651
I57
sS'trials_2.thisTrial'
p13652
NsS'trials.thisN'
p13653
I115
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13654
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13655
I1
sS'trials_2.thisN'
p13656
I2
sa(dp13657
g20
g21
sS'trials.thisIndex'
p13658
g36
(g38
S'\x00\x00\x00\x00'
tRp13659
sg22
V
sS'trials_2.thisRepN'
p13660
I2
sS'trials_2.thisTrialN'
p13661
I0
sS'trials.thisRepN'
p13662
I58
sS'trials_2.thisTrial'
p13663
NsS'trials.thisN'
p13664
I116
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13665
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13666
I0
sS'trials_2.thisN'
p13667
I2
sa(dp13668
g20
g21
sS'trials.thisIndex'
p13669
g36
(g38
S'\x01\x00\x00\x00'
tRp13670
sg22
V
sS'trials_2.thisRepN'
p13671
I2
sS'trials_2.thisTrialN'
p13672
I0
sS'trials.thisRepN'
p13673
I58
sS'trials_2.thisTrial'
p13674
NsS'trials.thisN'
p13675
I117
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13676
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13677
I1
sS'trials_2.thisN'
p13678
I2
sa(dp13679
g20
g21
sS'trials.thisIndex'
p13680
g36
(g38
S'\x00\x00\x00\x00'
tRp13681
sg22
V
sS'trials_2.thisRepN'
p13682
I2
sS'trials_2.thisTrialN'
p13683
I0
sS'trials.thisRepN'
p13684
I59
sS'trials_2.thisTrial'
p13685
NsS'trials.thisN'
p13686
I118
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13687
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13688
I0
sS'trials_2.thisN'
p13689
I2
sa(dp13690
g20
g21
sS'trials.thisIndex'
p13691
g36
(g38
S'\x01\x00\x00\x00'
tRp13692
sg22
V
sS'trials_2.thisRepN'
p13693
I2
sS'trials_2.thisTrialN'
p13694
I0
sS'trials.thisRepN'
p13695
I59
sS'trials_2.thisTrial'
p13696
NsS'trials.thisN'
p13697
I119
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13698
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13699
I1
sS'trials_2.thisN'
p13700
I2
sa(dp13701
g20
g21
sS'trials.thisIndex'
p13702
g36
(g38
S'\x00\x00\x00\x00'
tRp13703
sg22
V
sS'trials_2.thisRepN'
p13704
I2
sS'trials_2.thisTrialN'
p13705
I0
sS'trials.thisRepN'
p13706
I60
sS'trials_2.thisTrial'
p13707
NsS'trials.thisN'
p13708
I120
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13709
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13710
I0
sS'trials_2.thisN'
p13711
I2
sa(dp13712
g20
g21
sS'trials.thisIndex'
p13713
g36
(g38
S'\x01\x00\x00\x00'
tRp13714
sg22
V
sS'trials_2.thisRepN'
p13715
I2
sS'trials_2.thisTrialN'
p13716
I0
sS'trials.thisRepN'
p13717
I60
sS'trials_2.thisTrial'
p13718
NsS'trials.thisN'
p13719
I121
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13720
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13721
I1
sS'trials_2.thisN'
p13722
I2
sa(dp13723
g20
g21
sS'trials.thisIndex'
p13724
g36
(g38
S'\x00\x00\x00\x00'
tRp13725
sg22
V
sS'trials_2.thisRepN'
p13726
I2
sS'trials_2.thisTrialN'
p13727
I0
sS'trials.thisRepN'
p13728
I61
sS'trials_2.thisTrial'
p13729
NsS'trials.thisN'
p13730
I122
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13731
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13732
I0
sS'trials_2.thisN'
p13733
I2
sa(dp13734
g20
g21
sS'trials.thisIndex'
p13735
g36
(g38
S'\x01\x00\x00\x00'
tRp13736
sg22
V
sS'trials_2.thisRepN'
p13737
I2
sS'trials_2.thisTrialN'
p13738
I0
sS'trials.thisRepN'
p13739
I61
sS'trials_2.thisTrial'
p13740
NsS'trials.thisN'
p13741
I123
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13742
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13743
I1
sS'trials_2.thisN'
p13744
I2
sa(dp13745
g20
g21
sS'trials.thisIndex'
p13746
g36
(g38
S'\x00\x00\x00\x00'
tRp13747
sg22
V
sS'trials_2.thisRepN'
p13748
I2
sS'trials_2.thisTrialN'
p13749
I0
sS'trials.thisRepN'
p13750
I62
sS'trials_2.thisTrial'
p13751
NsS'trials.thisN'
p13752
I124
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13753
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13754
I0
sS'trials_2.thisN'
p13755
I2
sa(dp13756
g20
g21
sS'trials.thisIndex'
p13757
g36
(g38
S'\x01\x00\x00\x00'
tRp13758
sg22
V
sS'trials_2.thisRepN'
p13759
I2
sS'trials_2.thisTrialN'
p13760
I0
sS'trials.thisRepN'
p13761
I62
sS'trials_2.thisTrial'
p13762
NsS'trials.thisN'
p13763
I125
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13764
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13765
I1
sS'trials_2.thisN'
p13766
I2
sa(dp13767
g20
g21
sS'trials.thisIndex'
p13768
g36
(g38
S'\x00\x00\x00\x00'
tRp13769
sg22
V
sS'trials_2.thisRepN'
p13770
I2
sS'trials_2.thisTrialN'
p13771
I0
sS'trials.thisRepN'
p13772
I63
sS'trials_2.thisTrial'
p13773
NsS'trials.thisN'
p13774
I126
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13775
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13776
I0
sS'trials_2.thisN'
p13777
I2
sa(dp13778
g20
g21
sS'trials.thisIndex'
p13779
g36
(g38
S'\x01\x00\x00\x00'
tRp13780
sg22
V
sS'trials_2.thisRepN'
p13781
I2
sS'trials_2.thisTrialN'
p13782
I0
sS'trials.thisRepN'
p13783
I63
sS'trials_2.thisTrial'
p13784
NsS'trials.thisN'
p13785
I127
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13786
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13787
I1
sS'trials_2.thisN'
p13788
I2
sa(dp13789
g20
g21
sS'trials.thisIndex'
p13790
g36
(g38
S'\x00\x00\x00\x00'
tRp13791
sg22
V
sS'trials_2.thisRepN'
p13792
I2
sS'trials_2.thisTrialN'
p13793
I0
sS'trials.thisRepN'
p13794
I64
sS'trials_2.thisTrial'
p13795
NsS'trials.thisN'
p13796
I128
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13797
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13798
I0
sS'trials_2.thisN'
p13799
I2
sa(dp13800
g20
g21
sS'trials.thisIndex'
p13801
g36
(g38
S'\x01\x00\x00\x00'
tRp13802
sg22
V
sS'trials_2.thisRepN'
p13803
I2
sS'trials_2.thisTrialN'
p13804
I0
sS'trials.thisRepN'
p13805
I64
sS'trials_2.thisTrial'
p13806
NsS'trials.thisN'
p13807
I129
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13808
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13809
I1
sS'trials_2.thisN'
p13810
I2
sa(dp13811
g20
g21
sS'trials.thisIndex'
p13812
g36
(g38
S'\x00\x00\x00\x00'
tRp13813
sg22
V
sS'trials_2.thisRepN'
p13814
I2
sS'trials_2.thisTrialN'
p13815
I0
sS'trials.thisRepN'
p13816
I65
sS'trials_2.thisTrial'
p13817
NsS'trials.thisN'
p13818
I130
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13819
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13820
I0
sS'trials_2.thisN'
p13821
I2
sa(dp13822
g20
g21
sS'trials.thisIndex'
p13823
g36
(g38
S'\x01\x00\x00\x00'
tRp13824
sg22
V
sS'trials_2.thisRepN'
p13825
I2
sS'trials_2.thisTrialN'
p13826
I0
sS'trials.thisRepN'
p13827
I65
sS'trials_2.thisTrial'
p13828
NsS'trials.thisN'
p13829
I131
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13830
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13831
I1
sS'trials_2.thisN'
p13832
I2
sa(dp13833
g20
g21
sS'trials.thisIndex'
p13834
g36
(g38
S'\x00\x00\x00\x00'
tRp13835
sg22
V
sS'trials_2.thisRepN'
p13836
I2
sS'trials_2.thisTrialN'
p13837
I0
sS'trials.thisRepN'
p13838
I66
sS'trials_2.thisTrial'
p13839
NsS'trials.thisN'
p13840
I132
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13841
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13842
I0
sS'trials_2.thisN'
p13843
I2
sa(dp13844
g20
g21
sS'trials.thisIndex'
p13845
g36
(g38
S'\x01\x00\x00\x00'
tRp13846
sg22
V
sS'trials_2.thisRepN'
p13847
I2
sS'trials_2.thisTrialN'
p13848
I0
sS'trials.thisRepN'
p13849
I66
sS'trials_2.thisTrial'
p13850
NsS'trials.thisN'
p13851
I133
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13852
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13853
I1
sS'trials_2.thisN'
p13854
I2
sa(dp13855
g20
g21
sS'trials.thisIndex'
p13856
g36
(g38
S'\x00\x00\x00\x00'
tRp13857
sg22
V
sS'trials_2.thisRepN'
p13858
I2
sS'trials_2.thisTrialN'
p13859
I0
sS'trials.thisRepN'
p13860
I67
sS'trials_2.thisTrial'
p13861
NsS'trials.thisN'
p13862
I134
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13863
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13864
I0
sS'trials_2.thisN'
p13865
I2
sa(dp13866
g20
g21
sS'trials.thisIndex'
p13867
g36
(g38
S'\x01\x00\x00\x00'
tRp13868
sg22
V
sS'trials_2.thisRepN'
p13869
I2
sS'trials_2.thisTrialN'
p13870
I0
sS'trials.thisRepN'
p13871
I67
sS'trials_2.thisTrial'
p13872
NsS'trials.thisN'
p13873
I135
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13874
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13875
I1
sS'trials_2.thisN'
p13876
I2
sa(dp13877
g20
g21
sS'trials.thisIndex'
p13878
g36
(g38
S'\x00\x00\x00\x00'
tRp13879
sg22
V
sS'trials_2.thisRepN'
p13880
I2
sS'trials_2.thisTrialN'
p13881
I0
sS'trials.thisRepN'
p13882
I68
sS'trials_2.thisTrial'
p13883
NsS'trials.thisN'
p13884
I136
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13885
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13886
I0
sS'trials_2.thisN'
p13887
I2
sa(dp13888
g20
g21
sS'trials.thisIndex'
p13889
g36
(g38
S'\x01\x00\x00\x00'
tRp13890
sg22
V
sS'trials_2.thisRepN'
p13891
I2
sS'trials_2.thisTrialN'
p13892
I0
sS'trials.thisRepN'
p13893
I68
sS'trials_2.thisTrial'
p13894
NsS'trials.thisN'
p13895
I137
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13896
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13897
I1
sS'trials_2.thisN'
p13898
I2
sa(dp13899
g20
g21
sS'trials.thisIndex'
p13900
g36
(g38
S'\x00\x00\x00\x00'
tRp13901
sg22
V
sS'trials_2.thisRepN'
p13902
I2
sS'trials_2.thisTrialN'
p13903
I0
sS'trials.thisRepN'
p13904
I69
sS'trials_2.thisTrial'
p13905
NsS'trials.thisN'
p13906
I138
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13907
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13908
I0
sS'trials_2.thisN'
p13909
I2
sa(dp13910
g20
g21
sS'trials.thisIndex'
p13911
g36
(g38
S'\x01\x00\x00\x00'
tRp13912
sg22
V
sS'trials_2.thisRepN'
p13913
I2
sS'trials_2.thisTrialN'
p13914
I0
sS'trials.thisRepN'
p13915
I69
sS'trials_2.thisTrial'
p13916
NsS'trials.thisN'
p13917
I139
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13918
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13919
I1
sS'trials_2.thisN'
p13920
I2
sa(dp13921
g20
g21
sS'trials.thisIndex'
p13922
g36
(g38
S'\x00\x00\x00\x00'
tRp13923
sg22
V
sS'trials_2.thisRepN'
p13924
I2
sS'trials_2.thisTrialN'
p13925
I0
sS'trials.thisRepN'
p13926
I70
sS'trials_2.thisTrial'
p13927
NsS'trials.thisN'
p13928
I140
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13929
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13930
I0
sS'trials_2.thisN'
p13931
I2
sa(dp13932
g20
g21
sS'trials.thisIndex'
p13933
g36
(g38
S'\x01\x00\x00\x00'
tRp13934
sg22
V
sS'trials_2.thisRepN'
p13935
I2
sS'trials_2.thisTrialN'
p13936
I0
sS'trials.thisRepN'
p13937
I70
sS'trials_2.thisTrial'
p13938
NsS'trials.thisN'
p13939
I141
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13940
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13941
I1
sS'trials_2.thisN'
p13942
I2
sa(dp13943
g20
g21
sS'trials.thisIndex'
p13944
g36
(g38
S'\x00\x00\x00\x00'
tRp13945
sg22
V
sS'trials_2.thisRepN'
p13946
I2
sS'trials_2.thisTrialN'
p13947
I0
sS'trials.thisRepN'
p13948
I71
sS'trials_2.thisTrial'
p13949
NsS'trials.thisN'
p13950
I142
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13951
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13952
I0
sS'trials_2.thisN'
p13953
I2
sa(dp13954
g20
g21
sS'trials.thisIndex'
p13955
g36
(g38
S'\x01\x00\x00\x00'
tRp13956
sg22
V
sS'trials_2.thisRepN'
p13957
I2
sS'trials_2.thisTrialN'
p13958
I0
sS'trials.thisRepN'
p13959
I71
sS'trials_2.thisTrial'
p13960
NsS'trials.thisN'
p13961
I143
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13962
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13963
I1
sS'trials_2.thisN'
p13964
I2
sa(dp13965
g20
g21
sS'trials.thisIndex'
p13966
g36
(g38
S'\x00\x00\x00\x00'
tRp13967
sg22
V
sS'trials_2.thisRepN'
p13968
I2
sS'trials_2.thisTrialN'
p13969
I0
sS'trials.thisRepN'
p13970
I72
sS'trials_2.thisTrial'
p13971
NsS'trials.thisN'
p13972
I144
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13973
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13974
I0
sS'trials_2.thisN'
p13975
I2
sa(dp13976
g20
g21
sS'trials.thisIndex'
p13977
g36
(g38
S'\x01\x00\x00\x00'
tRp13978
sg22
V
sS'trials_2.thisRepN'
p13979
I2
sS'trials_2.thisTrialN'
p13980
I0
sS'trials.thisRepN'
p13981
I72
sS'trials_2.thisTrial'
p13982
NsS'trials.thisN'
p13983
I145
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13984
g12386
sg12387
g12400
sS'trials.thisTrialN'
p13985
I1
sS'trials_2.thisN'
p13986
I2
sa(dp13987
g20
g21
sS'trials.thisIndex'
p13988
g36
(g38
S'\x00\x00\x00\x00'
tRp13989
sg22
V
sS'trials_2.thisRepN'
p13990
I2
sS'trials_2.thisTrialN'
p13991
I0
sS'trials.thisRepN'
p13992
I73
sS'trials_2.thisTrial'
p13993
NsS'trials.thisN'
p13994
I146
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p13995
g12386
sg12387
g12388
sS'trials.thisTrialN'
p13996
I0
sS'trials_2.thisN'
p13997
I2
sa(dp13998
g20
g21
sS'trials.thisIndex'
p13999
g36
(g38
S'\x01\x00\x00\x00'
tRp14000
sg22
V
sS'trials_2.thisRepN'
p14001
I2
sS'trials_2.thisTrialN'
p14002
I0
sS'trials.thisRepN'
p14003
I73
sS'trials_2.thisTrial'
p14004
NsS'trials.thisN'
p14005
I147
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14006
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14007
I1
sS'trials_2.thisN'
p14008
I2
sa(dp14009
g20
g21
sS'trials.thisIndex'
p14010
g36
(g38
S'\x00\x00\x00\x00'
tRp14011
sg22
V
sS'trials_2.thisRepN'
p14012
I2
sS'trials_2.thisTrialN'
p14013
I0
sS'trials.thisRepN'
p14014
I74
sS'trials_2.thisTrial'
p14015
NsS'trials.thisN'
p14016
I148
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14017
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14018
I0
sS'trials_2.thisN'
p14019
I2
sa(dp14020
g20
g21
sS'trials.thisIndex'
p14021
g36
(g38
S'\x01\x00\x00\x00'
tRp14022
sg22
V
sS'trials_2.thisRepN'
p14023
I2
sS'trials_2.thisTrialN'
p14024
I0
sS'trials.thisRepN'
p14025
I74
sS'trials_2.thisTrial'
p14026
NsS'trials.thisN'
p14027
I149
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14028
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14029
I1
sS'trials_2.thisN'
p14030
I2
sa(dp14031
g20
g21
sS'trials.thisIndex'
p14032
g36
(g38
S'\x00\x00\x00\x00'
tRp14033
sg22
V
sS'trials_2.thisRepN'
p14034
I2
sS'trials_2.thisTrialN'
p14035
I0
sS'trials.thisRepN'
p14036
I75
sS'trials_2.thisTrial'
p14037
NsS'trials.thisN'
p14038
I150
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14039
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14040
I0
sS'trials_2.thisN'
p14041
I2
sa(dp14042
g20
g21
sS'trials.thisIndex'
p14043
g36
(g38
S'\x01\x00\x00\x00'
tRp14044
sg22
V
sS'trials_2.thisRepN'
p14045
I2
sS'trials_2.thisTrialN'
p14046
I0
sS'trials.thisRepN'
p14047
I75
sS'trials_2.thisTrial'
p14048
NsS'trials.thisN'
p14049
I151
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14050
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14051
I1
sS'trials_2.thisN'
p14052
I2
sa(dp14053
g20
g21
sS'trials.thisIndex'
p14054
g36
(g38
S'\x00\x00\x00\x00'
tRp14055
sg22
V
sS'trials_2.thisRepN'
p14056
I2
sS'trials_2.thisTrialN'
p14057
I0
sS'trials.thisRepN'
p14058
I76
sS'trials_2.thisTrial'
p14059
NsS'trials.thisN'
p14060
I152
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14061
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14062
I0
sS'trials_2.thisN'
p14063
I2
sa(dp14064
g20
g21
sS'trials.thisIndex'
p14065
g36
(g38
S'\x01\x00\x00\x00'
tRp14066
sg22
V
sS'trials_2.thisRepN'
p14067
I2
sS'trials_2.thisTrialN'
p14068
I0
sS'trials.thisRepN'
p14069
I76
sS'trials_2.thisTrial'
p14070
NsS'trials.thisN'
p14071
I153
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14072
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14073
I1
sS'trials_2.thisN'
p14074
I2
sa(dp14075
g20
g21
sS'trials.thisIndex'
p14076
g36
(g38
S'\x00\x00\x00\x00'
tRp14077
sg22
V
sS'trials_2.thisRepN'
p14078
I2
sS'trials_2.thisTrialN'
p14079
I0
sS'trials.thisRepN'
p14080
I77
sS'trials_2.thisTrial'
p14081
NsS'trials.thisN'
p14082
I154
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14083
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14084
I0
sS'trials_2.thisN'
p14085
I2
sa(dp14086
g20
g21
sS'trials.thisIndex'
p14087
g36
(g38
S'\x01\x00\x00\x00'
tRp14088
sg22
V
sS'trials_2.thisRepN'
p14089
I2
sS'trials_2.thisTrialN'
p14090
I0
sS'trials.thisRepN'
p14091
I77
sS'trials_2.thisTrial'
p14092
NsS'trials.thisN'
p14093
I155
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14094
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14095
I1
sS'trials_2.thisN'
p14096
I2
sa(dp14097
g20
g21
sS'trials.thisIndex'
p14098
g36
(g38
S'\x00\x00\x00\x00'
tRp14099
sg22
V
sS'trials_2.thisRepN'
p14100
I2
sS'trials_2.thisTrialN'
p14101
I0
sS'trials.thisRepN'
p14102
I78
sS'trials_2.thisTrial'
p14103
NsS'trials.thisN'
p14104
I156
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14105
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14106
I0
sS'trials_2.thisN'
p14107
I2
sa(dp14108
g20
g21
sS'trials.thisIndex'
p14109
g36
(g38
S'\x01\x00\x00\x00'
tRp14110
sg22
V
sS'trials_2.thisRepN'
p14111
I2
sS'trials_2.thisTrialN'
p14112
I0
sS'trials.thisRepN'
p14113
I78
sS'trials_2.thisTrial'
p14114
NsS'trials.thisN'
p14115
I157
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14116
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14117
I1
sS'trials_2.thisN'
p14118
I2
sa(dp14119
g20
g21
sS'trials.thisIndex'
p14120
g36
(g38
S'\x00\x00\x00\x00'
tRp14121
sg22
V
sS'trials_2.thisRepN'
p14122
I2
sS'trials_2.thisTrialN'
p14123
I0
sS'trials.thisRepN'
p14124
I79
sS'trials_2.thisTrial'
p14125
NsS'trials.thisN'
p14126
I158
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14127
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14128
I0
sS'trials_2.thisN'
p14129
I2
sa(dp14130
g20
g21
sS'trials.thisIndex'
p14131
g36
(g38
S'\x01\x00\x00\x00'
tRp14132
sg22
V
sS'trials_2.thisRepN'
p14133
I2
sS'trials_2.thisTrialN'
p14134
I0
sS'trials.thisRepN'
p14135
I79
sS'trials_2.thisTrial'
p14136
NsS'trials.thisN'
p14137
I159
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14138
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14139
I1
sS'trials_2.thisN'
p14140
I2
sa(dp14141
g20
g21
sS'trials.thisIndex'
p14142
g36
(g38
S'\x00\x00\x00\x00'
tRp14143
sg22
V
sS'trials_2.thisRepN'
p14144
I2
sS'trials_2.thisTrialN'
p14145
I0
sS'trials.thisRepN'
p14146
I80
sS'trials_2.thisTrial'
p14147
NsS'trials.thisN'
p14148
I160
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14149
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14150
I0
sS'trials_2.thisN'
p14151
I2
sa(dp14152
g20
g21
sS'trials.thisIndex'
p14153
g36
(g38
S'\x01\x00\x00\x00'
tRp14154
sg22
V
sS'trials_2.thisRepN'
p14155
I2
sS'trials_2.thisTrialN'
p14156
I0
sS'trials.thisRepN'
p14157
I80
sS'trials_2.thisTrial'
p14158
NsS'trials.thisN'
p14159
I161
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14160
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14161
I1
sS'trials_2.thisN'
p14162
I2
sa(dp14163
g20
g21
sS'trials.thisIndex'
p14164
g36
(g38
S'\x00\x00\x00\x00'
tRp14165
sg22
V
sS'trials_2.thisRepN'
p14166
I2
sS'trials_2.thisTrialN'
p14167
I0
sS'trials.thisRepN'
p14168
I81
sS'trials_2.thisTrial'
p14169
NsS'trials.thisN'
p14170
I162
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14171
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14172
I0
sS'trials_2.thisN'
p14173
I2
sa(dp14174
g20
g21
sS'trials.thisIndex'
p14175
g36
(g38
S'\x01\x00\x00\x00'
tRp14176
sg22
V
sS'trials_2.thisRepN'
p14177
I2
sS'trials_2.thisTrialN'
p14178
I0
sS'trials.thisRepN'
p14179
I81
sS'trials_2.thisTrial'
p14180
NsS'trials.thisN'
p14181
I163
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14182
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14183
I1
sS'trials_2.thisN'
p14184
I2
sa(dp14185
g20
g21
sS'trials.thisIndex'
p14186
g36
(g38
S'\x00\x00\x00\x00'
tRp14187
sg22
V
sS'trials_2.thisRepN'
p14188
I2
sS'trials_2.thisTrialN'
p14189
I0
sS'trials.thisRepN'
p14190
I82
sS'trials_2.thisTrial'
p14191
NsS'trials.thisN'
p14192
I164
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14193
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14194
I0
sS'trials_2.thisN'
p14195
I2
sa(dp14196
g20
g21
sS'trials.thisIndex'
p14197
g36
(g38
S'\x01\x00\x00\x00'
tRp14198
sg22
V
sS'trials_2.thisRepN'
p14199
I2
sS'trials_2.thisTrialN'
p14200
I0
sS'trials.thisRepN'
p14201
I82
sS'trials_2.thisTrial'
p14202
NsS'trials.thisN'
p14203
I165
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14204
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14205
I1
sS'trials_2.thisN'
p14206
I2
sa(dp14207
g20
g21
sS'trials.thisIndex'
p14208
g36
(g38
S'\x00\x00\x00\x00'
tRp14209
sg22
V
sS'trials_2.thisRepN'
p14210
I2
sS'trials_2.thisTrialN'
p14211
I0
sS'trials.thisRepN'
p14212
I83
sS'trials_2.thisTrial'
p14213
NsS'trials.thisN'
p14214
I166
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14215
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14216
I0
sS'trials_2.thisN'
p14217
I2
sa(dp14218
g20
g21
sS'trials.thisIndex'
p14219
g36
(g38
S'\x01\x00\x00\x00'
tRp14220
sg22
V
sS'trials_2.thisRepN'
p14221
I2
sS'trials_2.thisTrialN'
p14222
I0
sS'trials.thisRepN'
p14223
I83
sS'trials_2.thisTrial'
p14224
NsS'trials.thisN'
p14225
I167
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14226
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14227
I1
sS'trials_2.thisN'
p14228
I2
sa(dp14229
g20
g21
sS'trials.thisIndex'
p14230
g36
(g38
S'\x00\x00\x00\x00'
tRp14231
sg22
V
sS'trials_2.thisRepN'
p14232
I2
sS'trials_2.thisTrialN'
p14233
I0
sS'trials.thisRepN'
p14234
I84
sS'trials_2.thisTrial'
p14235
NsS'trials.thisN'
p14236
I168
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14237
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14238
I0
sS'trials_2.thisN'
p14239
I2
sa(dp14240
g20
g21
sS'trials.thisIndex'
p14241
g36
(g38
S'\x01\x00\x00\x00'
tRp14242
sg22
V
sS'trials_2.thisRepN'
p14243
I2
sS'trials_2.thisTrialN'
p14244
I0
sS'trials.thisRepN'
p14245
I84
sS'trials_2.thisTrial'
p14246
NsS'trials.thisN'
p14247
I169
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14248
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14249
I1
sS'trials_2.thisN'
p14250
I2
sa(dp14251
g20
g21
sS'trials.thisIndex'
p14252
g36
(g38
S'\x00\x00\x00\x00'
tRp14253
sg22
V
sS'trials_2.thisRepN'
p14254
I2
sS'trials_2.thisTrialN'
p14255
I0
sS'trials.thisRepN'
p14256
I85
sS'trials_2.thisTrial'
p14257
NsS'trials.thisN'
p14258
I170
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14259
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14260
I0
sS'trials_2.thisN'
p14261
I2
sa(dp14262
g20
g21
sS'trials.thisIndex'
p14263
g36
(g38
S'\x01\x00\x00\x00'
tRp14264
sg22
V
sS'trials_2.thisRepN'
p14265
I2
sS'trials_2.thisTrialN'
p14266
I0
sS'trials.thisRepN'
p14267
I85
sS'trials_2.thisTrial'
p14268
NsS'trials.thisN'
p14269
I171
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14270
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14271
I1
sS'trials_2.thisN'
p14272
I2
sa(dp14273
g20
g21
sS'trials.thisIndex'
p14274
g36
(g38
S'\x00\x00\x00\x00'
tRp14275
sg22
V
sS'trials_2.thisRepN'
p14276
I2
sS'trials_2.thisTrialN'
p14277
I0
sS'trials.thisRepN'
p14278
I86
sS'trials_2.thisTrial'
p14279
NsS'trials.thisN'
p14280
I172
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14281
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14282
I0
sS'trials_2.thisN'
p14283
I2
sa(dp14284
g20
g21
sS'trials.thisIndex'
p14285
g36
(g38
S'\x01\x00\x00\x00'
tRp14286
sg22
V
sS'trials_2.thisRepN'
p14287
I2
sS'trials_2.thisTrialN'
p14288
I0
sS'trials.thisRepN'
p14289
I86
sS'trials_2.thisTrial'
p14290
NsS'trials.thisN'
p14291
I173
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14292
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14293
I1
sS'trials_2.thisN'
p14294
I2
sa(dp14295
g20
g21
sS'trials.thisIndex'
p14296
g36
(g38
S'\x00\x00\x00\x00'
tRp14297
sg22
V
sS'trials_2.thisRepN'
p14298
I2
sS'trials_2.thisTrialN'
p14299
I0
sS'trials.thisRepN'
p14300
I87
sS'trials_2.thisTrial'
p14301
NsS'trials.thisN'
p14302
I174
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14303
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14304
I0
sS'trials_2.thisN'
p14305
I2
sa(dp14306
g20
g21
sS'trials.thisIndex'
p14307
g36
(g38
S'\x01\x00\x00\x00'
tRp14308
sg22
V
sS'trials_2.thisRepN'
p14309
I2
sS'trials_2.thisTrialN'
p14310
I0
sS'trials.thisRepN'
p14311
I87
sS'trials_2.thisTrial'
p14312
NsS'trials.thisN'
p14313
I175
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14314
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14315
I1
sS'trials_2.thisN'
p14316
I2
sa(dp14317
g20
g21
sS'trials.thisIndex'
p14318
g36
(g38
S'\x00\x00\x00\x00'
tRp14319
sg22
V
sS'trials_2.thisRepN'
p14320
I2
sS'trials_2.thisTrialN'
p14321
I0
sS'trials.thisRepN'
p14322
I88
sS'trials_2.thisTrial'
p14323
NsS'trials.thisN'
p14324
I176
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14325
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14326
I0
sS'trials_2.thisN'
p14327
I2
sa(dp14328
g20
g21
sS'trials.thisIndex'
p14329
g36
(g38
S'\x01\x00\x00\x00'
tRp14330
sg22
V
sS'trials_2.thisRepN'
p14331
I2
sS'trials_2.thisTrialN'
p14332
I0
sS'trials.thisRepN'
p14333
I88
sS'trials_2.thisTrial'
p14334
NsS'trials.thisN'
p14335
I177
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14336
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14337
I1
sS'trials_2.thisN'
p14338
I2
sa(dp14339
g20
g21
sS'trials.thisIndex'
p14340
g36
(g38
S'\x00\x00\x00\x00'
tRp14341
sg22
V
sS'trials_2.thisRepN'
p14342
I2
sS'trials_2.thisTrialN'
p14343
I0
sS'trials.thisRepN'
p14344
I89
sS'trials_2.thisTrial'
p14345
NsS'trials.thisN'
p14346
I178
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14347
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14348
I0
sS'trials_2.thisN'
p14349
I2
sa(dp14350
g20
g21
sS'trials.thisIndex'
p14351
g36
(g38
S'\x01\x00\x00\x00'
tRp14352
sg22
V
sS'trials_2.thisRepN'
p14353
I2
sS'trials_2.thisTrialN'
p14354
I0
sS'trials.thisRepN'
p14355
I89
sS'trials_2.thisTrial'
p14356
NsS'trials.thisN'
p14357
I179
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14358
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14359
I1
sS'trials_2.thisN'
p14360
I2
sa(dp14361
g20
g21
sS'trials.thisIndex'
p14362
g36
(g38
S'\x00\x00\x00\x00'
tRp14363
sg22
V
sS'trials_2.thisRepN'
p14364
I2
sS'trials_2.thisTrialN'
p14365
I0
sS'trials.thisRepN'
p14366
I90
sS'trials_2.thisTrial'
p14367
NsS'trials.thisN'
p14368
I180
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14369
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14370
I0
sS'trials_2.thisN'
p14371
I2
sa(dp14372
g20
g21
sS'trials.thisIndex'
p14373
g36
(g38
S'\x01\x00\x00\x00'
tRp14374
sg22
V
sS'trials_2.thisRepN'
p14375
I2
sS'trials_2.thisTrialN'
p14376
I0
sS'trials.thisRepN'
p14377
I90
sS'trials_2.thisTrial'
p14378
NsS'trials.thisN'
p14379
I181
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14380
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14381
I1
sS'trials_2.thisN'
p14382
I2
sa(dp14383
g20
g21
sS'trials.thisIndex'
p14384
g36
(g38
S'\x00\x00\x00\x00'
tRp14385
sg22
V
sS'trials_2.thisRepN'
p14386
I2
sS'trials_2.thisTrialN'
p14387
I0
sS'trials.thisRepN'
p14388
I91
sS'trials_2.thisTrial'
p14389
NsS'trials.thisN'
p14390
I182
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14391
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14392
I0
sS'trials_2.thisN'
p14393
I2
sa(dp14394
g20
g21
sS'trials.thisIndex'
p14395
g36
(g38
S'\x01\x00\x00\x00'
tRp14396
sg22
V
sS'trials_2.thisRepN'
p14397
I2
sS'trials_2.thisTrialN'
p14398
I0
sS'trials.thisRepN'
p14399
I91
sS'trials_2.thisTrial'
p14400
NsS'trials.thisN'
p14401
I183
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14402
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14403
I1
sS'trials_2.thisN'
p14404
I2
sa(dp14405
g20
g21
sS'trials.thisIndex'
p14406
g36
(g38
S'\x00\x00\x00\x00'
tRp14407
sg22
V
sS'trials_2.thisRepN'
p14408
I2
sS'trials_2.thisTrialN'
p14409
I0
sS'trials.thisRepN'
p14410
I92
sS'trials_2.thisTrial'
p14411
NsS'trials.thisN'
p14412
I184
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14413
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14414
I0
sS'trials_2.thisN'
p14415
I2
sa(dp14416
g20
g21
sS'trials.thisIndex'
p14417
g36
(g38
S'\x01\x00\x00\x00'
tRp14418
sg22
V
sS'trials_2.thisRepN'
p14419
I2
sS'trials_2.thisTrialN'
p14420
I0
sS'trials.thisRepN'
p14421
I92
sS'trials_2.thisTrial'
p14422
NsS'trials.thisN'
p14423
I185
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14424
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14425
I1
sS'trials_2.thisN'
p14426
I2
sa(dp14427
g20
g21
sS'trials.thisIndex'
p14428
g36
(g38
S'\x00\x00\x00\x00'
tRp14429
sg22
V
sS'trials_2.thisRepN'
p14430
I2
sS'trials_2.thisTrialN'
p14431
I0
sS'trials.thisRepN'
p14432
I93
sS'trials_2.thisTrial'
p14433
NsS'trials.thisN'
p14434
I186
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14435
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14436
I0
sS'trials_2.thisN'
p14437
I2
sa(dp14438
g20
g21
sS'trials.thisIndex'
p14439
g36
(g38
S'\x01\x00\x00\x00'
tRp14440
sg22
V
sS'trials_2.thisRepN'
p14441
I2
sS'trials_2.thisTrialN'
p14442
I0
sS'trials.thisRepN'
p14443
I93
sS'trials_2.thisTrial'
p14444
NsS'trials.thisN'
p14445
I187
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14446
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14447
I1
sS'trials_2.thisN'
p14448
I2
sa(dp14449
g20
g21
sS'trials.thisIndex'
p14450
g36
(g38
S'\x00\x00\x00\x00'
tRp14451
sg22
V
sS'trials_2.thisRepN'
p14452
I2
sS'trials_2.thisTrialN'
p14453
I0
sS'trials.thisRepN'
p14454
I94
sS'trials_2.thisTrial'
p14455
NsS'trials.thisN'
p14456
I188
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14457
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14458
I0
sS'trials_2.thisN'
p14459
I2
sa(dp14460
g20
g21
sS'trials.thisIndex'
p14461
g36
(g38
S'\x01\x00\x00\x00'
tRp14462
sg22
V
sS'trials_2.thisRepN'
p14463
I2
sS'trials_2.thisTrialN'
p14464
I0
sS'trials.thisRepN'
p14465
I94
sS'trials_2.thisTrial'
p14466
NsS'trials.thisN'
p14467
I189
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14468
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14469
I1
sS'trials_2.thisN'
p14470
I2
sa(dp14471
g20
g21
sS'trials.thisIndex'
p14472
g36
(g38
S'\x00\x00\x00\x00'
tRp14473
sg22
V
sS'trials_2.thisRepN'
p14474
I2
sS'trials_2.thisTrialN'
p14475
I0
sS'trials.thisRepN'
p14476
I95
sS'trials_2.thisTrial'
p14477
NsS'trials.thisN'
p14478
I190
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14479
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14480
I0
sS'trials_2.thisN'
p14481
I2
sa(dp14482
g20
g21
sS'trials.thisIndex'
p14483
g36
(g38
S'\x01\x00\x00\x00'
tRp14484
sg22
V
sS'trials_2.thisRepN'
p14485
I2
sS'trials_2.thisTrialN'
p14486
I0
sS'trials.thisRepN'
p14487
I95
sS'trials_2.thisTrial'
p14488
NsS'trials.thisN'
p14489
I191
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14490
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14491
I1
sS'trials_2.thisN'
p14492
I2
sa(dp14493
g20
g21
sS'trials.thisIndex'
p14494
g36
(g38
S'\x00\x00\x00\x00'
tRp14495
sg22
V
sS'trials_2.thisRepN'
p14496
I2
sS'trials_2.thisTrialN'
p14497
I0
sS'trials.thisRepN'
p14498
I96
sS'trials_2.thisTrial'
p14499
NsS'trials.thisN'
p14500
I192
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14501
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14502
I0
sS'trials_2.thisN'
p14503
I2
sa(dp14504
g20
g21
sS'trials.thisIndex'
p14505
g36
(g38
S'\x01\x00\x00\x00'
tRp14506
sg22
V
sS'trials_2.thisRepN'
p14507
I2
sS'trials_2.thisTrialN'
p14508
I0
sS'trials.thisRepN'
p14509
I96
sS'trials_2.thisTrial'
p14510
NsS'trials.thisN'
p14511
I193
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14512
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14513
I1
sS'trials_2.thisN'
p14514
I2
sa(dp14515
g20
g21
sS'trials.thisIndex'
p14516
g36
(g38
S'\x00\x00\x00\x00'
tRp14517
sg22
V
sS'trials_2.thisRepN'
p14518
I2
sS'trials_2.thisTrialN'
p14519
I0
sS'trials.thisRepN'
p14520
I97
sS'trials_2.thisTrial'
p14521
NsS'trials.thisN'
p14522
I194
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14523
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14524
I0
sS'trials_2.thisN'
p14525
I2
sa(dp14526
g20
g21
sS'trials.thisIndex'
p14527
g36
(g38
S'\x01\x00\x00\x00'
tRp14528
sg22
V
sS'trials_2.thisRepN'
p14529
I2
sS'trials_2.thisTrialN'
p14530
I0
sS'trials.thisRepN'
p14531
I97
sS'trials_2.thisTrial'
p14532
NsS'trials.thisN'
p14533
I195
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14534
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14535
I1
sS'trials_2.thisN'
p14536
I2
sa(dp14537
g20
g21
sS'trials.thisIndex'
p14538
g36
(g38
S'\x00\x00\x00\x00'
tRp14539
sg22
V
sS'trials_2.thisRepN'
p14540
I2
sS'trials_2.thisTrialN'
p14541
I0
sS'trials.thisRepN'
p14542
I98
sS'trials_2.thisTrial'
p14543
NsS'trials.thisN'
p14544
I196
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14545
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14546
I0
sS'trials_2.thisN'
p14547
I2
sa(dp14548
g20
g21
sS'trials.thisIndex'
p14549
g36
(g38
S'\x01\x00\x00\x00'
tRp14550
sg22
V
sS'trials_2.thisRepN'
p14551
I2
sS'trials_2.thisTrialN'
p14552
I0
sS'trials.thisRepN'
p14553
I98
sS'trials_2.thisTrial'
p14554
NsS'trials.thisN'
p14555
I197
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14556
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14557
I1
sS'trials_2.thisN'
p14558
I2
sa(dp14559
g20
g21
sS'trials.thisIndex'
p14560
g36
(g38
S'\x00\x00\x00\x00'
tRp14561
sg22
V
sS'trials_2.thisRepN'
p14562
I2
sS'trials_2.thisTrialN'
p14563
I0
sS'trials.thisRepN'
p14564
I99
sS'trials_2.thisTrial'
p14565
NsS'trials.thisN'
p14566
I198
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14567
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14568
I0
sS'trials_2.thisN'
p14569
I2
sa(dp14570
g20
g21
sS'trials.thisIndex'
p14571
g36
(g38
S'\x01\x00\x00\x00'
tRp14572
sg22
V
sS'trials_2.thisRepN'
p14573
I2
sS'trials_2.thisTrialN'
p14574
I0
sS'trials.thisRepN'
p14575
I99
sS'trials_2.thisTrial'
p14576
NsS'trials.thisN'
p14577
I199
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14578
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14579
I1
sS'trials_2.thisN'
p14580
I2
sa(dp14581
g20
g21
sS'trials.thisIndex'
p14582
g36
(g38
S'\x00\x00\x00\x00'
tRp14583
sg22
V
sS'trials_2.thisRepN'
p14584
I2
sS'trials_2.thisTrialN'
p14585
I0
sS'trials.thisRepN'
p14586
I100
sS'trials_2.thisTrial'
p14587
NsS'trials.thisN'
p14588
I200
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14589
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14590
I0
sS'trials_2.thisN'
p14591
I2
sa(dp14592
g20
g21
sS'trials.thisIndex'
p14593
g36
(g38
S'\x01\x00\x00\x00'
tRp14594
sg22
V
sS'trials_2.thisRepN'
p14595
I2
sS'trials_2.thisTrialN'
p14596
I0
sS'trials.thisRepN'
p14597
I100
sS'trials_2.thisTrial'
p14598
NsS'trials.thisN'
p14599
I201
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14600
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14601
I1
sS'trials_2.thisN'
p14602
I2
sa(dp14603
g20
g21
sS'trials.thisIndex'
p14604
g36
(g38
S'\x00\x00\x00\x00'
tRp14605
sg22
V
sS'trials_2.thisRepN'
p14606
I2
sS'trials_2.thisTrialN'
p14607
I0
sS'trials.thisRepN'
p14608
I101
sS'trials_2.thisTrial'
p14609
NsS'trials.thisN'
p14610
I202
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14611
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14612
I0
sS'trials_2.thisN'
p14613
I2
sa(dp14614
g20
g21
sS'trials.thisIndex'
p14615
g36
(g38
S'\x01\x00\x00\x00'
tRp14616
sg22
V
sS'trials_2.thisRepN'
p14617
I2
sS'trials_2.thisTrialN'
p14618
I0
sS'trials.thisRepN'
p14619
I101
sS'trials_2.thisTrial'
p14620
NsS'trials.thisN'
p14621
I203
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14622
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14623
I1
sS'trials_2.thisN'
p14624
I2
sa(dp14625
g20
g21
sS'trials.thisIndex'
p14626
g36
(g38
S'\x00\x00\x00\x00'
tRp14627
sg22
V
sS'trials_2.thisRepN'
p14628
I2
sS'trials_2.thisTrialN'
p14629
I0
sS'trials.thisRepN'
p14630
I102
sS'trials_2.thisTrial'
p14631
NsS'trials.thisN'
p14632
I204
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14633
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14634
I0
sS'trials_2.thisN'
p14635
I2
sa(dp14636
g20
g21
sS'trials.thisIndex'
p14637
g36
(g38
S'\x01\x00\x00\x00'
tRp14638
sg22
V
sS'trials_2.thisRepN'
p14639
I2
sS'trials_2.thisTrialN'
p14640
I0
sS'trials.thisRepN'
p14641
I102
sS'trials_2.thisTrial'
p14642
NsS'trials.thisN'
p14643
I205
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14644
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14645
I1
sS'trials_2.thisN'
p14646
I2
sa(dp14647
g20
g21
sS'trials.thisIndex'
p14648
g36
(g38
S'\x00\x00\x00\x00'
tRp14649
sg22
V
sS'trials_2.thisRepN'
p14650
I2
sS'trials_2.thisTrialN'
p14651
I0
sS'trials.thisRepN'
p14652
I103
sS'trials_2.thisTrial'
p14653
NsS'trials.thisN'
p14654
I206
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14655
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14656
I0
sS'trials_2.thisN'
p14657
I2
sa(dp14658
g20
g21
sS'trials.thisIndex'
p14659
g36
(g38
S'\x01\x00\x00\x00'
tRp14660
sg22
V
sS'trials_2.thisRepN'
p14661
I2
sS'trials_2.thisTrialN'
p14662
I0
sS'trials.thisRepN'
p14663
I103
sS'trials_2.thisTrial'
p14664
NsS'trials.thisN'
p14665
I207
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14666
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14667
I1
sS'trials_2.thisN'
p14668
I2
sa(dp14669
g20
g21
sS'trials.thisIndex'
p14670
g36
(g38
S'\x00\x00\x00\x00'
tRp14671
sg22
V
sS'trials_2.thisRepN'
p14672
I2
sS'trials_2.thisTrialN'
p14673
I0
sS'trials.thisRepN'
p14674
I104
sS'trials_2.thisTrial'
p14675
NsS'trials.thisN'
p14676
I208
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14677
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14678
I0
sS'trials_2.thisN'
p14679
I2
sa(dp14680
g20
g21
sS'trials.thisIndex'
p14681
g36
(g38
S'\x01\x00\x00\x00'
tRp14682
sg22
V
sS'trials_2.thisRepN'
p14683
I2
sS'trials_2.thisTrialN'
p14684
I0
sS'trials.thisRepN'
p14685
I104
sS'trials_2.thisTrial'
p14686
NsS'trials.thisN'
p14687
I209
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14688
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14689
I1
sS'trials_2.thisN'
p14690
I2
sa(dp14691
g20
g21
sS'trials.thisIndex'
p14692
g36
(g38
S'\x00\x00\x00\x00'
tRp14693
sg22
V
sS'trials_2.thisRepN'
p14694
I2
sS'trials_2.thisTrialN'
p14695
I0
sS'trials.thisRepN'
p14696
I105
sS'trials_2.thisTrial'
p14697
NsS'trials.thisN'
p14698
I210
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14699
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14700
I0
sS'trials_2.thisN'
p14701
I2
sa(dp14702
g20
g21
sS'trials.thisIndex'
p14703
g36
(g38
S'\x01\x00\x00\x00'
tRp14704
sg22
V
sS'trials_2.thisRepN'
p14705
I2
sS'trials_2.thisTrialN'
p14706
I0
sS'trials.thisRepN'
p14707
I105
sS'trials_2.thisTrial'
p14708
NsS'trials.thisN'
p14709
I211
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14710
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14711
I1
sS'trials_2.thisN'
p14712
I2
sa(dp14713
g20
g21
sS'trials.thisIndex'
p14714
g36
(g38
S'\x00\x00\x00\x00'
tRp14715
sg22
V
sS'trials_2.thisRepN'
p14716
I2
sS'trials_2.thisTrialN'
p14717
I0
sS'trials.thisRepN'
p14718
I106
sS'trials_2.thisTrial'
p14719
NsS'trials.thisN'
p14720
I212
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14721
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14722
I0
sS'trials_2.thisN'
p14723
I2
sa(dp14724
g20
g21
sS'trials.thisIndex'
p14725
g36
(g38
S'\x01\x00\x00\x00'
tRp14726
sg22
V
sS'trials_2.thisRepN'
p14727
I2
sS'trials_2.thisTrialN'
p14728
I0
sS'trials.thisRepN'
p14729
I106
sS'trials_2.thisTrial'
p14730
NsS'trials.thisN'
p14731
I213
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14732
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14733
I1
sS'trials_2.thisN'
p14734
I2
sa(dp14735
g20
g21
sS'trials.thisIndex'
p14736
g36
(g38
S'\x00\x00\x00\x00'
tRp14737
sg22
V
sS'trials_2.thisRepN'
p14738
I2
sS'trials_2.thisTrialN'
p14739
I0
sS'trials.thisRepN'
p14740
I107
sS'trials_2.thisTrial'
p14741
NsS'trials.thisN'
p14742
I214
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14743
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14744
I0
sS'trials_2.thisN'
p14745
I2
sa(dp14746
g20
g21
sS'trials.thisIndex'
p14747
g36
(g38
S'\x01\x00\x00\x00'
tRp14748
sg22
V
sS'trials_2.thisRepN'
p14749
I2
sS'trials_2.thisTrialN'
p14750
I0
sS'trials.thisRepN'
p14751
I107
sS'trials_2.thisTrial'
p14752
NsS'trials.thisN'
p14753
I215
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14754
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14755
I1
sS'trials_2.thisN'
p14756
I2
sa(dp14757
g20
g21
sS'trials.thisIndex'
p14758
g36
(g38
S'\x00\x00\x00\x00'
tRp14759
sg22
V
sS'trials_2.thisRepN'
p14760
I2
sS'trials_2.thisTrialN'
p14761
I0
sS'trials.thisRepN'
p14762
I108
sS'trials_2.thisTrial'
p14763
NsS'trials.thisN'
p14764
I216
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14765
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14766
I0
sS'trials_2.thisN'
p14767
I2
sa(dp14768
g20
g21
sS'trials.thisIndex'
p14769
g36
(g38
S'\x01\x00\x00\x00'
tRp14770
sg22
V
sS'trials_2.thisRepN'
p14771
I2
sS'trials_2.thisTrialN'
p14772
I0
sS'trials.thisRepN'
p14773
I108
sS'trials_2.thisTrial'
p14774
NsS'trials.thisN'
p14775
I217
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14776
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14777
I1
sS'trials_2.thisN'
p14778
I2
sa(dp14779
g20
g21
sS'trials.thisIndex'
p14780
g36
(g38
S'\x00\x00\x00\x00'
tRp14781
sg22
V
sS'trials_2.thisRepN'
p14782
I2
sS'trials_2.thisTrialN'
p14783
I0
sS'trials.thisRepN'
p14784
I109
sS'trials_2.thisTrial'
p14785
NsS'trials.thisN'
p14786
I218
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14787
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14788
I0
sS'trials_2.thisN'
p14789
I2
sa(dp14790
g20
g21
sS'trials.thisIndex'
p14791
g36
(g38
S'\x01\x00\x00\x00'
tRp14792
sg22
V
sS'trials_2.thisRepN'
p14793
I2
sS'trials_2.thisTrialN'
p14794
I0
sS'trials.thisRepN'
p14795
I109
sS'trials_2.thisTrial'
p14796
NsS'trials.thisN'
p14797
I219
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14798
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14799
I1
sS'trials_2.thisN'
p14800
I2
sa(dp14801
g20
g21
sS'trials.thisIndex'
p14802
g36
(g38
S'\x00\x00\x00\x00'
tRp14803
sg22
V
sS'trials_2.thisRepN'
p14804
I2
sS'trials_2.thisTrialN'
p14805
I0
sS'trials.thisRepN'
p14806
I110
sS'trials_2.thisTrial'
p14807
NsS'trials.thisN'
p14808
I220
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14809
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14810
I0
sS'trials_2.thisN'
p14811
I2
sa(dp14812
g20
g21
sS'trials.thisIndex'
p14813
g36
(g38
S'\x01\x00\x00\x00'
tRp14814
sg22
V
sS'trials_2.thisRepN'
p14815
I2
sS'trials_2.thisTrialN'
p14816
I0
sS'trials.thisRepN'
p14817
I110
sS'trials_2.thisTrial'
p14818
NsS'trials.thisN'
p14819
I221
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14820
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14821
I1
sS'trials_2.thisN'
p14822
I2
sa(dp14823
g20
g21
sS'trials.thisIndex'
p14824
g36
(g38
S'\x00\x00\x00\x00'
tRp14825
sg22
V
sS'trials_2.thisRepN'
p14826
I2
sS'trials_2.thisTrialN'
p14827
I0
sS'trials.thisRepN'
p14828
I111
sS'trials_2.thisTrial'
p14829
NsS'trials.thisN'
p14830
I222
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14831
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14832
I0
sS'trials_2.thisN'
p14833
I2
sa(dp14834
g20
g21
sS'trials.thisIndex'
p14835
g36
(g38
S'\x01\x00\x00\x00'
tRp14836
sg22
V
sS'trials_2.thisRepN'
p14837
I2
sS'trials_2.thisTrialN'
p14838
I0
sS'trials.thisRepN'
p14839
I111
sS'trials_2.thisTrial'
p14840
NsS'trials.thisN'
p14841
I223
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14842
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14843
I1
sS'trials_2.thisN'
p14844
I2
sa(dp14845
g20
g21
sS'trials.thisIndex'
p14846
g36
(g38
S'\x00\x00\x00\x00'
tRp14847
sg22
V
sS'trials_2.thisRepN'
p14848
I2
sS'trials_2.thisTrialN'
p14849
I0
sS'trials.thisRepN'
p14850
I112
sS'trials_2.thisTrial'
p14851
NsS'trials.thisN'
p14852
I224
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14853
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14854
I0
sS'trials_2.thisN'
p14855
I2
sa(dp14856
g20
g21
sS'trials.thisIndex'
p14857
g36
(g38
S'\x01\x00\x00\x00'
tRp14858
sg22
V
sS'trials_2.thisRepN'
p14859
I2
sS'trials_2.thisTrialN'
p14860
I0
sS'trials.thisRepN'
p14861
I112
sS'trials_2.thisTrial'
p14862
NsS'trials.thisN'
p14863
I225
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14864
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14865
I1
sS'trials_2.thisN'
p14866
I2
sa(dp14867
g20
g21
sS'trials.thisIndex'
p14868
g36
(g38
S'\x00\x00\x00\x00'
tRp14869
sg22
V
sS'trials_2.thisRepN'
p14870
I2
sS'trials_2.thisTrialN'
p14871
I0
sS'trials.thisRepN'
p14872
I113
sS'trials_2.thisTrial'
p14873
NsS'trials.thisN'
p14874
I226
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14875
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14876
I0
sS'trials_2.thisN'
p14877
I2
sa(dp14878
g20
g21
sS'trials.thisIndex'
p14879
g36
(g38
S'\x01\x00\x00\x00'
tRp14880
sg22
V
sS'trials_2.thisRepN'
p14881
I2
sS'trials_2.thisTrialN'
p14882
I0
sS'trials.thisRepN'
p14883
I113
sS'trials_2.thisTrial'
p14884
NsS'trials.thisN'
p14885
I227
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14886
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14887
I1
sS'trials_2.thisN'
p14888
I2
sa(dp14889
g20
g21
sS'trials.thisIndex'
p14890
g36
(g38
S'\x00\x00\x00\x00'
tRp14891
sg22
V
sS'trials_2.thisRepN'
p14892
I2
sS'trials_2.thisTrialN'
p14893
I0
sS'trials.thisRepN'
p14894
I114
sS'trials_2.thisTrial'
p14895
NsS'trials.thisN'
p14896
I228
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14897
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14898
I0
sS'trials_2.thisN'
p14899
I2
sa(dp14900
g20
g21
sS'trials.thisIndex'
p14901
g36
(g38
S'\x01\x00\x00\x00'
tRp14902
sg22
V
sS'trials_2.thisRepN'
p14903
I2
sS'trials_2.thisTrialN'
p14904
I0
sS'trials.thisRepN'
p14905
I114
sS'trials_2.thisTrial'
p14906
NsS'trials.thisN'
p14907
I229
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14908
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14909
I1
sS'trials_2.thisN'
p14910
I2
sa(dp14911
g20
g21
sS'trials.thisIndex'
p14912
g36
(g38
S'\x00\x00\x00\x00'
tRp14913
sg22
V
sS'trials_2.thisRepN'
p14914
I2
sS'trials_2.thisTrialN'
p14915
I0
sS'trials.thisRepN'
p14916
I115
sS'trials_2.thisTrial'
p14917
NsS'trials.thisN'
p14918
I230
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14919
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14920
I0
sS'trials_2.thisN'
p14921
I2
sa(dp14922
g20
g21
sS'trials.thisIndex'
p14923
g36
(g38
S'\x01\x00\x00\x00'
tRp14924
sg22
V
sS'trials_2.thisRepN'
p14925
I2
sS'trials_2.thisTrialN'
p14926
I0
sS'trials.thisRepN'
p14927
I115
sS'trials_2.thisTrial'
p14928
NsS'trials.thisN'
p14929
I231
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14930
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14931
I1
sS'trials_2.thisN'
p14932
I2
sa(dp14933
g20
g21
sS'trials.thisIndex'
p14934
g36
(g38
S'\x00\x00\x00\x00'
tRp14935
sg22
V
sS'trials_2.thisRepN'
p14936
I2
sS'trials_2.thisTrialN'
p14937
I0
sS'trials.thisRepN'
p14938
I116
sS'trials_2.thisTrial'
p14939
NsS'trials.thisN'
p14940
I232
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14941
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14942
I0
sS'trials_2.thisN'
p14943
I2
sa(dp14944
g20
g21
sS'trials.thisIndex'
p14945
g36
(g38
S'\x01\x00\x00\x00'
tRp14946
sg22
V
sS'trials_2.thisRepN'
p14947
I2
sS'trials_2.thisTrialN'
p14948
I0
sS'trials.thisRepN'
p14949
I116
sS'trials_2.thisTrial'
p14950
NsS'trials.thisN'
p14951
I233
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14952
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14953
I1
sS'trials_2.thisN'
p14954
I2
sa(dp14955
g20
g21
sS'trials.thisIndex'
p14956
g36
(g38
S'\x00\x00\x00\x00'
tRp14957
sg22
V
sS'trials_2.thisRepN'
p14958
I2
sS'trials_2.thisTrialN'
p14959
I0
sS'trials.thisRepN'
p14960
I117
sS'trials_2.thisTrial'
p14961
NsS'trials.thisN'
p14962
I234
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14963
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14964
I0
sS'trials_2.thisN'
p14965
I2
sa(dp14966
g20
g21
sS'trials.thisIndex'
p14967
g36
(g38
S'\x01\x00\x00\x00'
tRp14968
sg22
V
sS'trials_2.thisRepN'
p14969
I2
sS'trials_2.thisTrialN'
p14970
I0
sS'trials.thisRepN'
p14971
I117
sS'trials_2.thisTrial'
p14972
NsS'trials.thisN'
p14973
I235
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14974
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14975
I1
sS'trials_2.thisN'
p14976
I2
sa(dp14977
g20
g21
sS'trials.thisIndex'
p14978
g36
(g38
S'\x00\x00\x00\x00'
tRp14979
sg22
V
sS'trials_2.thisRepN'
p14980
I2
sS'trials_2.thisTrialN'
p14981
I0
sS'trials.thisRepN'
p14982
I118
sS'trials_2.thisTrial'
p14983
NsS'trials.thisN'
p14984
I236
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14985
g12386
sg12387
g12388
sS'trials.thisTrialN'
p14986
I0
sS'trials_2.thisN'
p14987
I2
sa(dp14988
g20
g21
sS'trials.thisIndex'
p14989
g36
(g38
S'\x01\x00\x00\x00'
tRp14990
sg22
V
sS'trials_2.thisRepN'
p14991
I2
sS'trials_2.thisTrialN'
p14992
I0
sS'trials.thisRepN'
p14993
I118
sS'trials_2.thisTrial'
p14994
NsS'trials.thisN'
p14995
I237
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p14996
g12386
sg12387
g12400
sS'trials.thisTrialN'
p14997
I1
sS'trials_2.thisN'
p14998
I2
sa(dp14999
g20
g21
sS'trials.thisIndex'
p15000
g36
(g38
S'\x00\x00\x00\x00'
tRp15001
sg22
V
sS'trials_2.thisRepN'
p15002
I2
sS'trials_2.thisTrialN'
p15003
I0
sS'trials.thisRepN'
p15004
I119
sS'trials_2.thisTrial'
p15005
NsS'trials.thisN'
p15006
I238
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15007
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15008
I0
sS'trials_2.thisN'
p15009
I2
sa(dp15010
g20
g21
sS'trials.thisIndex'
p15011
g36
(g38
S'\x01\x00\x00\x00'
tRp15012
sg22
V
sS'trials_2.thisRepN'
p15013
I2
sS'trials_2.thisTrialN'
p15014
I0
sS'trials.thisRepN'
p15015
I119
sS'trials_2.thisTrial'
p15016
NsS'trials.thisN'
p15017
I239
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15018
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15019
I1
sS'trials_2.thisN'
p15020
I2
sa(dp15021
g20
g21
sS'trials.thisIndex'
p15022
g36
(g38
S'\x00\x00\x00\x00'
tRp15023
sg22
V
sS'trials_2.thisRepN'
p15024
I2
sS'trials_2.thisTrialN'
p15025
I0
sS'trials.thisRepN'
p15026
I120
sS'trials_2.thisTrial'
p15027
NsS'trials.thisN'
p15028
I240
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15029
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15030
I0
sS'trials_2.thisN'
p15031
I2
sa(dp15032
g20
g21
sS'trials.thisIndex'
p15033
g36
(g38
S'\x01\x00\x00\x00'
tRp15034
sg22
V
sS'trials_2.thisRepN'
p15035
I2
sS'trials_2.thisTrialN'
p15036
I0
sS'trials.thisRepN'
p15037
I120
sS'trials_2.thisTrial'
p15038
NsS'trials.thisN'
p15039
I241
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15040
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15041
I1
sS'trials_2.thisN'
p15042
I2
sa(dp15043
g20
g21
sS'trials.thisIndex'
p15044
g36
(g38
S'\x00\x00\x00\x00'
tRp15045
sg22
V
sS'trials_2.thisRepN'
p15046
I2
sS'trials_2.thisTrialN'
p15047
I0
sS'trials.thisRepN'
p15048
I121
sS'trials_2.thisTrial'
p15049
NsS'trials.thisN'
p15050
I242
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15051
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15052
I0
sS'trials_2.thisN'
p15053
I2
sa(dp15054
g20
g21
sS'trials.thisIndex'
p15055
g36
(g38
S'\x01\x00\x00\x00'
tRp15056
sg22
V
sS'trials_2.thisRepN'
p15057
I2
sS'trials_2.thisTrialN'
p15058
I0
sS'trials.thisRepN'
p15059
I121
sS'trials_2.thisTrial'
p15060
NsS'trials.thisN'
p15061
I243
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15062
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15063
I1
sS'trials_2.thisN'
p15064
I2
sa(dp15065
g20
g21
sS'trials.thisIndex'
p15066
g36
(g38
S'\x00\x00\x00\x00'
tRp15067
sg22
V
sS'trials_2.thisRepN'
p15068
I2
sS'trials_2.thisTrialN'
p15069
I0
sS'trials.thisRepN'
p15070
I122
sS'trials_2.thisTrial'
p15071
NsS'trials.thisN'
p15072
I244
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15073
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15074
I0
sS'trials_2.thisN'
p15075
I2
sa(dp15076
g20
g21
sS'trials.thisIndex'
p15077
g36
(g38
S'\x01\x00\x00\x00'
tRp15078
sg22
V
sS'trials_2.thisRepN'
p15079
I2
sS'trials_2.thisTrialN'
p15080
I0
sS'trials.thisRepN'
p15081
I122
sS'trials_2.thisTrial'
p15082
NsS'trials.thisN'
p15083
I245
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15084
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15085
I1
sS'trials_2.thisN'
p15086
I2
sa(dp15087
g20
g21
sS'trials.thisIndex'
p15088
g36
(g38
S'\x00\x00\x00\x00'
tRp15089
sg22
V
sS'trials_2.thisRepN'
p15090
I2
sS'trials_2.thisTrialN'
p15091
I0
sS'trials.thisRepN'
p15092
I123
sS'trials_2.thisTrial'
p15093
NsS'trials.thisN'
p15094
I246
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15095
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15096
I0
sS'trials_2.thisN'
p15097
I2
sa(dp15098
g20
g21
sS'trials.thisIndex'
p15099
g36
(g38
S'\x01\x00\x00\x00'
tRp15100
sg22
V
sS'trials_2.thisRepN'
p15101
I2
sS'trials_2.thisTrialN'
p15102
I0
sS'trials.thisRepN'
p15103
I123
sS'trials_2.thisTrial'
p15104
NsS'trials.thisN'
p15105
I247
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15106
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15107
I1
sS'trials_2.thisN'
p15108
I2
sa(dp15109
g20
g21
sS'trials.thisIndex'
p15110
g36
(g38
S'\x00\x00\x00\x00'
tRp15111
sg22
V
sS'trials_2.thisRepN'
p15112
I2
sS'trials_2.thisTrialN'
p15113
I0
sS'trials.thisRepN'
p15114
I124
sS'trials_2.thisTrial'
p15115
NsS'trials.thisN'
p15116
I248
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15117
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15118
I0
sS'trials_2.thisN'
p15119
I2
sa(dp15120
g20
g21
sS'trials.thisIndex'
p15121
g36
(g38
S'\x01\x00\x00\x00'
tRp15122
sg22
V
sS'trials_2.thisRepN'
p15123
I2
sS'trials_2.thisTrialN'
p15124
I0
sS'trials.thisRepN'
p15125
I124
sS'trials_2.thisTrial'
p15126
NsS'trials.thisN'
p15127
I249
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15128
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15129
I1
sS'trials_2.thisN'
p15130
I2
sa(dp15131
g20
g21
sS'trials.thisIndex'
p15132
g36
(g38
S'\x00\x00\x00\x00'
tRp15133
sg22
V
sS'trials_2.thisRepN'
p15134
I2
sS'trials_2.thisTrialN'
p15135
I0
sS'trials.thisRepN'
p15136
I125
sS'trials_2.thisTrial'
p15137
NsS'trials.thisN'
p15138
I250
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15139
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15140
I0
sS'trials_2.thisN'
p15141
I2
sa(dp15142
g20
g21
sS'trials.thisIndex'
p15143
g36
(g38
S'\x01\x00\x00\x00'
tRp15144
sg22
V
sS'trials_2.thisRepN'
p15145
I2
sS'trials_2.thisTrialN'
p15146
I0
sS'trials.thisRepN'
p15147
I125
sS'trials_2.thisTrial'
p15148
NsS'trials.thisN'
p15149
I251
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15150
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15151
I1
sS'trials_2.thisN'
p15152
I2
sa(dp15153
g20
g21
sS'trials.thisIndex'
p15154
g36
(g38
S'\x00\x00\x00\x00'
tRp15155
sg22
V
sS'trials_2.thisRepN'
p15156
I2
sS'trials_2.thisTrialN'
p15157
I0
sS'trials.thisRepN'
p15158
I126
sS'trials_2.thisTrial'
p15159
NsS'trials.thisN'
p15160
I252
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15161
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15162
I0
sS'trials_2.thisN'
p15163
I2
sa(dp15164
g20
g21
sS'trials.thisIndex'
p15165
g36
(g38
S'\x01\x00\x00\x00'
tRp15166
sg22
V
sS'trials_2.thisRepN'
p15167
I2
sS'trials_2.thisTrialN'
p15168
I0
sS'trials.thisRepN'
p15169
I126
sS'trials_2.thisTrial'
p15170
NsS'trials.thisN'
p15171
I253
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15172
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15173
I1
sS'trials_2.thisN'
p15174
I2
sa(dp15175
g20
g21
sS'trials.thisIndex'
p15176
g36
(g38
S'\x00\x00\x00\x00'
tRp15177
sg22
V
sS'trials_2.thisRepN'
p15178
I2
sS'trials_2.thisTrialN'
p15179
I0
sS'trials.thisRepN'
p15180
I127
sS'trials_2.thisTrial'
p15181
NsS'trials.thisN'
p15182
I254
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15183
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15184
I0
sS'trials_2.thisN'
p15185
I2
sa(dp15186
g20
g21
sS'trials.thisIndex'
p15187
g36
(g38
S'\x01\x00\x00\x00'
tRp15188
sg22
V
sS'trials_2.thisRepN'
p15189
I2
sS'trials_2.thisTrialN'
p15190
I0
sS'trials.thisRepN'
p15191
I127
sS'trials_2.thisTrial'
p15192
NsS'trials.thisN'
p15193
I255
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15194
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15195
I1
sS'trials_2.thisN'
p15196
I2
sa(dp15197
g20
g21
sS'trials.thisIndex'
p15198
g36
(g38
S'\x00\x00\x00\x00'
tRp15199
sg22
V
sS'trials_2.thisRepN'
p15200
I2
sS'trials_2.thisTrialN'
p15201
I0
sS'trials.thisRepN'
p15202
I128
sS'trials_2.thisTrial'
p15203
NsS'trials.thisN'
p15204
I256
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15205
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15206
I0
sS'trials_2.thisN'
p15207
I2
sa(dp15208
g20
g21
sS'trials.thisIndex'
p15209
g36
(g38
S'\x01\x00\x00\x00'
tRp15210
sg22
V
sS'trials_2.thisRepN'
p15211
I2
sS'trials_2.thisTrialN'
p15212
I0
sS'trials.thisRepN'
p15213
I128
sS'trials_2.thisTrial'
p15214
NsS'trials.thisN'
p15215
I257
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15216
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15217
I1
sS'trials_2.thisN'
p15218
I2
sa(dp15219
g20
g21
sS'trials.thisIndex'
p15220
g36
(g38
S'\x00\x00\x00\x00'
tRp15221
sg22
V
sS'trials_2.thisRepN'
p15222
I2
sS'trials_2.thisTrialN'
p15223
I0
sS'trials.thisRepN'
p15224
I129
sS'trials_2.thisTrial'
p15225
NsS'trials.thisN'
p15226
I258
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15227
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15228
I0
sS'trials_2.thisN'
p15229
I2
sa(dp15230
g20
g21
sS'trials.thisIndex'
p15231
g36
(g38
S'\x01\x00\x00\x00'
tRp15232
sg22
V
sS'trials_2.thisRepN'
p15233
I2
sS'trials_2.thisTrialN'
p15234
I0
sS'trials.thisRepN'
p15235
I129
sS'trials_2.thisTrial'
p15236
NsS'trials.thisN'
p15237
I259
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15238
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15239
I1
sS'trials_2.thisN'
p15240
I2
sa(dp15241
g20
g21
sS'trials.thisIndex'
p15242
g36
(g38
S'\x00\x00\x00\x00'
tRp15243
sg22
V
sS'trials_2.thisRepN'
p15244
I2
sS'trials_2.thisTrialN'
p15245
I0
sS'trials.thisRepN'
p15246
I130
sS'trials_2.thisTrial'
p15247
NsS'trials.thisN'
p15248
I260
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15249
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15250
I0
sS'trials_2.thisN'
p15251
I2
sa(dp15252
g20
g21
sS'trials.thisIndex'
p15253
g36
(g38
S'\x01\x00\x00\x00'
tRp15254
sg22
V
sS'trials_2.thisRepN'
p15255
I2
sS'trials_2.thisTrialN'
p15256
I0
sS'trials.thisRepN'
p15257
I130
sS'trials_2.thisTrial'
p15258
NsS'trials.thisN'
p15259
I261
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15260
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15261
I1
sS'trials_2.thisN'
p15262
I2
sa(dp15263
g20
g21
sS'trials.thisIndex'
p15264
g36
(g38
S'\x00\x00\x00\x00'
tRp15265
sg22
V
sS'trials_2.thisRepN'
p15266
I2
sS'trials_2.thisTrialN'
p15267
I0
sS'trials.thisRepN'
p15268
I131
sS'trials_2.thisTrial'
p15269
NsS'trials.thisN'
p15270
I262
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15271
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15272
I0
sS'trials_2.thisN'
p15273
I2
sa(dp15274
g20
g21
sS'trials.thisIndex'
p15275
g36
(g38
S'\x01\x00\x00\x00'
tRp15276
sg22
V
sS'trials_2.thisRepN'
p15277
I2
sS'trials_2.thisTrialN'
p15278
I0
sS'trials.thisRepN'
p15279
I131
sS'trials_2.thisTrial'
p15280
NsS'trials.thisN'
p15281
I263
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15282
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15283
I1
sS'trials_2.thisN'
p15284
I2
sa(dp15285
g20
g21
sS'trials.thisIndex'
p15286
g36
(g38
S'\x00\x00\x00\x00'
tRp15287
sg22
V
sS'trials_2.thisRepN'
p15288
I2
sS'trials_2.thisTrialN'
p15289
I0
sS'trials.thisRepN'
p15290
I132
sS'trials_2.thisTrial'
p15291
NsS'trials.thisN'
p15292
I264
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15293
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15294
I0
sS'trials_2.thisN'
p15295
I2
sa(dp15296
g20
g21
sS'trials.thisIndex'
p15297
g36
(g38
S'\x01\x00\x00\x00'
tRp15298
sg22
V
sS'trials_2.thisRepN'
p15299
I2
sS'trials_2.thisTrialN'
p15300
I0
sS'trials.thisRepN'
p15301
I132
sS'trials_2.thisTrial'
p15302
NsS'trials.thisN'
p15303
I265
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15304
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15305
I1
sS'trials_2.thisN'
p15306
I2
sa(dp15307
g20
g21
sS'trials.thisIndex'
p15308
g36
(g38
S'\x00\x00\x00\x00'
tRp15309
sg22
V
sS'trials_2.thisRepN'
p15310
I2
sS'trials_2.thisTrialN'
p15311
I0
sS'trials.thisRepN'
p15312
I133
sS'trials_2.thisTrial'
p15313
NsS'trials.thisN'
p15314
I266
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15315
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15316
I0
sS'trials_2.thisN'
p15317
I2
sa(dp15318
g20
g21
sS'trials.thisIndex'
p15319
g36
(g38
S'\x01\x00\x00\x00'
tRp15320
sg22
V
sS'trials_2.thisRepN'
p15321
I2
sS'trials_2.thisTrialN'
p15322
I0
sS'trials.thisRepN'
p15323
I133
sS'trials_2.thisTrial'
p15324
NsS'trials.thisN'
p15325
I267
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15326
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15327
I1
sS'trials_2.thisN'
p15328
I2
sa(dp15329
g20
g21
sS'trials.thisIndex'
p15330
g36
(g38
S'\x00\x00\x00\x00'
tRp15331
sg22
V
sS'trials_2.thisRepN'
p15332
I2
sS'trials_2.thisTrialN'
p15333
I0
sS'trials.thisRepN'
p15334
I134
sS'trials_2.thisTrial'
p15335
NsS'trials.thisN'
p15336
I268
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15337
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15338
I0
sS'trials_2.thisN'
p15339
I2
sa(dp15340
g20
g21
sS'trials.thisIndex'
p15341
g36
(g38
S'\x01\x00\x00\x00'
tRp15342
sg22
V
sS'trials_2.thisRepN'
p15343
I2
sS'trials_2.thisTrialN'
p15344
I0
sS'trials.thisRepN'
p15345
I134
sS'trials_2.thisTrial'
p15346
NsS'trials.thisN'
p15347
I269
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15348
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15349
I1
sS'trials_2.thisN'
p15350
I2
sa(dp15351
g20
g21
sS'trials.thisIndex'
p15352
g36
(g38
S'\x00\x00\x00\x00'
tRp15353
sg22
V
sS'trials_2.thisRepN'
p15354
I2
sS'trials_2.thisTrialN'
p15355
I0
sS'trials.thisRepN'
p15356
I135
sS'trials_2.thisTrial'
p15357
NsS'trials.thisN'
p15358
I270
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15359
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15360
I0
sS'trials_2.thisN'
p15361
I2
sa(dp15362
g20
g21
sS'trials.thisIndex'
p15363
g36
(g38
S'\x01\x00\x00\x00'
tRp15364
sg22
V
sS'trials_2.thisRepN'
p15365
I2
sS'trials_2.thisTrialN'
p15366
I0
sS'trials.thisRepN'
p15367
I135
sS'trials_2.thisTrial'
p15368
NsS'trials.thisN'
p15369
I271
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15370
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15371
I1
sS'trials_2.thisN'
p15372
I2
sa(dp15373
g20
g21
sS'trials.thisIndex'
p15374
g36
(g38
S'\x00\x00\x00\x00'
tRp15375
sg22
V
sS'trials_2.thisRepN'
p15376
I2
sS'trials_2.thisTrialN'
p15377
I0
sS'trials.thisRepN'
p15378
I136
sS'trials_2.thisTrial'
p15379
NsS'trials.thisN'
p15380
I272
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15381
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15382
I0
sS'trials_2.thisN'
p15383
I2
sa(dp15384
g20
g21
sS'trials.thisIndex'
p15385
g36
(g38
S'\x01\x00\x00\x00'
tRp15386
sg22
V
sS'trials_2.thisRepN'
p15387
I2
sS'trials_2.thisTrialN'
p15388
I0
sS'trials.thisRepN'
p15389
I136
sS'trials_2.thisTrial'
p15390
NsS'trials.thisN'
p15391
I273
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15392
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15393
I1
sS'trials_2.thisN'
p15394
I2
sa(dp15395
g20
g21
sS'trials.thisIndex'
p15396
g36
(g38
S'\x00\x00\x00\x00'
tRp15397
sg22
V
sS'trials_2.thisRepN'
p15398
I2
sS'trials_2.thisTrialN'
p15399
I0
sS'trials.thisRepN'
p15400
I137
sS'trials_2.thisTrial'
p15401
NsS'trials.thisN'
p15402
I274
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15403
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15404
I0
sS'trials_2.thisN'
p15405
I2
sa(dp15406
g20
g21
sS'trials.thisIndex'
p15407
g36
(g38
S'\x01\x00\x00\x00'
tRp15408
sg22
V
sS'trials_2.thisRepN'
p15409
I2
sS'trials_2.thisTrialN'
p15410
I0
sS'trials.thisRepN'
p15411
I137
sS'trials_2.thisTrial'
p15412
NsS'trials.thisN'
p15413
I275
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15414
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15415
I1
sS'trials_2.thisN'
p15416
I2
sa(dp15417
g20
g21
sS'trials.thisIndex'
p15418
g36
(g38
S'\x00\x00\x00\x00'
tRp15419
sg22
V
sS'trials_2.thisRepN'
p15420
I2
sS'trials_2.thisTrialN'
p15421
I0
sS'trials.thisRepN'
p15422
I138
sS'trials_2.thisTrial'
p15423
NsS'trials.thisN'
p15424
I276
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15425
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15426
I0
sS'trials_2.thisN'
p15427
I2
sa(dp15428
g20
g21
sS'trials.thisIndex'
p15429
g36
(g38
S'\x01\x00\x00\x00'
tRp15430
sg22
V
sS'trials_2.thisRepN'
p15431
I2
sS'trials_2.thisTrialN'
p15432
I0
sS'trials.thisRepN'
p15433
I138
sS'trials_2.thisTrial'
p15434
NsS'trials.thisN'
p15435
I277
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15436
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15437
I1
sS'trials_2.thisN'
p15438
I2
sa(dp15439
g20
g21
sS'trials.thisIndex'
p15440
g36
(g38
S'\x00\x00\x00\x00'
tRp15441
sg22
V
sS'trials_2.thisRepN'
p15442
I2
sS'trials_2.thisTrialN'
p15443
I0
sS'trials.thisRepN'
p15444
I139
sS'trials_2.thisTrial'
p15445
NsS'trials.thisN'
p15446
I278
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15447
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15448
I0
sS'trials_2.thisN'
p15449
I2
sa(dp15450
g20
g21
sS'trials.thisIndex'
p15451
g36
(g38
S'\x01\x00\x00\x00'
tRp15452
sg22
V
sS'trials_2.thisRepN'
p15453
I2
sS'trials_2.thisTrialN'
p15454
I0
sS'trials.thisRepN'
p15455
I139
sS'trials_2.thisTrial'
p15456
NsS'trials.thisN'
p15457
I279
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15458
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15459
I1
sS'trials_2.thisN'
p15460
I2
sa(dp15461
g20
g21
sS'trials.thisIndex'
p15462
g36
(g38
S'\x00\x00\x00\x00'
tRp15463
sg22
V
sS'trials_2.thisRepN'
p15464
I2
sS'trials_2.thisTrialN'
p15465
I0
sS'trials.thisRepN'
p15466
I140
sS'trials_2.thisTrial'
p15467
NsS'trials.thisN'
p15468
I280
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15469
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15470
I0
sS'trials_2.thisN'
p15471
I2
sa(dp15472
g20
g21
sS'trials.thisIndex'
p15473
g36
(g38
S'\x01\x00\x00\x00'
tRp15474
sg22
V
sS'trials_2.thisRepN'
p15475
I2
sS'trials_2.thisTrialN'
p15476
I0
sS'trials.thisRepN'
p15477
I140
sS'trials_2.thisTrial'
p15478
NsS'trials.thisN'
p15479
I281
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15480
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15481
I1
sS'trials_2.thisN'
p15482
I2
sa(dp15483
g20
g21
sS'trials.thisIndex'
p15484
g36
(g38
S'\x00\x00\x00\x00'
tRp15485
sg22
V
sS'trials_2.thisRepN'
p15486
I2
sS'trials_2.thisTrialN'
p15487
I0
sS'trials.thisRepN'
p15488
I141
sS'trials_2.thisTrial'
p15489
NsS'trials.thisN'
p15490
I282
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15491
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15492
I0
sS'trials_2.thisN'
p15493
I2
sa(dp15494
g20
g21
sS'trials.thisIndex'
p15495
g36
(g38
S'\x01\x00\x00\x00'
tRp15496
sg22
V
sS'trials_2.thisRepN'
p15497
I2
sS'trials_2.thisTrialN'
p15498
I0
sS'trials.thisRepN'
p15499
I141
sS'trials_2.thisTrial'
p15500
NsS'trials.thisN'
p15501
I283
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15502
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15503
I1
sS'trials_2.thisN'
p15504
I2
sa(dp15505
g20
g21
sS'trials.thisIndex'
p15506
g36
(g38
S'\x00\x00\x00\x00'
tRp15507
sg22
V
sS'trials_2.thisRepN'
p15508
I2
sS'trials_2.thisTrialN'
p15509
I0
sS'trials.thisRepN'
p15510
I142
sS'trials_2.thisTrial'
p15511
NsS'trials.thisN'
p15512
I284
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15513
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15514
I0
sS'trials_2.thisN'
p15515
I2
sa(dp15516
g20
g21
sS'trials.thisIndex'
p15517
g36
(g38
S'\x01\x00\x00\x00'
tRp15518
sg22
V
sS'trials_2.thisRepN'
p15519
I2
sS'trials_2.thisTrialN'
p15520
I0
sS'trials.thisRepN'
p15521
I142
sS'trials_2.thisTrial'
p15522
NsS'trials.thisN'
p15523
I285
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15524
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15525
I1
sS'trials_2.thisN'
p15526
I2
sa(dp15527
g20
g21
sS'trials.thisIndex'
p15528
g36
(g38
S'\x00\x00\x00\x00'
tRp15529
sg22
V
sS'trials_2.thisRepN'
p15530
I2
sS'trials_2.thisTrialN'
p15531
I0
sS'trials.thisRepN'
p15532
I143
sS'trials_2.thisTrial'
p15533
NsS'trials.thisN'
p15534
I286
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15535
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15536
I0
sS'trials_2.thisN'
p15537
I2
sa(dp15538
g20
g21
sS'trials.thisIndex'
p15539
g36
(g38
S'\x01\x00\x00\x00'
tRp15540
sg22
V
sS'trials_2.thisRepN'
p15541
I2
sS'trials_2.thisTrialN'
p15542
I0
sS'trials.thisRepN'
p15543
I143
sS'trials_2.thisTrial'
p15544
NsS'trials.thisN'
p15545
I287
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15546
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15547
I1
sS'trials_2.thisN'
p15548
I2
sa(dp15549
g20
g21
sS'trials.thisIndex'
p15550
g36
(g38
S'\x00\x00\x00\x00'
tRp15551
sg22
V
sS'trials_2.thisRepN'
p15552
I2
sS'trials_2.thisTrialN'
p15553
I0
sS'trials.thisRepN'
p15554
I144
sS'trials_2.thisTrial'
p15555
NsS'trials.thisN'
p15556
I288
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15557
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15558
I0
sS'trials_2.thisN'
p15559
I2
sa(dp15560
g20
g21
sS'trials.thisIndex'
p15561
g36
(g38
S'\x01\x00\x00\x00'
tRp15562
sg22
V
sS'trials_2.thisRepN'
p15563
I2
sS'trials_2.thisTrialN'
p15564
I0
sS'trials.thisRepN'
p15565
I144
sS'trials_2.thisTrial'
p15566
NsS'trials.thisN'
p15567
I289
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15568
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15569
I1
sS'trials_2.thisN'
p15570
I2
sa(dp15571
g20
g21
sS'trials.thisIndex'
p15572
g36
(g38
S'\x00\x00\x00\x00'
tRp15573
sg22
V
sS'trials_2.thisRepN'
p15574
I2
sS'trials_2.thisTrialN'
p15575
I0
sS'trials.thisRepN'
p15576
I145
sS'trials_2.thisTrial'
p15577
NsS'trials.thisN'
p15578
I290
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15579
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15580
I0
sS'trials_2.thisN'
p15581
I2
sa(dp15582
g20
g21
sS'trials.thisIndex'
p15583
g36
(g38
S'\x01\x00\x00\x00'
tRp15584
sg22
V
sS'trials_2.thisRepN'
p15585
I2
sS'trials_2.thisTrialN'
p15586
I0
sS'trials.thisRepN'
p15587
I145
sS'trials_2.thisTrial'
p15588
NsS'trials.thisN'
p15589
I291
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15590
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15591
I1
sS'trials_2.thisN'
p15592
I2
sa(dp15593
g20
g21
sS'trials.thisIndex'
p15594
g36
(g38
S'\x00\x00\x00\x00'
tRp15595
sg22
V
sS'trials_2.thisRepN'
p15596
I2
sS'trials_2.thisTrialN'
p15597
I0
sS'trials.thisRepN'
p15598
I146
sS'trials_2.thisTrial'
p15599
NsS'trials.thisN'
p15600
I292
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15601
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15602
I0
sS'trials_2.thisN'
p15603
I2
sa(dp15604
g20
g21
sS'trials.thisIndex'
p15605
g36
(g38
S'\x01\x00\x00\x00'
tRp15606
sg22
V
sS'trials_2.thisRepN'
p15607
I2
sS'trials_2.thisTrialN'
p15608
I0
sS'trials.thisRepN'
p15609
I146
sS'trials_2.thisTrial'
p15610
NsS'trials.thisN'
p15611
I293
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15612
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15613
I1
sS'trials_2.thisN'
p15614
I2
sa(dp15615
g20
g21
sS'trials.thisIndex'
p15616
g36
(g38
S'\x00\x00\x00\x00'
tRp15617
sg22
V
sS'trials_2.thisRepN'
p15618
I2
sS'trials_2.thisTrialN'
p15619
I0
sS'trials.thisRepN'
p15620
I147
sS'trials_2.thisTrial'
p15621
NsS'trials.thisN'
p15622
I294
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15623
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15624
I0
sS'trials_2.thisN'
p15625
I2
sa(dp15626
g20
g21
sS'trials.thisIndex'
p15627
g36
(g38
S'\x01\x00\x00\x00'
tRp15628
sg22
V
sS'trials_2.thisRepN'
p15629
I2
sS'trials_2.thisTrialN'
p15630
I0
sS'trials.thisRepN'
p15631
I147
sS'trials_2.thisTrial'
p15632
NsS'trials.thisN'
p15633
I295
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15634
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15635
I1
sS'trials_2.thisN'
p15636
I2
sa(dp15637
g20
g21
sS'trials.thisIndex'
p15638
g36
(g38
S'\x00\x00\x00\x00'
tRp15639
sg22
V
sS'trials_2.thisRepN'
p15640
I2
sS'trials_2.thisTrialN'
p15641
I0
sS'trials.thisRepN'
p15642
I148
sS'trials_2.thisTrial'
p15643
NsS'trials.thisN'
p15644
I296
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15645
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15646
I0
sS'trials_2.thisN'
p15647
I2
sa(dp15648
g20
g21
sS'trials.thisIndex'
p15649
g36
(g38
S'\x01\x00\x00\x00'
tRp15650
sg22
V
sS'trials_2.thisRepN'
p15651
I2
sS'trials_2.thisTrialN'
p15652
I0
sS'trials.thisRepN'
p15653
I148
sS'trials_2.thisTrial'
p15654
NsS'trials.thisN'
p15655
I297
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15656
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15657
I1
sS'trials_2.thisN'
p15658
I2
sa(dp15659
g20
g21
sS'trials.thisIndex'
p15660
g36
(g38
S'\x00\x00\x00\x00'
tRp15661
sg22
V
sS'trials_2.thisRepN'
p15662
I2
sS'trials_2.thisTrialN'
p15663
I0
sS'trials.thisRepN'
p15664
I149
sS'trials_2.thisTrial'
p15665
NsS'trials.thisN'
p15666
I298
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15667
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15668
I0
sS'trials_2.thisN'
p15669
I2
sa(dp15670
g20
g21
sS'trials.thisIndex'
p15671
g36
(g38
S'\x01\x00\x00\x00'
tRp15672
sg22
V
sS'trials_2.thisRepN'
p15673
I2
sS'trials_2.thisTrialN'
p15674
I0
sS'trials.thisRepN'
p15675
I149
sS'trials_2.thisTrial'
p15676
NsS'trials.thisN'
p15677
I299
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15678
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15679
I1
sS'trials_2.thisN'
p15680
I2
sa(dp15681
g20
g21
sS'trials.thisIndex'
p15682
g36
(g38
S'\x00\x00\x00\x00'
tRp15683
sg22
V
sS'trials_2.thisRepN'
p15684
I2
sS'trials_2.thisTrialN'
p15685
I0
sS'trials.thisRepN'
p15686
I150
sS'trials_2.thisTrial'
p15687
NsS'trials.thisN'
p15688
I300
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15689
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15690
I0
sS'trials_2.thisN'
p15691
I2
sa(dp15692
g20
g21
sS'trials.thisIndex'
p15693
g36
(g38
S'\x01\x00\x00\x00'
tRp15694
sg22
V
sS'trials_2.thisRepN'
p15695
I2
sS'trials_2.thisTrialN'
p15696
I0
sS'trials.thisRepN'
p15697
I150
sS'trials_2.thisTrial'
p15698
NsS'trials.thisN'
p15699
I301
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15700
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15701
I1
sS'trials_2.thisN'
p15702
I2
sa(dp15703
g20
g21
sS'trials.thisIndex'
p15704
g36
(g38
S'\x00\x00\x00\x00'
tRp15705
sg22
V
sS'trials_2.thisRepN'
p15706
I2
sS'trials_2.thisTrialN'
p15707
I0
sS'trials.thisRepN'
p15708
I151
sS'trials_2.thisTrial'
p15709
NsS'trials.thisN'
p15710
I302
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15711
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15712
I0
sS'trials_2.thisN'
p15713
I2
sa(dp15714
g20
g21
sS'trials.thisIndex'
p15715
g36
(g38
S'\x01\x00\x00\x00'
tRp15716
sg22
V
sS'trials_2.thisRepN'
p15717
I2
sS'trials_2.thisTrialN'
p15718
I0
sS'trials.thisRepN'
p15719
I151
sS'trials_2.thisTrial'
p15720
NsS'trials.thisN'
p15721
I303
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15722
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15723
I1
sS'trials_2.thisN'
p15724
I2
sa(dp15725
g20
g21
sS'trials.thisIndex'
p15726
g36
(g38
S'\x00\x00\x00\x00'
tRp15727
sg22
V
sS'trials_2.thisRepN'
p15728
I2
sS'trials_2.thisTrialN'
p15729
I0
sS'trials.thisRepN'
p15730
I152
sS'trials_2.thisTrial'
p15731
NsS'trials.thisN'
p15732
I304
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15733
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15734
I0
sS'trials_2.thisN'
p15735
I2
sa(dp15736
g20
g21
sS'trials.thisIndex'
p15737
g36
(g38
S'\x01\x00\x00\x00'
tRp15738
sg22
V
sS'trials_2.thisRepN'
p15739
I2
sS'trials_2.thisTrialN'
p15740
I0
sS'trials.thisRepN'
p15741
I152
sS'trials_2.thisTrial'
p15742
NsS'trials.thisN'
p15743
I305
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15744
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15745
I1
sS'trials_2.thisN'
p15746
I2
sa(dp15747
g20
g21
sS'trials.thisIndex'
p15748
g36
(g38
S'\x00\x00\x00\x00'
tRp15749
sg22
V
sS'trials_2.thisRepN'
p15750
I2
sS'trials_2.thisTrialN'
p15751
I0
sS'trials.thisRepN'
p15752
I153
sS'trials_2.thisTrial'
p15753
NsS'trials.thisN'
p15754
I306
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15755
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15756
I0
sS'trials_2.thisN'
p15757
I2
sa(dp15758
g20
g21
sS'trials.thisIndex'
p15759
g36
(g38
S'\x01\x00\x00\x00'
tRp15760
sg22
V
sS'trials_2.thisRepN'
p15761
I2
sS'trials_2.thisTrialN'
p15762
I0
sS'trials.thisRepN'
p15763
I153
sS'trials_2.thisTrial'
p15764
NsS'trials.thisN'
p15765
I307
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15766
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15767
I1
sS'trials_2.thisN'
p15768
I2
sa(dp15769
g20
g21
sS'trials.thisIndex'
p15770
g36
(g38
S'\x00\x00\x00\x00'
tRp15771
sg22
V
sS'trials_2.thisRepN'
p15772
I2
sS'trials_2.thisTrialN'
p15773
I0
sS'trials.thisRepN'
p15774
I154
sS'trials_2.thisTrial'
p15775
NsS'trials.thisN'
p15776
I308
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15777
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15778
I0
sS'trials_2.thisN'
p15779
I2
sa(dp15780
g20
g21
sS'trials.thisIndex'
p15781
g36
(g38
S'\x01\x00\x00\x00'
tRp15782
sg22
V
sS'trials_2.thisRepN'
p15783
I2
sS'trials_2.thisTrialN'
p15784
I0
sS'trials.thisRepN'
p15785
I154
sS'trials_2.thisTrial'
p15786
NsS'trials.thisN'
p15787
I309
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15788
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15789
I1
sS'trials_2.thisN'
p15790
I2
sa(dp15791
g20
g21
sS'trials.thisIndex'
p15792
g36
(g38
S'\x00\x00\x00\x00'
tRp15793
sg22
V
sS'trials_2.thisRepN'
p15794
I2
sS'trials_2.thisTrialN'
p15795
I0
sS'trials.thisRepN'
p15796
I155
sS'trials_2.thisTrial'
p15797
NsS'trials.thisN'
p15798
I310
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15799
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15800
I0
sS'trials_2.thisN'
p15801
I2
sa(dp15802
g20
g21
sS'trials.thisIndex'
p15803
g36
(g38
S'\x01\x00\x00\x00'
tRp15804
sg22
V
sS'trials_2.thisRepN'
p15805
I2
sS'trials_2.thisTrialN'
p15806
I0
sS'trials.thisRepN'
p15807
I155
sS'trials_2.thisTrial'
p15808
NsS'trials.thisN'
p15809
I311
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15810
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15811
I1
sS'trials_2.thisN'
p15812
I2
sa(dp15813
g20
g21
sS'trials.thisIndex'
p15814
g36
(g38
S'\x00\x00\x00\x00'
tRp15815
sg22
V
sS'trials_2.thisRepN'
p15816
I2
sS'trials_2.thisTrialN'
p15817
I0
sS'trials.thisRepN'
p15818
I156
sS'trials_2.thisTrial'
p15819
NsS'trials.thisN'
p15820
I312
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15821
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15822
I0
sS'trials_2.thisN'
p15823
I2
sa(dp15824
g20
g21
sS'trials.thisIndex'
p15825
g36
(g38
S'\x01\x00\x00\x00'
tRp15826
sg22
V
sS'trials_2.thisRepN'
p15827
I2
sS'trials_2.thisTrialN'
p15828
I0
sS'trials.thisRepN'
p15829
I156
sS'trials_2.thisTrial'
p15830
NsS'trials.thisN'
p15831
I313
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15832
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15833
I1
sS'trials_2.thisN'
p15834
I2
sa(dp15835
g20
g21
sS'trials.thisIndex'
p15836
g36
(g38
S'\x00\x00\x00\x00'
tRp15837
sg22
V
sS'trials_2.thisRepN'
p15838
I2
sS'trials_2.thisTrialN'
p15839
I0
sS'trials.thisRepN'
p15840
I157
sS'trials_2.thisTrial'
p15841
NsS'trials.thisN'
p15842
I314
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15843
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15844
I0
sS'trials_2.thisN'
p15845
I2
sa(dp15846
g20
g21
sS'trials.thisIndex'
p15847
g36
(g38
S'\x01\x00\x00\x00'
tRp15848
sg22
V
sS'trials_2.thisRepN'
p15849
I2
sS'trials_2.thisTrialN'
p15850
I0
sS'trials.thisRepN'
p15851
I157
sS'trials_2.thisTrial'
p15852
NsS'trials.thisN'
p15853
I315
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15854
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15855
I1
sS'trials_2.thisN'
p15856
I2
sa(dp15857
g20
g21
sS'trials.thisIndex'
p15858
g36
(g38
S'\x00\x00\x00\x00'
tRp15859
sg22
V
sS'trials_2.thisRepN'
p15860
I2
sS'trials_2.thisTrialN'
p15861
I0
sS'trials.thisRepN'
p15862
I158
sS'trials_2.thisTrial'
p15863
NsS'trials.thisN'
p15864
I316
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15865
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15866
I0
sS'trials_2.thisN'
p15867
I2
sa(dp15868
g20
g21
sS'trials.thisIndex'
p15869
g36
(g38
S'\x01\x00\x00\x00'
tRp15870
sg22
V
sS'trials_2.thisRepN'
p15871
I2
sS'trials_2.thisTrialN'
p15872
I0
sS'trials.thisRepN'
p15873
I158
sS'trials_2.thisTrial'
p15874
NsS'trials.thisN'
p15875
I317
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15876
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15877
I1
sS'trials_2.thisN'
p15878
I2
sa(dp15879
g20
g21
sS'trials.thisIndex'
p15880
g36
(g38
S'\x00\x00\x00\x00'
tRp15881
sg22
V
sS'trials_2.thisRepN'
p15882
I2
sS'trials_2.thisTrialN'
p15883
I0
sS'trials.thisRepN'
p15884
I159
sS'trials_2.thisTrial'
p15885
NsS'trials.thisN'
p15886
I318
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15887
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15888
I0
sS'trials_2.thisN'
p15889
I2
sa(dp15890
g20
g21
sS'trials.thisIndex'
p15891
g36
(g38
S'\x01\x00\x00\x00'
tRp15892
sg22
V
sS'trials_2.thisRepN'
p15893
I2
sS'trials_2.thisTrialN'
p15894
I0
sS'trials.thisRepN'
p15895
I159
sS'trials_2.thisTrial'
p15896
NsS'trials.thisN'
p15897
I319
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15898
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15899
I1
sS'trials_2.thisN'
p15900
I2
sa(dp15901
g20
g21
sS'trials.thisIndex'
p15902
g36
(g38
S'\x00\x00\x00\x00'
tRp15903
sg22
V
sS'trials_2.thisRepN'
p15904
I2
sS'trials_2.thisTrialN'
p15905
I0
sS'trials.thisRepN'
p15906
I160
sS'trials_2.thisTrial'
p15907
NsS'trials.thisN'
p15908
I320
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15909
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15910
I0
sS'trials_2.thisN'
p15911
I2
sa(dp15912
g20
g21
sS'trials.thisIndex'
p15913
g36
(g38
S'\x01\x00\x00\x00'
tRp15914
sg22
V
sS'trials_2.thisRepN'
p15915
I2
sS'trials_2.thisTrialN'
p15916
I0
sS'trials.thisRepN'
p15917
I160
sS'trials_2.thisTrial'
p15918
NsS'trials.thisN'
p15919
I321
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15920
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15921
I1
sS'trials_2.thisN'
p15922
I2
sa(dp15923
g20
g21
sS'trials.thisIndex'
p15924
g36
(g38
S'\x00\x00\x00\x00'
tRp15925
sg22
V
sS'trials_2.thisRepN'
p15926
I2
sS'trials_2.thisTrialN'
p15927
I0
sS'trials.thisRepN'
p15928
I161
sS'trials_2.thisTrial'
p15929
NsS'trials.thisN'
p15930
I322
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15931
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15932
I0
sS'trials_2.thisN'
p15933
I2
sa(dp15934
g20
g21
sS'trials.thisIndex'
p15935
g36
(g38
S'\x01\x00\x00\x00'
tRp15936
sg22
V
sS'trials_2.thisRepN'
p15937
I2
sS'trials_2.thisTrialN'
p15938
I0
sS'trials.thisRepN'
p15939
I161
sS'trials_2.thisTrial'
p15940
NsS'trials.thisN'
p15941
I323
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15942
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15943
I1
sS'trials_2.thisN'
p15944
I2
sa(dp15945
g20
g21
sS'trials.thisIndex'
p15946
g36
(g38
S'\x00\x00\x00\x00'
tRp15947
sg22
V
sS'trials_2.thisRepN'
p15948
I2
sS'trials_2.thisTrialN'
p15949
I0
sS'trials.thisRepN'
p15950
I162
sS'trials_2.thisTrial'
p15951
NsS'trials.thisN'
p15952
I324
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15953
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15954
I0
sS'trials_2.thisN'
p15955
I2
sa(dp15956
g20
g21
sS'trials.thisIndex'
p15957
g36
(g38
S'\x01\x00\x00\x00'
tRp15958
sg22
V
sS'trials_2.thisRepN'
p15959
I2
sS'trials_2.thisTrialN'
p15960
I0
sS'trials.thisRepN'
p15961
I162
sS'trials_2.thisTrial'
p15962
NsS'trials.thisN'
p15963
I325
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15964
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15965
I1
sS'trials_2.thisN'
p15966
I2
sa(dp15967
g20
g21
sS'trials.thisIndex'
p15968
g36
(g38
S'\x00\x00\x00\x00'
tRp15969
sg22
V
sS'trials_2.thisRepN'
p15970
I2
sS'trials_2.thisTrialN'
p15971
I0
sS'trials.thisRepN'
p15972
I163
sS'trials_2.thisTrial'
p15973
NsS'trials.thisN'
p15974
I326
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15975
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15976
I0
sS'trials_2.thisN'
p15977
I2
sa(dp15978
g20
g21
sS'trials.thisIndex'
p15979
g36
(g38
S'\x01\x00\x00\x00'
tRp15980
sg22
V
sS'trials_2.thisRepN'
p15981
I2
sS'trials_2.thisTrialN'
p15982
I0
sS'trials.thisRepN'
p15983
I163
sS'trials_2.thisTrial'
p15984
NsS'trials.thisN'
p15985
I327
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15986
g12386
sg12387
g12400
sS'trials.thisTrialN'
p15987
I1
sS'trials_2.thisN'
p15988
I2
sa(dp15989
g20
g21
sS'trials.thisIndex'
p15990
g36
(g38
S'\x00\x00\x00\x00'
tRp15991
sg22
V
sS'trials_2.thisRepN'
p15992
I2
sS'trials_2.thisTrialN'
p15993
I0
sS'trials.thisRepN'
p15994
I164
sS'trials_2.thisTrial'
p15995
NsS'trials.thisN'
p15996
I328
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p15997
g12386
sg12387
g12388
sS'trials.thisTrialN'
p15998
I0
sS'trials_2.thisN'
p15999
I2
sa(dp16000
g20
g21
sS'trials.thisIndex'
p16001
g36
(g38
S'\x01\x00\x00\x00'
tRp16002
sg22
V
sS'trials_2.thisRepN'
p16003
I2
sS'trials_2.thisTrialN'
p16004
I0
sS'trials.thisRepN'
p16005
I164
sS'trials_2.thisTrial'
p16006
NsS'trials.thisN'
p16007
I329
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16008
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16009
I1
sS'trials_2.thisN'
p16010
I2
sa(dp16011
g20
g21
sS'trials.thisIndex'
p16012
g36
(g38
S'\x00\x00\x00\x00'
tRp16013
sg22
V
sS'trials_2.thisRepN'
p16014
I2
sS'trials_2.thisTrialN'
p16015
I0
sS'trials.thisRepN'
p16016
I165
sS'trials_2.thisTrial'
p16017
NsS'trials.thisN'
p16018
I330
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16019
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16020
I0
sS'trials_2.thisN'
p16021
I2
sa(dp16022
g20
g21
sS'trials.thisIndex'
p16023
g36
(g38
S'\x01\x00\x00\x00'
tRp16024
sg22
V
sS'trials_2.thisRepN'
p16025
I2
sS'trials_2.thisTrialN'
p16026
I0
sS'trials.thisRepN'
p16027
I165
sS'trials_2.thisTrial'
p16028
NsS'trials.thisN'
p16029
I331
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16030
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16031
I1
sS'trials_2.thisN'
p16032
I2
sa(dp16033
g20
g21
sS'trials.thisIndex'
p16034
g36
(g38
S'\x00\x00\x00\x00'
tRp16035
sg22
V
sS'trials_2.thisRepN'
p16036
I2
sS'trials_2.thisTrialN'
p16037
I0
sS'trials.thisRepN'
p16038
I166
sS'trials_2.thisTrial'
p16039
NsS'trials.thisN'
p16040
I332
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16041
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16042
I0
sS'trials_2.thisN'
p16043
I2
sa(dp16044
g20
g21
sS'trials.thisIndex'
p16045
g36
(g38
S'\x01\x00\x00\x00'
tRp16046
sg22
V
sS'trials_2.thisRepN'
p16047
I2
sS'trials_2.thisTrialN'
p16048
I0
sS'trials.thisRepN'
p16049
I166
sS'trials_2.thisTrial'
p16050
NsS'trials.thisN'
p16051
I333
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16052
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16053
I1
sS'trials_2.thisN'
p16054
I2
sa(dp16055
g20
g21
sS'trials.thisIndex'
p16056
g36
(g38
S'\x00\x00\x00\x00'
tRp16057
sg22
V
sS'trials_2.thisRepN'
p16058
I2
sS'trials_2.thisTrialN'
p16059
I0
sS'trials.thisRepN'
p16060
I167
sS'trials_2.thisTrial'
p16061
NsS'trials.thisN'
p16062
I334
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16063
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16064
I0
sS'trials_2.thisN'
p16065
I2
sa(dp16066
g20
g21
sS'trials.thisIndex'
p16067
g36
(g38
S'\x01\x00\x00\x00'
tRp16068
sg22
V
sS'trials_2.thisRepN'
p16069
I2
sS'trials_2.thisTrialN'
p16070
I0
sS'trials.thisRepN'
p16071
I167
sS'trials_2.thisTrial'
p16072
NsS'trials.thisN'
p16073
I335
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16074
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16075
I1
sS'trials_2.thisN'
p16076
I2
sa(dp16077
g20
g21
sS'trials.thisIndex'
p16078
g36
(g38
S'\x00\x00\x00\x00'
tRp16079
sg22
V
sS'trials_2.thisRepN'
p16080
I2
sS'trials_2.thisTrialN'
p16081
I0
sS'trials.thisRepN'
p16082
I168
sS'trials_2.thisTrial'
p16083
NsS'trials.thisN'
p16084
I336
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16085
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16086
I0
sS'trials_2.thisN'
p16087
I2
sa(dp16088
g20
g21
sS'trials.thisIndex'
p16089
g36
(g38
S'\x01\x00\x00\x00'
tRp16090
sg22
V
sS'trials_2.thisRepN'
p16091
I2
sS'trials_2.thisTrialN'
p16092
I0
sS'trials.thisRepN'
p16093
I168
sS'trials_2.thisTrial'
p16094
NsS'trials.thisN'
p16095
I337
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16096
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16097
I1
sS'trials_2.thisN'
p16098
I2
sa(dp16099
g20
g21
sS'trials.thisIndex'
p16100
g36
(g38
S'\x00\x00\x00\x00'
tRp16101
sg22
V
sS'trials_2.thisRepN'
p16102
I2
sS'trials_2.thisTrialN'
p16103
I0
sS'trials.thisRepN'
p16104
I169
sS'trials_2.thisTrial'
p16105
NsS'trials.thisN'
p16106
I338
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16107
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16108
I0
sS'trials_2.thisN'
p16109
I2
sa(dp16110
g20
g21
sS'trials.thisIndex'
p16111
g36
(g38
S'\x01\x00\x00\x00'
tRp16112
sg22
V
sS'trials_2.thisRepN'
p16113
I2
sS'trials_2.thisTrialN'
p16114
I0
sS'trials.thisRepN'
p16115
I169
sS'trials_2.thisTrial'
p16116
NsS'trials.thisN'
p16117
I339
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16118
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16119
I1
sS'trials_2.thisN'
p16120
I2
sa(dp16121
g20
g21
sS'trials.thisIndex'
p16122
g36
(g38
S'\x00\x00\x00\x00'
tRp16123
sg22
V
sS'trials_2.thisRepN'
p16124
I2
sS'trials_2.thisTrialN'
p16125
I0
sS'trials.thisRepN'
p16126
I170
sS'trials_2.thisTrial'
p16127
NsS'trials.thisN'
p16128
I340
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16129
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16130
I0
sS'trials_2.thisN'
p16131
I2
sa(dp16132
g20
g21
sS'trials.thisIndex'
p16133
g36
(g38
S'\x01\x00\x00\x00'
tRp16134
sg22
V
sS'trials_2.thisRepN'
p16135
I2
sS'trials_2.thisTrialN'
p16136
I0
sS'trials.thisRepN'
p16137
I170
sS'trials_2.thisTrial'
p16138
NsS'trials.thisN'
p16139
I341
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16140
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16141
I1
sS'trials_2.thisN'
p16142
I2
sa(dp16143
g20
g21
sS'trials.thisIndex'
p16144
g36
(g38
S'\x00\x00\x00\x00'
tRp16145
sg22
V
sS'trials_2.thisRepN'
p16146
I2
sS'trials_2.thisTrialN'
p16147
I0
sS'trials.thisRepN'
p16148
I171
sS'trials_2.thisTrial'
p16149
NsS'trials.thisN'
p16150
I342
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16151
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16152
I0
sS'trials_2.thisN'
p16153
I2
sa(dp16154
g20
g21
sS'trials.thisIndex'
p16155
g36
(g38
S'\x01\x00\x00\x00'
tRp16156
sg22
V
sS'trials_2.thisRepN'
p16157
I2
sS'trials_2.thisTrialN'
p16158
I0
sS'trials.thisRepN'
p16159
I171
sS'trials_2.thisTrial'
p16160
NsS'trials.thisN'
p16161
I343
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16162
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16163
I1
sS'trials_2.thisN'
p16164
I2
sa(dp16165
g20
g21
sS'trials.thisIndex'
p16166
g36
(g38
S'\x00\x00\x00\x00'
tRp16167
sg22
V
sS'trials_2.thisRepN'
p16168
I2
sS'trials_2.thisTrialN'
p16169
I0
sS'trials.thisRepN'
p16170
I172
sS'trials_2.thisTrial'
p16171
NsS'trials.thisN'
p16172
I344
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16173
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16174
I0
sS'trials_2.thisN'
p16175
I2
sa(dp16176
g20
g21
sS'trials.thisIndex'
p16177
g36
(g38
S'\x01\x00\x00\x00'
tRp16178
sg22
V
sS'trials_2.thisRepN'
p16179
I2
sS'trials_2.thisTrialN'
p16180
I0
sS'trials.thisRepN'
p16181
I172
sS'trials_2.thisTrial'
p16182
NsS'trials.thisN'
p16183
I345
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16184
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16185
I1
sS'trials_2.thisN'
p16186
I2
sa(dp16187
g20
g21
sS'trials.thisIndex'
p16188
g36
(g38
S'\x00\x00\x00\x00'
tRp16189
sg22
V
sS'trials_2.thisRepN'
p16190
I2
sS'trials_2.thisTrialN'
p16191
I0
sS'trials.thisRepN'
p16192
I173
sS'trials_2.thisTrial'
p16193
NsS'trials.thisN'
p16194
I346
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16195
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16196
I0
sS'trials_2.thisN'
p16197
I2
sa(dp16198
g20
g21
sS'trials.thisIndex'
p16199
g36
(g38
S'\x01\x00\x00\x00'
tRp16200
sg22
V
sS'trials_2.thisRepN'
p16201
I2
sS'trials_2.thisTrialN'
p16202
I0
sS'trials.thisRepN'
p16203
I173
sS'trials_2.thisTrial'
p16204
NsS'trials.thisN'
p16205
I347
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16206
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16207
I1
sS'trials_2.thisN'
p16208
I2
sa(dp16209
g20
g21
sS'trials.thisIndex'
p16210
g36
(g38
S'\x00\x00\x00\x00'
tRp16211
sg22
V
sS'trials_2.thisRepN'
p16212
I2
sS'trials_2.thisTrialN'
p16213
I0
sS'trials.thisRepN'
p16214
I174
sS'trials_2.thisTrial'
p16215
NsS'trials.thisN'
p16216
I348
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16217
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16218
I0
sS'trials_2.thisN'
p16219
I2
sa(dp16220
g20
g21
sS'trials.thisIndex'
p16221
g36
(g38
S'\x01\x00\x00\x00'
tRp16222
sg22
V
sS'trials_2.thisRepN'
p16223
I2
sS'trials_2.thisTrialN'
p16224
I0
sS'trials.thisRepN'
p16225
I174
sS'trials_2.thisTrial'
p16226
NsS'trials.thisN'
p16227
I349
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16228
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16229
I1
sS'trials_2.thisN'
p16230
I2
sa(dp16231
g20
g21
sS'trials.thisIndex'
p16232
g36
(g38
S'\x00\x00\x00\x00'
tRp16233
sg22
V
sS'trials_2.thisRepN'
p16234
I2
sS'trials_2.thisTrialN'
p16235
I0
sS'trials.thisRepN'
p16236
I175
sS'trials_2.thisTrial'
p16237
NsS'trials.thisN'
p16238
I350
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16239
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16240
I0
sS'trials_2.thisN'
p16241
I2
sa(dp16242
g20
g21
sS'trials.thisIndex'
p16243
g36
(g38
S'\x01\x00\x00\x00'
tRp16244
sg22
V
sS'trials_2.thisRepN'
p16245
I2
sS'trials_2.thisTrialN'
p16246
I0
sS'trials.thisRepN'
p16247
I175
sS'trials_2.thisTrial'
p16248
NsS'trials.thisN'
p16249
I351
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16250
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16251
I1
sS'trials_2.thisN'
p16252
I2
sa(dp16253
g20
g21
sS'trials.thisIndex'
p16254
g36
(g38
S'\x00\x00\x00\x00'
tRp16255
sg22
V
sS'trials_2.thisRepN'
p16256
I2
sS'trials_2.thisTrialN'
p16257
I0
sS'trials.thisRepN'
p16258
I176
sS'trials_2.thisTrial'
p16259
NsS'trials.thisN'
p16260
I352
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16261
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16262
I0
sS'trials_2.thisN'
p16263
I2
sa(dp16264
g20
g21
sS'trials.thisIndex'
p16265
g36
(g38
S'\x01\x00\x00\x00'
tRp16266
sg22
V
sS'trials_2.thisRepN'
p16267
I2
sS'trials_2.thisTrialN'
p16268
I0
sS'trials.thisRepN'
p16269
I176
sS'trials_2.thisTrial'
p16270
NsS'trials.thisN'
p16271
I353
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16272
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16273
I1
sS'trials_2.thisN'
p16274
I2
sa(dp16275
g20
g21
sS'trials.thisIndex'
p16276
g36
(g38
S'\x00\x00\x00\x00'
tRp16277
sg22
V
sS'trials_2.thisRepN'
p16278
I2
sS'trials_2.thisTrialN'
p16279
I0
sS'trials.thisRepN'
p16280
I177
sS'trials_2.thisTrial'
p16281
NsS'trials.thisN'
p16282
I354
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16283
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16284
I0
sS'trials_2.thisN'
p16285
I2
sa(dp16286
g20
g21
sS'trials.thisIndex'
p16287
g36
(g38
S'\x01\x00\x00\x00'
tRp16288
sg22
V
sS'trials_2.thisRepN'
p16289
I2
sS'trials_2.thisTrialN'
p16290
I0
sS'trials.thisRepN'
p16291
I177
sS'trials_2.thisTrial'
p16292
NsS'trials.thisN'
p16293
I355
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16294
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16295
I1
sS'trials_2.thisN'
p16296
I2
sa(dp16297
g20
g21
sS'trials.thisIndex'
p16298
g36
(g38
S'\x00\x00\x00\x00'
tRp16299
sg22
V
sS'trials_2.thisRepN'
p16300
I2
sS'trials_2.thisTrialN'
p16301
I0
sS'trials.thisRepN'
p16302
I178
sS'trials_2.thisTrial'
p16303
NsS'trials.thisN'
p16304
I356
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16305
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16306
I0
sS'trials_2.thisN'
p16307
I2
sa(dp16308
g20
g21
sS'trials.thisIndex'
p16309
g36
(g38
S'\x01\x00\x00\x00'
tRp16310
sg22
V
sS'trials_2.thisRepN'
p16311
I2
sS'trials_2.thisTrialN'
p16312
I0
sS'trials.thisRepN'
p16313
I178
sS'trials_2.thisTrial'
p16314
NsS'trials.thisN'
p16315
I357
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16316
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16317
I1
sS'trials_2.thisN'
p16318
I2
sa(dp16319
g20
g21
sS'trials.thisIndex'
p16320
g36
(g38
S'\x00\x00\x00\x00'
tRp16321
sg22
V
sS'trials_2.thisRepN'
p16322
I2
sS'trials_2.thisTrialN'
p16323
I0
sS'trials.thisRepN'
p16324
I179
sS'trials_2.thisTrial'
p16325
NsS'trials.thisN'
p16326
I358
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16327
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16328
I0
sS'trials_2.thisN'
p16329
I2
sa(dp16330
g20
g21
sS'trials.thisIndex'
p16331
g36
(g38
S'\x01\x00\x00\x00'
tRp16332
sg22
V
sS'trials_2.thisRepN'
p16333
I2
sS'trials_2.thisTrialN'
p16334
I0
sS'trials.thisRepN'
p16335
I179
sS'trials_2.thisTrial'
p16336
NsS'trials.thisN'
p16337
I359
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16338
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16339
I1
sS'trials_2.thisN'
p16340
I2
sa(dp16341
g20
g21
sS'trials.thisIndex'
p16342
g36
(g38
S'\x00\x00\x00\x00'
tRp16343
sg22
V
sS'trials_2.thisRepN'
p16344
I2
sS'trials_2.thisTrialN'
p16345
I0
sS'trials.thisRepN'
p16346
I180
sS'trials_2.thisTrial'
p16347
NsS'trials.thisN'
p16348
I360
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16349
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16350
I0
sS'trials_2.thisN'
p16351
I2
sa(dp16352
g20
g21
sS'trials.thisIndex'
p16353
g36
(g38
S'\x01\x00\x00\x00'
tRp16354
sg22
V
sS'trials_2.thisRepN'
p16355
I2
sS'trials_2.thisTrialN'
p16356
I0
sS'trials.thisRepN'
p16357
I180
sS'trials_2.thisTrial'
p16358
NsS'trials.thisN'
p16359
I361
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16360
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16361
I1
sS'trials_2.thisN'
p16362
I2
sa(dp16363
g20
g21
sS'trials.thisIndex'
p16364
g36
(g38
S'\x00\x00\x00\x00'
tRp16365
sg22
V
sS'trials_2.thisRepN'
p16366
I2
sS'trials_2.thisTrialN'
p16367
I0
sS'trials.thisRepN'
p16368
I181
sS'trials_2.thisTrial'
p16369
NsS'trials.thisN'
p16370
I362
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16371
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16372
I0
sS'trials_2.thisN'
p16373
I2
sa(dp16374
g20
g21
sS'trials.thisIndex'
p16375
g36
(g38
S'\x01\x00\x00\x00'
tRp16376
sg22
V
sS'trials_2.thisRepN'
p16377
I2
sS'trials_2.thisTrialN'
p16378
I0
sS'trials.thisRepN'
p16379
I181
sS'trials_2.thisTrial'
p16380
NsS'trials.thisN'
p16381
I363
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16382
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16383
I1
sS'trials_2.thisN'
p16384
I2
sa(dp16385
g20
g21
sS'trials.thisIndex'
p16386
g36
(g38
S'\x00\x00\x00\x00'
tRp16387
sg22
V
sS'trials_2.thisRepN'
p16388
I2
sS'trials_2.thisTrialN'
p16389
I0
sS'trials.thisRepN'
p16390
I182
sS'trials_2.thisTrial'
p16391
NsS'trials.thisN'
p16392
I364
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16393
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16394
I0
sS'trials_2.thisN'
p16395
I2
sa(dp16396
g20
g21
sS'trials.thisIndex'
p16397
g36
(g38
S'\x01\x00\x00\x00'
tRp16398
sg22
V
sS'trials_2.thisRepN'
p16399
I2
sS'trials_2.thisTrialN'
p16400
I0
sS'trials.thisRepN'
p16401
I182
sS'trials_2.thisTrial'
p16402
NsS'trials.thisN'
p16403
I365
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16404
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16405
I1
sS'trials_2.thisN'
p16406
I2
sa(dp16407
g20
g21
sS'trials.thisIndex'
p16408
g36
(g38
S'\x00\x00\x00\x00'
tRp16409
sg22
V
sS'trials_2.thisRepN'
p16410
I2
sS'trials_2.thisTrialN'
p16411
I0
sS'trials.thisRepN'
p16412
I183
sS'trials_2.thisTrial'
p16413
NsS'trials.thisN'
p16414
I366
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16415
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16416
I0
sS'trials_2.thisN'
p16417
I2
sa(dp16418
g20
g21
sS'trials.thisIndex'
p16419
g36
(g38
S'\x01\x00\x00\x00'
tRp16420
sg22
V
sS'trials_2.thisRepN'
p16421
I2
sS'trials_2.thisTrialN'
p16422
I0
sS'trials.thisRepN'
p16423
I183
sS'trials_2.thisTrial'
p16424
NsS'trials.thisN'
p16425
I367
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16426
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16427
I1
sS'trials_2.thisN'
p16428
I2
sa(dp16429
g20
g21
sS'trials.thisIndex'
p16430
g36
(g38
S'\x00\x00\x00\x00'
tRp16431
sg22
V
sS'trials_2.thisRepN'
p16432
I2
sS'trials_2.thisTrialN'
p16433
I0
sS'trials.thisRepN'
p16434
I184
sS'trials_2.thisTrial'
p16435
NsS'trials.thisN'
p16436
I368
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16437
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16438
I0
sS'trials_2.thisN'
p16439
I2
sa(dp16440
g20
g21
sS'trials.thisIndex'
p16441
g36
(g38
S'\x01\x00\x00\x00'
tRp16442
sg22
V
sS'trials_2.thisRepN'
p16443
I2
sS'trials_2.thisTrialN'
p16444
I0
sS'trials.thisRepN'
p16445
I184
sS'trials_2.thisTrial'
p16446
NsS'trials.thisN'
p16447
I369
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16448
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16449
I1
sS'trials_2.thisN'
p16450
I2
sa(dp16451
g20
g21
sS'trials.thisIndex'
p16452
g36
(g38
S'\x00\x00\x00\x00'
tRp16453
sg22
V
sS'trials_2.thisRepN'
p16454
I2
sS'trials_2.thisTrialN'
p16455
I0
sS'trials.thisRepN'
p16456
I185
sS'trials_2.thisTrial'
p16457
NsS'trials.thisN'
p16458
I370
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16459
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16460
I0
sS'trials_2.thisN'
p16461
I2
sa(dp16462
g20
g21
sS'trials.thisIndex'
p16463
g36
(g38
S'\x01\x00\x00\x00'
tRp16464
sg22
V
sS'trials_2.thisRepN'
p16465
I2
sS'trials_2.thisTrialN'
p16466
I0
sS'trials.thisRepN'
p16467
I185
sS'trials_2.thisTrial'
p16468
NsS'trials.thisN'
p16469
I371
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16470
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16471
I1
sS'trials_2.thisN'
p16472
I2
sa(dp16473
g20
g21
sS'trials.thisIndex'
p16474
g36
(g38
S'\x00\x00\x00\x00'
tRp16475
sg22
V
sS'trials_2.thisRepN'
p16476
I2
sS'trials_2.thisTrialN'
p16477
I0
sS'trials.thisRepN'
p16478
I186
sS'trials_2.thisTrial'
p16479
NsS'trials.thisN'
p16480
I372
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16481
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16482
I0
sS'trials_2.thisN'
p16483
I2
sa(dp16484
g20
g21
sS'trials.thisIndex'
p16485
g36
(g38
S'\x01\x00\x00\x00'
tRp16486
sg22
V
sS'trials_2.thisRepN'
p16487
I2
sS'trials_2.thisTrialN'
p16488
I0
sS'trials.thisRepN'
p16489
I186
sS'trials_2.thisTrial'
p16490
NsS'trials.thisN'
p16491
I373
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16492
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16493
I1
sS'trials_2.thisN'
p16494
I2
sa(dp16495
g20
g21
sS'trials.thisIndex'
p16496
g36
(g38
S'\x00\x00\x00\x00'
tRp16497
sg22
V
sS'trials_2.thisRepN'
p16498
I2
sS'trials_2.thisTrialN'
p16499
I0
sS'trials.thisRepN'
p16500
I187
sS'trials_2.thisTrial'
p16501
NsS'trials.thisN'
p16502
I374
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16503
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16504
I0
sS'trials_2.thisN'
p16505
I2
sa(dp16506
g20
g21
sS'trials.thisIndex'
p16507
g36
(g38
S'\x01\x00\x00\x00'
tRp16508
sg22
V
sS'trials_2.thisRepN'
p16509
I2
sS'trials_2.thisTrialN'
p16510
I0
sS'trials.thisRepN'
p16511
I187
sS'trials_2.thisTrial'
p16512
NsS'trials.thisN'
p16513
I375
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16514
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16515
I1
sS'trials_2.thisN'
p16516
I2
sa(dp16517
g20
g21
sS'trials.thisIndex'
p16518
g36
(g38
S'\x00\x00\x00\x00'
tRp16519
sg22
V
sS'trials_2.thisRepN'
p16520
I2
sS'trials_2.thisTrialN'
p16521
I0
sS'trials.thisRepN'
p16522
I188
sS'trials_2.thisTrial'
p16523
NsS'trials.thisN'
p16524
I376
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16525
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16526
I0
sS'trials_2.thisN'
p16527
I2
sa(dp16528
g20
g21
sS'trials.thisIndex'
p16529
g36
(g38
S'\x01\x00\x00\x00'
tRp16530
sg22
V
sS'trials_2.thisRepN'
p16531
I2
sS'trials_2.thisTrialN'
p16532
I0
sS'trials.thisRepN'
p16533
I188
sS'trials_2.thisTrial'
p16534
NsS'trials.thisN'
p16535
I377
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16536
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16537
I1
sS'trials_2.thisN'
p16538
I2
sa(dp16539
g20
g21
sS'trials.thisIndex'
p16540
g36
(g38
S'\x00\x00\x00\x00'
tRp16541
sg22
V
sS'trials_2.thisRepN'
p16542
I2
sS'trials_2.thisTrialN'
p16543
I0
sS'trials.thisRepN'
p16544
I189
sS'trials_2.thisTrial'
p16545
NsS'trials.thisN'
p16546
I378
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16547
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16548
I0
sS'trials_2.thisN'
p16549
I2
sa(dp16550
g20
g21
sS'trials.thisIndex'
p16551
g36
(g38
S'\x01\x00\x00\x00'
tRp16552
sg22
V
sS'trials_2.thisRepN'
p16553
I2
sS'trials_2.thisTrialN'
p16554
I0
sS'trials.thisRepN'
p16555
I189
sS'trials_2.thisTrial'
p16556
NsS'trials.thisN'
p16557
I379
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16558
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16559
I1
sS'trials_2.thisN'
p16560
I2
sa(dp16561
g20
g21
sS'trials.thisIndex'
p16562
g36
(g38
S'\x00\x00\x00\x00'
tRp16563
sg22
V
sS'trials_2.thisRepN'
p16564
I2
sS'trials_2.thisTrialN'
p16565
I0
sS'trials.thisRepN'
p16566
I190
sS'trials_2.thisTrial'
p16567
NsS'trials.thisN'
p16568
I380
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16569
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16570
I0
sS'trials_2.thisN'
p16571
I2
sa(dp16572
g20
g21
sS'trials.thisIndex'
p16573
g36
(g38
S'\x01\x00\x00\x00'
tRp16574
sg22
V
sS'trials_2.thisRepN'
p16575
I2
sS'trials_2.thisTrialN'
p16576
I0
sS'trials.thisRepN'
p16577
I190
sS'trials_2.thisTrial'
p16578
NsS'trials.thisN'
p16579
I381
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16580
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16581
I1
sS'trials_2.thisN'
p16582
I2
sa(dp16583
g20
g21
sS'trials.thisIndex'
p16584
g36
(g38
S'\x00\x00\x00\x00'
tRp16585
sg22
V
sS'trials_2.thisRepN'
p16586
I2
sS'trials_2.thisTrialN'
p16587
I0
sS'trials.thisRepN'
p16588
I191
sS'trials_2.thisTrial'
p16589
NsS'trials.thisN'
p16590
I382
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16591
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16592
I0
sS'trials_2.thisN'
p16593
I2
sa(dp16594
g20
g21
sS'trials.thisIndex'
p16595
g36
(g38
S'\x01\x00\x00\x00'
tRp16596
sg22
V
sS'trials_2.thisRepN'
p16597
I2
sS'trials_2.thisTrialN'
p16598
I0
sS'trials.thisRepN'
p16599
I191
sS'trials_2.thisTrial'
p16600
NsS'trials.thisN'
p16601
I383
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16602
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16603
I1
sS'trials_2.thisN'
p16604
I2
sa(dp16605
g20
g21
sS'trials.thisIndex'
p16606
g36
(g38
S'\x00\x00\x00\x00'
tRp16607
sg22
V
sS'trials_2.thisRepN'
p16608
I2
sS'trials_2.thisTrialN'
p16609
I0
sS'trials.thisRepN'
p16610
I192
sS'trials_2.thisTrial'
p16611
NsS'trials.thisN'
p16612
I384
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16613
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16614
I0
sS'trials_2.thisN'
p16615
I2
sa(dp16616
g20
g21
sS'trials.thisIndex'
p16617
g36
(g38
S'\x01\x00\x00\x00'
tRp16618
sg22
V
sS'trials_2.thisRepN'
p16619
I2
sS'trials_2.thisTrialN'
p16620
I0
sS'trials.thisRepN'
p16621
I192
sS'trials_2.thisTrial'
p16622
NsS'trials.thisN'
p16623
I385
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16624
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16625
I1
sS'trials_2.thisN'
p16626
I2
sa(dp16627
g20
g21
sS'trials.thisIndex'
p16628
g36
(g38
S'\x00\x00\x00\x00'
tRp16629
sg22
V
sS'trials_2.thisRepN'
p16630
I2
sS'trials_2.thisTrialN'
p16631
I0
sS'trials.thisRepN'
p16632
I193
sS'trials_2.thisTrial'
p16633
NsS'trials.thisN'
p16634
I386
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16635
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16636
I0
sS'trials_2.thisN'
p16637
I2
sa(dp16638
g20
g21
sS'trials.thisIndex'
p16639
g36
(g38
S'\x01\x00\x00\x00'
tRp16640
sg22
V
sS'trials_2.thisRepN'
p16641
I2
sS'trials_2.thisTrialN'
p16642
I0
sS'trials.thisRepN'
p16643
I193
sS'trials_2.thisTrial'
p16644
NsS'trials.thisN'
p16645
I387
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16646
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16647
I1
sS'trials_2.thisN'
p16648
I2
sa(dp16649
g20
g21
sS'trials.thisIndex'
p16650
g36
(g38
S'\x00\x00\x00\x00'
tRp16651
sg22
V
sS'trials_2.thisRepN'
p16652
I2
sS'trials_2.thisTrialN'
p16653
I0
sS'trials.thisRepN'
p16654
I194
sS'trials_2.thisTrial'
p16655
NsS'trials.thisN'
p16656
I388
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16657
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16658
I0
sS'trials_2.thisN'
p16659
I2
sa(dp16660
g20
g21
sS'trials.thisIndex'
p16661
g36
(g38
S'\x01\x00\x00\x00'
tRp16662
sg22
V
sS'trials_2.thisRepN'
p16663
I2
sS'trials_2.thisTrialN'
p16664
I0
sS'trials.thisRepN'
p16665
I194
sS'trials_2.thisTrial'
p16666
NsS'trials.thisN'
p16667
I389
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16668
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16669
I1
sS'trials_2.thisN'
p16670
I2
sa(dp16671
g20
g21
sS'trials.thisIndex'
p16672
g36
(g38
S'\x00\x00\x00\x00'
tRp16673
sg22
V
sS'trials_2.thisRepN'
p16674
I2
sS'trials_2.thisTrialN'
p16675
I0
sS'trials.thisRepN'
p16676
I195
sS'trials_2.thisTrial'
p16677
NsS'trials.thisN'
p16678
I390
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16679
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16680
I0
sS'trials_2.thisN'
p16681
I2
sa(dp16682
g20
g21
sS'trials.thisIndex'
p16683
g36
(g38
S'\x01\x00\x00\x00'
tRp16684
sg22
V
sS'trials_2.thisRepN'
p16685
I2
sS'trials_2.thisTrialN'
p16686
I0
sS'trials.thisRepN'
p16687
I195
sS'trials_2.thisTrial'
p16688
NsS'trials.thisN'
p16689
I391
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16690
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16691
I1
sS'trials_2.thisN'
p16692
I2
sa(dp16693
g20
g21
sS'trials.thisIndex'
p16694
g36
(g38
S'\x00\x00\x00\x00'
tRp16695
sg22
V
sS'trials_2.thisRepN'
p16696
I2
sS'trials_2.thisTrialN'
p16697
I0
sS'trials.thisRepN'
p16698
I196
sS'trials_2.thisTrial'
p16699
NsS'trials.thisN'
p16700
I392
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16701
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16702
I0
sS'trials_2.thisN'
p16703
I2
sa(dp16704
g20
g21
sS'trials.thisIndex'
p16705
g36
(g38
S'\x01\x00\x00\x00'
tRp16706
sg22
V
sS'trials_2.thisRepN'
p16707
I2
sS'trials_2.thisTrialN'
p16708
I0
sS'trials.thisRepN'
p16709
I196
sS'trials_2.thisTrial'
p16710
NsS'trials.thisN'
p16711
I393
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16712
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16713
I1
sS'trials_2.thisN'
p16714
I2
sa(dp16715
g20
g21
sS'trials.thisIndex'
p16716
g36
(g38
S'\x00\x00\x00\x00'
tRp16717
sg22
V
sS'trials_2.thisRepN'
p16718
I2
sS'trials_2.thisTrialN'
p16719
I0
sS'trials.thisRepN'
p16720
I197
sS'trials_2.thisTrial'
p16721
NsS'trials.thisN'
p16722
I394
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16723
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16724
I0
sS'trials_2.thisN'
p16725
I2
sa(dp16726
g20
g21
sS'trials.thisIndex'
p16727
g36
(g38
S'\x01\x00\x00\x00'
tRp16728
sg22
V
sS'trials_2.thisRepN'
p16729
I2
sS'trials_2.thisTrialN'
p16730
I0
sS'trials.thisRepN'
p16731
I197
sS'trials_2.thisTrial'
p16732
NsS'trials.thisN'
p16733
I395
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16734
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16735
I1
sS'trials_2.thisN'
p16736
I2
sa(dp16737
g20
g21
sS'trials.thisIndex'
p16738
g36
(g38
S'\x00\x00\x00\x00'
tRp16739
sg22
V
sS'trials_2.thisRepN'
p16740
I2
sS'trials_2.thisTrialN'
p16741
I0
sS'trials.thisRepN'
p16742
I198
sS'trials_2.thisTrial'
p16743
NsS'trials.thisN'
p16744
I396
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16745
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16746
I0
sS'trials_2.thisN'
p16747
I2
sa(dp16748
g20
g21
sS'trials.thisIndex'
p16749
g36
(g38
S'\x01\x00\x00\x00'
tRp16750
sg22
V
sS'trials_2.thisRepN'
p16751
I2
sS'trials_2.thisTrialN'
p16752
I0
sS'trials.thisRepN'
p16753
I198
sS'trials_2.thisTrial'
p16754
NsS'trials.thisN'
p16755
I397
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16756
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16757
I1
sS'trials_2.thisN'
p16758
I2
sa(dp16759
g20
g21
sS'trials.thisIndex'
p16760
g36
(g38
S'\x00\x00\x00\x00'
tRp16761
sg22
V
sS'trials_2.thisRepN'
p16762
I2
sS'trials_2.thisTrialN'
p16763
I0
sS'trials.thisRepN'
p16764
I199
sS'trials_2.thisTrial'
p16765
NsS'trials.thisN'
p16766
I398
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16767
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16768
I0
sS'trials_2.thisN'
p16769
I2
sa(dp16770
g20
g21
sS'trials.thisIndex'
p16771
g36
(g38
S'\x01\x00\x00\x00'
tRp16772
sg22
V
sS'trials_2.thisRepN'
p16773
I2
sS'trials_2.thisTrialN'
p16774
I0
sS'trials.thisRepN'
p16775
I199
sS'trials_2.thisTrial'
p16776
NsS'trials.thisN'
p16777
I399
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16778
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16779
I1
sS'trials_2.thisN'
p16780
I2
sa(dp16781
g20
g21
sS'trials.thisIndex'
p16782
g36
(g38
S'\x00\x00\x00\x00'
tRp16783
sg22
V
sS'trials_2.thisRepN'
p16784
I2
sS'trials_2.thisTrialN'
p16785
I0
sS'trials.thisRepN'
p16786
I200
sS'trials_2.thisTrial'
p16787
NsS'trials.thisN'
p16788
I400
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16789
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16790
I0
sS'trials_2.thisN'
p16791
I2
sa(dp16792
g20
g21
sS'trials.thisIndex'
p16793
g36
(g38
S'\x01\x00\x00\x00'
tRp16794
sg22
V
sS'trials_2.thisRepN'
p16795
I2
sS'trials_2.thisTrialN'
p16796
I0
sS'trials.thisRepN'
p16797
I200
sS'trials_2.thisTrial'
p16798
NsS'trials.thisN'
p16799
I401
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16800
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16801
I1
sS'trials_2.thisN'
p16802
I2
sa(dp16803
g20
g21
sS'trials.thisIndex'
p16804
g36
(g38
S'\x00\x00\x00\x00'
tRp16805
sg22
V
sS'trials_2.thisRepN'
p16806
I2
sS'trials_2.thisTrialN'
p16807
I0
sS'trials.thisRepN'
p16808
I201
sS'trials_2.thisTrial'
p16809
NsS'trials.thisN'
p16810
I402
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16811
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16812
I0
sS'trials_2.thisN'
p16813
I2
sa(dp16814
g20
g21
sS'trials.thisIndex'
p16815
g36
(g38
S'\x01\x00\x00\x00'
tRp16816
sg22
V
sS'trials_2.thisRepN'
p16817
I2
sS'trials_2.thisTrialN'
p16818
I0
sS'trials.thisRepN'
p16819
I201
sS'trials_2.thisTrial'
p16820
NsS'trials.thisN'
p16821
I403
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16822
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16823
I1
sS'trials_2.thisN'
p16824
I2
sa(dp16825
g20
g21
sS'trials.thisIndex'
p16826
g36
(g38
S'\x00\x00\x00\x00'
tRp16827
sg22
V
sS'trials_2.thisRepN'
p16828
I2
sS'trials_2.thisTrialN'
p16829
I0
sS'trials.thisRepN'
p16830
I202
sS'trials_2.thisTrial'
p16831
NsS'trials.thisN'
p16832
I404
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16833
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16834
I0
sS'trials_2.thisN'
p16835
I2
sa(dp16836
g20
g21
sS'trials.thisIndex'
p16837
g36
(g38
S'\x01\x00\x00\x00'
tRp16838
sg22
V
sS'trials_2.thisRepN'
p16839
I2
sS'trials_2.thisTrialN'
p16840
I0
sS'trials.thisRepN'
p16841
I202
sS'trials_2.thisTrial'
p16842
NsS'trials.thisN'
p16843
I405
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16844
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16845
I1
sS'trials_2.thisN'
p16846
I2
sa(dp16847
g20
g21
sS'trials.thisIndex'
p16848
g36
(g38
S'\x00\x00\x00\x00'
tRp16849
sg22
V
sS'trials_2.thisRepN'
p16850
I2
sS'trials_2.thisTrialN'
p16851
I0
sS'trials.thisRepN'
p16852
I203
sS'trials_2.thisTrial'
p16853
NsS'trials.thisN'
p16854
I406
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16855
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16856
I0
sS'trials_2.thisN'
p16857
I2
sa(dp16858
g20
g21
sS'trials.thisIndex'
p16859
g36
(g38
S'\x01\x00\x00\x00'
tRp16860
sg22
V
sS'trials_2.thisRepN'
p16861
I2
sS'trials_2.thisTrialN'
p16862
I0
sS'trials.thisRepN'
p16863
I203
sS'trials_2.thisTrial'
p16864
NsS'trials.thisN'
p16865
I407
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16866
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16867
I1
sS'trials_2.thisN'
p16868
I2
sa(dp16869
g20
g21
sS'trials.thisIndex'
p16870
g36
(g38
S'\x00\x00\x00\x00'
tRp16871
sg22
V
sS'trials_2.thisRepN'
p16872
I2
sS'trials_2.thisTrialN'
p16873
I0
sS'trials.thisRepN'
p16874
I204
sS'trials_2.thisTrial'
p16875
NsS'trials.thisN'
p16876
I408
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16877
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16878
I0
sS'trials_2.thisN'
p16879
I2
sa(dp16880
g20
g21
sS'trials.thisIndex'
p16881
g36
(g38
S'\x01\x00\x00\x00'
tRp16882
sg22
V
sS'trials_2.thisRepN'
p16883
I2
sS'trials_2.thisTrialN'
p16884
I0
sS'trials.thisRepN'
p16885
I204
sS'trials_2.thisTrial'
p16886
NsS'trials.thisN'
p16887
I409
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16888
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16889
I1
sS'trials_2.thisN'
p16890
I2
sa(dp16891
g20
g21
sS'trials.thisIndex'
p16892
g36
(g38
S'\x00\x00\x00\x00'
tRp16893
sg22
V
sS'trials_2.thisRepN'
p16894
I2
sS'trials_2.thisTrialN'
p16895
I0
sS'trials.thisRepN'
p16896
I205
sS'trials_2.thisTrial'
p16897
NsS'trials.thisN'
p16898
I410
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16899
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16900
I0
sS'trials_2.thisN'
p16901
I2
sa(dp16902
g20
g21
sS'trials.thisIndex'
p16903
g36
(g38
S'\x01\x00\x00\x00'
tRp16904
sg22
V
sS'trials_2.thisRepN'
p16905
I2
sS'trials_2.thisTrialN'
p16906
I0
sS'trials.thisRepN'
p16907
I205
sS'trials_2.thisTrial'
p16908
NsS'trials.thisN'
p16909
I411
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16910
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16911
I1
sS'trials_2.thisN'
p16912
I2
sa(dp16913
g20
g21
sS'trials.thisIndex'
p16914
g36
(g38
S'\x00\x00\x00\x00'
tRp16915
sg22
V
sS'trials_2.thisRepN'
p16916
I2
sS'trials_2.thisTrialN'
p16917
I0
sS'trials.thisRepN'
p16918
I206
sS'trials_2.thisTrial'
p16919
NsS'trials.thisN'
p16920
I412
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16921
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16922
I0
sS'trials_2.thisN'
p16923
I2
sa(dp16924
g20
g21
sS'trials.thisIndex'
p16925
g36
(g38
S'\x01\x00\x00\x00'
tRp16926
sg22
V
sS'trials_2.thisRepN'
p16927
I2
sS'trials_2.thisTrialN'
p16928
I0
sS'trials.thisRepN'
p16929
I206
sS'trials_2.thisTrial'
p16930
NsS'trials.thisN'
p16931
I413
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16932
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16933
I1
sS'trials_2.thisN'
p16934
I2
sa(dp16935
g20
g21
sS'trials.thisIndex'
p16936
g36
(g38
S'\x00\x00\x00\x00'
tRp16937
sg22
V
sS'trials_2.thisRepN'
p16938
I2
sS'trials_2.thisTrialN'
p16939
I0
sS'trials.thisRepN'
p16940
I207
sS'trials_2.thisTrial'
p16941
NsS'trials.thisN'
p16942
I414
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16943
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16944
I0
sS'trials_2.thisN'
p16945
I2
sa(dp16946
g20
g21
sS'trials.thisIndex'
p16947
g36
(g38
S'\x01\x00\x00\x00'
tRp16948
sg22
V
sS'trials_2.thisRepN'
p16949
I2
sS'trials_2.thisTrialN'
p16950
I0
sS'trials.thisRepN'
p16951
I207
sS'trials_2.thisTrial'
p16952
NsS'trials.thisN'
p16953
I415
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16954
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16955
I1
sS'trials_2.thisN'
p16956
I2
sa(dp16957
g20
g21
sS'trials.thisIndex'
p16958
g36
(g38
S'\x00\x00\x00\x00'
tRp16959
sg22
V
sS'trials_2.thisRepN'
p16960
I2
sS'trials_2.thisTrialN'
p16961
I0
sS'trials.thisRepN'
p16962
I208
sS'trials_2.thisTrial'
p16963
NsS'trials.thisN'
p16964
I416
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16965
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16966
I0
sS'trials_2.thisN'
p16967
I2
sa(dp16968
g20
g21
sS'trials.thisIndex'
p16969
g36
(g38
S'\x01\x00\x00\x00'
tRp16970
sg22
V
sS'trials_2.thisRepN'
p16971
I2
sS'trials_2.thisTrialN'
p16972
I0
sS'trials.thisRepN'
p16973
I208
sS'trials_2.thisTrial'
p16974
NsS'trials.thisN'
p16975
I417
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16976
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16977
I1
sS'trials_2.thisN'
p16978
I2
sa(dp16979
g20
g21
sS'trials.thisIndex'
p16980
g36
(g38
S'\x00\x00\x00\x00'
tRp16981
sg22
V
sS'trials_2.thisRepN'
p16982
I2
sS'trials_2.thisTrialN'
p16983
I0
sS'trials.thisRepN'
p16984
I209
sS'trials_2.thisTrial'
p16985
NsS'trials.thisN'
p16986
I418
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16987
g12386
sg12387
g12388
sS'trials.thisTrialN'
p16988
I0
sS'trials_2.thisN'
p16989
I2
sa(dp16990
g20
g21
sS'trials.thisIndex'
p16991
g36
(g38
S'\x01\x00\x00\x00'
tRp16992
sg22
V
sS'trials_2.thisRepN'
p16993
I2
sS'trials_2.thisTrialN'
p16994
I0
sS'trials.thisRepN'
p16995
I209
sS'trials_2.thisTrial'
p16996
NsS'trials.thisN'
p16997
I419
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p16998
g12386
sg12387
g12400
sS'trials.thisTrialN'
p16999
I1
sS'trials_2.thisN'
p17000
I2
sa(dp17001
g20
g21
sS'trials.thisIndex'
p17002
g36
(g38
S'\x00\x00\x00\x00'
tRp17003
sg22
V
sS'trials_2.thisRepN'
p17004
I2
sS'trials_2.thisTrialN'
p17005
I0
sS'trials.thisRepN'
p17006
I210
sS'trials_2.thisTrial'
p17007
NsS'trials.thisN'
p17008
I420
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17009
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17010
I0
sS'trials_2.thisN'
p17011
I2
sa(dp17012
g20
g21
sS'trials.thisIndex'
p17013
g36
(g38
S'\x01\x00\x00\x00'
tRp17014
sg22
V
sS'trials_2.thisRepN'
p17015
I2
sS'trials_2.thisTrialN'
p17016
I0
sS'trials.thisRepN'
p17017
I210
sS'trials_2.thisTrial'
p17018
NsS'trials.thisN'
p17019
I421
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17020
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17021
I1
sS'trials_2.thisN'
p17022
I2
sa(dp17023
g20
g21
sS'trials.thisIndex'
p17024
g36
(g38
S'\x00\x00\x00\x00'
tRp17025
sg22
V
sS'trials_2.thisRepN'
p17026
I2
sS'trials_2.thisTrialN'
p17027
I0
sS'trials.thisRepN'
p17028
I211
sS'trials_2.thisTrial'
p17029
NsS'trials.thisN'
p17030
I422
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17031
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17032
I0
sS'trials_2.thisN'
p17033
I2
sa(dp17034
g20
g21
sS'trials.thisIndex'
p17035
g36
(g38
S'\x01\x00\x00\x00'
tRp17036
sg22
V
sS'trials_2.thisRepN'
p17037
I2
sS'trials_2.thisTrialN'
p17038
I0
sS'trials.thisRepN'
p17039
I211
sS'trials_2.thisTrial'
p17040
NsS'trials.thisN'
p17041
I423
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17042
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17043
I1
sS'trials_2.thisN'
p17044
I2
sa(dp17045
g20
g21
sS'trials.thisIndex'
p17046
g36
(g38
S'\x00\x00\x00\x00'
tRp17047
sg22
V
sS'trials_2.thisRepN'
p17048
I2
sS'trials_2.thisTrialN'
p17049
I0
sS'trials.thisRepN'
p17050
I212
sS'trials_2.thisTrial'
p17051
NsS'trials.thisN'
p17052
I424
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17053
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17054
I0
sS'trials_2.thisN'
p17055
I2
sa(dp17056
g20
g21
sS'trials.thisIndex'
p17057
g36
(g38
S'\x01\x00\x00\x00'
tRp17058
sg22
V
sS'trials_2.thisRepN'
p17059
I2
sS'trials_2.thisTrialN'
p17060
I0
sS'trials.thisRepN'
p17061
I212
sS'trials_2.thisTrial'
p17062
NsS'trials.thisN'
p17063
I425
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17064
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17065
I1
sS'trials_2.thisN'
p17066
I2
sa(dp17067
g20
g21
sS'trials.thisIndex'
p17068
g36
(g38
S'\x00\x00\x00\x00'
tRp17069
sg22
V
sS'trials_2.thisRepN'
p17070
I2
sS'trials_2.thisTrialN'
p17071
I0
sS'trials.thisRepN'
p17072
I213
sS'trials_2.thisTrial'
p17073
NsS'trials.thisN'
p17074
I426
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17075
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17076
I0
sS'trials_2.thisN'
p17077
I2
sa(dp17078
g20
g21
sS'trials.thisIndex'
p17079
g36
(g38
S'\x01\x00\x00\x00'
tRp17080
sg22
V
sS'trials_2.thisRepN'
p17081
I2
sS'trials_2.thisTrialN'
p17082
I0
sS'trials.thisRepN'
p17083
I213
sS'trials_2.thisTrial'
p17084
NsS'trials.thisN'
p17085
I427
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17086
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17087
I1
sS'trials_2.thisN'
p17088
I2
sa(dp17089
g20
g21
sS'trials.thisIndex'
p17090
g36
(g38
S'\x00\x00\x00\x00'
tRp17091
sg22
V
sS'trials_2.thisRepN'
p17092
I2
sS'trials_2.thisTrialN'
p17093
I0
sS'trials.thisRepN'
p17094
I214
sS'trials_2.thisTrial'
p17095
NsS'trials.thisN'
p17096
I428
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17097
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17098
I0
sS'trials_2.thisN'
p17099
I2
sa(dp17100
g20
g21
sS'trials.thisIndex'
p17101
g36
(g38
S'\x01\x00\x00\x00'
tRp17102
sg22
V
sS'trials_2.thisRepN'
p17103
I2
sS'trials_2.thisTrialN'
p17104
I0
sS'trials.thisRepN'
p17105
I214
sS'trials_2.thisTrial'
p17106
NsS'trials.thisN'
p17107
I429
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17108
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17109
I1
sS'trials_2.thisN'
p17110
I2
sa(dp17111
g20
g21
sS'trials.thisIndex'
p17112
g36
(g38
S'\x00\x00\x00\x00'
tRp17113
sg22
V
sS'trials_2.thisRepN'
p17114
I2
sS'trials_2.thisTrialN'
p17115
I0
sS'trials.thisRepN'
p17116
I215
sS'trials_2.thisTrial'
p17117
NsS'trials.thisN'
p17118
I430
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17119
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17120
I0
sS'trials_2.thisN'
p17121
I2
sa(dp17122
g20
g21
sS'trials.thisIndex'
p17123
g36
(g38
S'\x01\x00\x00\x00'
tRp17124
sg22
V
sS'trials_2.thisRepN'
p17125
I2
sS'trials_2.thisTrialN'
p17126
I0
sS'trials.thisRepN'
p17127
I215
sS'trials_2.thisTrial'
p17128
NsS'trials.thisN'
p17129
I431
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17130
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17131
I1
sS'trials_2.thisN'
p17132
I2
sa(dp17133
g20
g21
sS'trials.thisIndex'
p17134
g36
(g38
S'\x00\x00\x00\x00'
tRp17135
sg22
V
sS'trials_2.thisRepN'
p17136
I2
sS'trials_2.thisTrialN'
p17137
I0
sS'trials.thisRepN'
p17138
I216
sS'trials_2.thisTrial'
p17139
NsS'trials.thisN'
p17140
I432
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17141
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17142
I0
sS'trials_2.thisN'
p17143
I2
sa(dp17144
g20
g21
sS'trials.thisIndex'
p17145
g36
(g38
S'\x01\x00\x00\x00'
tRp17146
sg22
V
sS'trials_2.thisRepN'
p17147
I2
sS'trials_2.thisTrialN'
p17148
I0
sS'trials.thisRepN'
p17149
I216
sS'trials_2.thisTrial'
p17150
NsS'trials.thisN'
p17151
I433
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17152
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17153
I1
sS'trials_2.thisN'
p17154
I2
sa(dp17155
g20
g21
sS'trials.thisIndex'
p17156
g36
(g38
S'\x00\x00\x00\x00'
tRp17157
sg22
V
sS'trials_2.thisRepN'
p17158
I2
sS'trials_2.thisTrialN'
p17159
I0
sS'trials.thisRepN'
p17160
I217
sS'trials_2.thisTrial'
p17161
NsS'trials.thisN'
p17162
I434
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17163
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17164
I0
sS'trials_2.thisN'
p17165
I2
sa(dp17166
g20
g21
sS'trials.thisIndex'
p17167
g36
(g38
S'\x01\x00\x00\x00'
tRp17168
sg22
V
sS'trials_2.thisRepN'
p17169
I2
sS'trials_2.thisTrialN'
p17170
I0
sS'trials.thisRepN'
p17171
I217
sS'trials_2.thisTrial'
p17172
NsS'trials.thisN'
p17173
I435
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17174
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17175
I1
sS'trials_2.thisN'
p17176
I2
sa(dp17177
g20
g21
sS'trials.thisIndex'
p17178
g36
(g38
S'\x00\x00\x00\x00'
tRp17179
sg22
V
sS'trials_2.thisRepN'
p17180
I2
sS'trials_2.thisTrialN'
p17181
I0
sS'trials.thisRepN'
p17182
I218
sS'trials_2.thisTrial'
p17183
NsS'trials.thisN'
p17184
I436
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17185
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17186
I0
sS'trials_2.thisN'
p17187
I2
sa(dp17188
g20
g21
sS'trials.thisIndex'
p17189
g36
(g38
S'\x01\x00\x00\x00'
tRp17190
sg22
V
sS'trials_2.thisRepN'
p17191
I2
sS'trials_2.thisTrialN'
p17192
I0
sS'trials.thisRepN'
p17193
I218
sS'trials_2.thisTrial'
p17194
NsS'trials.thisN'
p17195
I437
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17196
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17197
I1
sS'trials_2.thisN'
p17198
I2
sa(dp17199
g20
g21
sS'trials.thisIndex'
p17200
g36
(g38
S'\x00\x00\x00\x00'
tRp17201
sg22
V
sS'trials_2.thisRepN'
p17202
I2
sS'trials_2.thisTrialN'
p17203
I0
sS'trials.thisRepN'
p17204
I219
sS'trials_2.thisTrial'
p17205
NsS'trials.thisN'
p17206
I438
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17207
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17208
I0
sS'trials_2.thisN'
p17209
I2
sa(dp17210
g20
g21
sS'trials.thisIndex'
p17211
g36
(g38
S'\x01\x00\x00\x00'
tRp17212
sg22
V
sS'trials_2.thisRepN'
p17213
I2
sS'trials_2.thisTrialN'
p17214
I0
sS'trials.thisRepN'
p17215
I219
sS'trials_2.thisTrial'
p17216
NsS'trials.thisN'
p17217
I439
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17218
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17219
I1
sS'trials_2.thisN'
p17220
I2
sa(dp17221
g20
g21
sS'trials.thisIndex'
p17222
g36
(g38
S'\x00\x00\x00\x00'
tRp17223
sg22
V
sS'trials_2.thisRepN'
p17224
I2
sS'trials_2.thisTrialN'
p17225
I0
sS'trials.thisRepN'
p17226
I220
sS'trials_2.thisTrial'
p17227
NsS'trials.thisN'
p17228
I440
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17229
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17230
I0
sS'trials_2.thisN'
p17231
I2
sa(dp17232
g20
g21
sS'trials.thisIndex'
p17233
g36
(g38
S'\x01\x00\x00\x00'
tRp17234
sg22
V
sS'trials_2.thisRepN'
p17235
I2
sS'trials_2.thisTrialN'
p17236
I0
sS'trials.thisRepN'
p17237
I220
sS'trials_2.thisTrial'
p17238
NsS'trials.thisN'
p17239
I441
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17240
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17241
I1
sS'trials_2.thisN'
p17242
I2
sa(dp17243
g20
g21
sS'trials.thisIndex'
p17244
g36
(g38
S'\x00\x00\x00\x00'
tRp17245
sg22
V
sS'trials_2.thisRepN'
p17246
I2
sS'trials_2.thisTrialN'
p17247
I0
sS'trials.thisRepN'
p17248
I221
sS'trials_2.thisTrial'
p17249
NsS'trials.thisN'
p17250
I442
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17251
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17252
I0
sS'trials_2.thisN'
p17253
I2
sa(dp17254
g20
g21
sS'trials.thisIndex'
p17255
g36
(g38
S'\x01\x00\x00\x00'
tRp17256
sg22
V
sS'trials_2.thisRepN'
p17257
I2
sS'trials_2.thisTrialN'
p17258
I0
sS'trials.thisRepN'
p17259
I221
sS'trials_2.thisTrial'
p17260
NsS'trials.thisN'
p17261
I443
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17262
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17263
I1
sS'trials_2.thisN'
p17264
I2
sa(dp17265
g20
g21
sS'trials.thisIndex'
p17266
g36
(g38
S'\x00\x00\x00\x00'
tRp17267
sg22
V
sS'trials_2.thisRepN'
p17268
I2
sS'trials_2.thisTrialN'
p17269
I0
sS'trials.thisRepN'
p17270
I222
sS'trials_2.thisTrial'
p17271
NsS'trials.thisN'
p17272
I444
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17273
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17274
I0
sS'trials_2.thisN'
p17275
I2
sa(dp17276
g20
g21
sS'trials.thisIndex'
p17277
g36
(g38
S'\x01\x00\x00\x00'
tRp17278
sg22
V
sS'trials_2.thisRepN'
p17279
I2
sS'trials_2.thisTrialN'
p17280
I0
sS'trials.thisRepN'
p17281
I222
sS'trials_2.thisTrial'
p17282
NsS'trials.thisN'
p17283
I445
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17284
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17285
I1
sS'trials_2.thisN'
p17286
I2
sa(dp17287
g20
g21
sS'trials.thisIndex'
p17288
g36
(g38
S'\x00\x00\x00\x00'
tRp17289
sg22
V
sS'trials_2.thisRepN'
p17290
I2
sS'trials_2.thisTrialN'
p17291
I0
sS'trials.thisRepN'
p17292
I223
sS'trials_2.thisTrial'
p17293
NsS'trials.thisN'
p17294
I446
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17295
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17296
I0
sS'trials_2.thisN'
p17297
I2
sa(dp17298
g20
g21
sS'trials.thisIndex'
p17299
g36
(g38
S'\x01\x00\x00\x00'
tRp17300
sg22
V
sS'trials_2.thisRepN'
p17301
I2
sS'trials_2.thisTrialN'
p17302
I0
sS'trials.thisRepN'
p17303
I223
sS'trials_2.thisTrial'
p17304
NsS'trials.thisN'
p17305
I447
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17306
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17307
I1
sS'trials_2.thisN'
p17308
I2
sa(dp17309
g20
g21
sS'trials.thisIndex'
p17310
g36
(g38
S'\x00\x00\x00\x00'
tRp17311
sg22
V
sS'trials_2.thisRepN'
p17312
I2
sS'trials_2.thisTrialN'
p17313
I0
sS'trials.thisRepN'
p17314
I224
sS'trials_2.thisTrial'
p17315
NsS'trials.thisN'
p17316
I448
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17317
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17318
I0
sS'trials_2.thisN'
p17319
I2
sa(dp17320
g20
g21
sS'trials.thisIndex'
p17321
g36
(g38
S'\x01\x00\x00\x00'
tRp17322
sg22
V
sS'trials_2.thisRepN'
p17323
I2
sS'trials_2.thisTrialN'
p17324
I0
sS'trials.thisRepN'
p17325
I224
sS'trials_2.thisTrial'
p17326
NsS'trials.thisN'
p17327
I449
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17328
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17329
I1
sS'trials_2.thisN'
p17330
I2
sa(dp17331
g20
g21
sS'trials.thisIndex'
p17332
g36
(g38
S'\x00\x00\x00\x00'
tRp17333
sg22
V
sS'trials_2.thisRepN'
p17334
I2
sS'trials_2.thisTrialN'
p17335
I0
sS'trials.thisRepN'
p17336
I225
sS'trials_2.thisTrial'
p17337
NsS'trials.thisN'
p17338
I450
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17339
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17340
I0
sS'trials_2.thisN'
p17341
I2
sa(dp17342
g20
g21
sS'trials.thisIndex'
p17343
g36
(g38
S'\x01\x00\x00\x00'
tRp17344
sg22
V
sS'trials_2.thisRepN'
p17345
I2
sS'trials_2.thisTrialN'
p17346
I0
sS'trials.thisRepN'
p17347
I225
sS'trials_2.thisTrial'
p17348
NsS'trials.thisN'
p17349
I451
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17350
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17351
I1
sS'trials_2.thisN'
p17352
I2
sa(dp17353
g20
g21
sS'trials.thisIndex'
p17354
g36
(g38
S'\x00\x00\x00\x00'
tRp17355
sg22
V
sS'trials_2.thisRepN'
p17356
I2
sS'trials_2.thisTrialN'
p17357
I0
sS'trials.thisRepN'
p17358
I226
sS'trials_2.thisTrial'
p17359
NsS'trials.thisN'
p17360
I452
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17361
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17362
I0
sS'trials_2.thisN'
p17363
I2
sa(dp17364
g20
g21
sS'trials.thisIndex'
p17365
g36
(g38
S'\x01\x00\x00\x00'
tRp17366
sg22
V
sS'trials_2.thisRepN'
p17367
I2
sS'trials_2.thisTrialN'
p17368
I0
sS'trials.thisRepN'
p17369
I226
sS'trials_2.thisTrial'
p17370
NsS'trials.thisN'
p17371
I453
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17372
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17373
I1
sS'trials_2.thisN'
p17374
I2
sa(dp17375
g20
g21
sS'trials.thisIndex'
p17376
g36
(g38
S'\x00\x00\x00\x00'
tRp17377
sg22
V
sS'trials_2.thisRepN'
p17378
I2
sS'trials_2.thisTrialN'
p17379
I0
sS'trials.thisRepN'
p17380
I227
sS'trials_2.thisTrial'
p17381
NsS'trials.thisN'
p17382
I454
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17383
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17384
I0
sS'trials_2.thisN'
p17385
I2
sa(dp17386
g20
g21
sS'trials.thisIndex'
p17387
g36
(g38
S'\x01\x00\x00\x00'
tRp17388
sg22
V
sS'trials_2.thisRepN'
p17389
I2
sS'trials_2.thisTrialN'
p17390
I0
sS'trials.thisRepN'
p17391
I227
sS'trials_2.thisTrial'
p17392
NsS'trials.thisN'
p17393
I455
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17394
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17395
I1
sS'trials_2.thisN'
p17396
I2
sa(dp17397
g20
g21
sS'trials.thisIndex'
p17398
g36
(g38
S'\x00\x00\x00\x00'
tRp17399
sg22
V
sS'trials_2.thisRepN'
p17400
I2
sS'trials_2.thisTrialN'
p17401
I0
sS'trials.thisRepN'
p17402
I228
sS'trials_2.thisTrial'
p17403
NsS'trials.thisN'
p17404
I456
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17405
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17406
I0
sS'trials_2.thisN'
p17407
I2
sa(dp17408
g20
g21
sS'trials.thisIndex'
p17409
g36
(g38
S'\x01\x00\x00\x00'
tRp17410
sg22
V
sS'trials_2.thisRepN'
p17411
I2
sS'trials_2.thisTrialN'
p17412
I0
sS'trials.thisRepN'
p17413
I228
sS'trials_2.thisTrial'
p17414
NsS'trials.thisN'
p17415
I457
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17416
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17417
I1
sS'trials_2.thisN'
p17418
I2
sa(dp17419
g20
g21
sS'trials.thisIndex'
p17420
g36
(g38
S'\x00\x00\x00\x00'
tRp17421
sg22
V
sS'trials_2.thisRepN'
p17422
I2
sS'trials_2.thisTrialN'
p17423
I0
sS'trials.thisRepN'
p17424
I229
sS'trials_2.thisTrial'
p17425
NsS'trials.thisN'
p17426
I458
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17427
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17428
I0
sS'trials_2.thisN'
p17429
I2
sa(dp17430
g20
g21
sS'trials.thisIndex'
p17431
g36
(g38
S'\x01\x00\x00\x00'
tRp17432
sg22
V
sS'trials_2.thisRepN'
p17433
I2
sS'trials_2.thisTrialN'
p17434
I0
sS'trials.thisRepN'
p17435
I229
sS'trials_2.thisTrial'
p17436
NsS'trials.thisN'
p17437
I459
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17438
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17439
I1
sS'trials_2.thisN'
p17440
I2
sa(dp17441
g20
g21
sS'trials.thisIndex'
p17442
g36
(g38
S'\x00\x00\x00\x00'
tRp17443
sg22
V
sS'trials_2.thisRepN'
p17444
I2
sS'trials_2.thisTrialN'
p17445
I0
sS'trials.thisRepN'
p17446
I230
sS'trials_2.thisTrial'
p17447
NsS'trials.thisN'
p17448
I460
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17449
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17450
I0
sS'trials_2.thisN'
p17451
I2
sa(dp17452
g20
g21
sS'trials.thisIndex'
p17453
g36
(g38
S'\x01\x00\x00\x00'
tRp17454
sg22
V
sS'trials_2.thisRepN'
p17455
I2
sS'trials_2.thisTrialN'
p17456
I0
sS'trials.thisRepN'
p17457
I230
sS'trials_2.thisTrial'
p17458
NsS'trials.thisN'
p17459
I461
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17460
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17461
I1
sS'trials_2.thisN'
p17462
I2
sa(dp17463
g20
g21
sS'trials.thisIndex'
p17464
g36
(g38
S'\x00\x00\x00\x00'
tRp17465
sg22
V
sS'trials_2.thisRepN'
p17466
I2
sS'trials_2.thisTrialN'
p17467
I0
sS'trials.thisRepN'
p17468
I231
sS'trials_2.thisTrial'
p17469
NsS'trials.thisN'
p17470
I462
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17471
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17472
I0
sS'trials_2.thisN'
p17473
I2
sa(dp17474
g20
g21
sS'trials.thisIndex'
p17475
g36
(g38
S'\x01\x00\x00\x00'
tRp17476
sg22
V
sS'trials_2.thisRepN'
p17477
I2
sS'trials_2.thisTrialN'
p17478
I0
sS'trials.thisRepN'
p17479
I231
sS'trials_2.thisTrial'
p17480
NsS'trials.thisN'
p17481
I463
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17482
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17483
I1
sS'trials_2.thisN'
p17484
I2
sa(dp17485
g20
g21
sS'trials.thisIndex'
p17486
g36
(g38
S'\x00\x00\x00\x00'
tRp17487
sg22
V
sS'trials_2.thisRepN'
p17488
I2
sS'trials_2.thisTrialN'
p17489
I0
sS'trials.thisRepN'
p17490
I232
sS'trials_2.thisTrial'
p17491
NsS'trials.thisN'
p17492
I464
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17493
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17494
I0
sS'trials_2.thisN'
p17495
I2
sa(dp17496
g20
g21
sS'trials.thisIndex'
p17497
g36
(g38
S'\x01\x00\x00\x00'
tRp17498
sg22
V
sS'trials_2.thisRepN'
p17499
I2
sS'trials_2.thisTrialN'
p17500
I0
sS'trials.thisRepN'
p17501
I232
sS'trials_2.thisTrial'
p17502
NsS'trials.thisN'
p17503
I465
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17504
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17505
I1
sS'trials_2.thisN'
p17506
I2
sa(dp17507
g20
g21
sS'trials.thisIndex'
p17508
g36
(g38
S'\x00\x00\x00\x00'
tRp17509
sg22
V
sS'trials_2.thisRepN'
p17510
I2
sS'trials_2.thisTrialN'
p17511
I0
sS'trials.thisRepN'
p17512
I233
sS'trials_2.thisTrial'
p17513
NsS'trials.thisN'
p17514
I466
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17515
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17516
I0
sS'trials_2.thisN'
p17517
I2
sa(dp17518
g20
g21
sS'trials.thisIndex'
p17519
g36
(g38
S'\x01\x00\x00\x00'
tRp17520
sg22
V
sS'trials_2.thisRepN'
p17521
I2
sS'trials_2.thisTrialN'
p17522
I0
sS'trials.thisRepN'
p17523
I233
sS'trials_2.thisTrial'
p17524
NsS'trials.thisN'
p17525
I467
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17526
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17527
I1
sS'trials_2.thisN'
p17528
I2
sa(dp17529
g20
g21
sS'trials.thisIndex'
p17530
g36
(g38
S'\x00\x00\x00\x00'
tRp17531
sg22
V
sS'trials_2.thisRepN'
p17532
I2
sS'trials_2.thisTrialN'
p17533
I0
sS'trials.thisRepN'
p17534
I234
sS'trials_2.thisTrial'
p17535
NsS'trials.thisN'
p17536
I468
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17537
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17538
I0
sS'trials_2.thisN'
p17539
I2
sa(dp17540
g20
g21
sS'trials.thisIndex'
p17541
g36
(g38
S'\x01\x00\x00\x00'
tRp17542
sg22
V
sS'trials_2.thisRepN'
p17543
I2
sS'trials_2.thisTrialN'
p17544
I0
sS'trials.thisRepN'
p17545
I234
sS'trials_2.thisTrial'
p17546
NsS'trials.thisN'
p17547
I469
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17548
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17549
I1
sS'trials_2.thisN'
p17550
I2
sa(dp17551
g20
g21
sS'trials.thisIndex'
p17552
g36
(g38
S'\x00\x00\x00\x00'
tRp17553
sg22
V
sS'trials_2.thisRepN'
p17554
I2
sS'trials_2.thisTrialN'
p17555
I0
sS'trials.thisRepN'
p17556
I235
sS'trials_2.thisTrial'
p17557
NsS'trials.thisN'
p17558
I470
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17559
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17560
I0
sS'trials_2.thisN'
p17561
I2
sa(dp17562
g20
g21
sS'trials.thisIndex'
p17563
g36
(g38
S'\x01\x00\x00\x00'
tRp17564
sg22
V
sS'trials_2.thisRepN'
p17565
I2
sS'trials_2.thisTrialN'
p17566
I0
sS'trials.thisRepN'
p17567
I235
sS'trials_2.thisTrial'
p17568
NsS'trials.thisN'
p17569
I471
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17570
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17571
I1
sS'trials_2.thisN'
p17572
I2
sa(dp17573
g20
g21
sS'trials.thisIndex'
p17574
g36
(g38
S'\x00\x00\x00\x00'
tRp17575
sg22
V
sS'trials_2.thisRepN'
p17576
I2
sS'trials_2.thisTrialN'
p17577
I0
sS'trials.thisRepN'
p17578
I236
sS'trials_2.thisTrial'
p17579
NsS'trials.thisN'
p17580
I472
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17581
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17582
I0
sS'trials_2.thisN'
p17583
I2
sa(dp17584
g20
g21
sS'trials.thisIndex'
p17585
g36
(g38
S'\x01\x00\x00\x00'
tRp17586
sg22
V
sS'trials_2.thisRepN'
p17587
I2
sS'trials_2.thisTrialN'
p17588
I0
sS'trials.thisRepN'
p17589
I236
sS'trials_2.thisTrial'
p17590
NsS'trials.thisN'
p17591
I473
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17592
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17593
I1
sS'trials_2.thisN'
p17594
I2
sa(dp17595
g20
g21
sS'trials.thisIndex'
p17596
g36
(g38
S'\x00\x00\x00\x00'
tRp17597
sg22
V
sS'trials_2.thisRepN'
p17598
I2
sS'trials_2.thisTrialN'
p17599
I0
sS'trials.thisRepN'
p17600
I237
sS'trials_2.thisTrial'
p17601
NsS'trials.thisN'
p17602
I474
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17603
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17604
I0
sS'trials_2.thisN'
p17605
I2
sa(dp17606
g20
g21
sS'trials.thisIndex'
p17607
g36
(g38
S'\x01\x00\x00\x00'
tRp17608
sg22
V
sS'trials_2.thisRepN'
p17609
I2
sS'trials_2.thisTrialN'
p17610
I0
sS'trials.thisRepN'
p17611
I237
sS'trials_2.thisTrial'
p17612
NsS'trials.thisN'
p17613
I475
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17614
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17615
I1
sS'trials_2.thisN'
p17616
I2
sa(dp17617
g20
g21
sS'trials.thisIndex'
p17618
g36
(g38
S'\x00\x00\x00\x00'
tRp17619
sg22
V
sS'trials_2.thisRepN'
p17620
I2
sS'trials_2.thisTrialN'
p17621
I0
sS'trials.thisRepN'
p17622
I238
sS'trials_2.thisTrial'
p17623
NsS'trials.thisN'
p17624
I476
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17625
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17626
I0
sS'trials_2.thisN'
p17627
I2
sa(dp17628
g20
g21
sS'trials.thisIndex'
p17629
g36
(g38
S'\x01\x00\x00\x00'
tRp17630
sg22
V
sS'trials_2.thisRepN'
p17631
I2
sS'trials_2.thisTrialN'
p17632
I0
sS'trials.thisRepN'
p17633
I238
sS'trials_2.thisTrial'
p17634
NsS'trials.thisN'
p17635
I477
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17636
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17637
I1
sS'trials_2.thisN'
p17638
I2
sa(dp17639
g20
g21
sS'trials.thisIndex'
p17640
g36
(g38
S'\x00\x00\x00\x00'
tRp17641
sg22
V
sS'trials_2.thisRepN'
p17642
I2
sS'trials_2.thisTrialN'
p17643
I0
sS'trials.thisRepN'
p17644
I239
sS'trials_2.thisTrial'
p17645
NsS'trials.thisN'
p17646
I478
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17647
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17648
I0
sS'trials_2.thisN'
p17649
I2
sa(dp17650
g20
g21
sS'trials.thisIndex'
p17651
g36
(g38
S'\x01\x00\x00\x00'
tRp17652
sg22
V
sS'trials_2.thisRepN'
p17653
I2
sS'trials_2.thisTrialN'
p17654
I0
sS'trials.thisRepN'
p17655
I239
sS'trials_2.thisTrial'
p17656
NsS'trials.thisN'
p17657
I479
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17658
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17659
I1
sS'trials_2.thisN'
p17660
I2
sa(dp17661
g20
g21
sS'trials.thisIndex'
p17662
g36
(g38
S'\x00\x00\x00\x00'
tRp17663
sg22
V
sS'trials_2.thisRepN'
p17664
I2
sS'trials_2.thisTrialN'
p17665
I0
sS'trials.thisRepN'
p17666
I240
sS'trials_2.thisTrial'
p17667
NsS'trials.thisN'
p17668
I480
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17669
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17670
I0
sS'trials_2.thisN'
p17671
I2
sa(dp17672
g20
g21
sS'trials.thisIndex'
p17673
g36
(g38
S'\x01\x00\x00\x00'
tRp17674
sg22
V
sS'trials_2.thisRepN'
p17675
I2
sS'trials_2.thisTrialN'
p17676
I0
sS'trials.thisRepN'
p17677
I240
sS'trials_2.thisTrial'
p17678
NsS'trials.thisN'
p17679
I481
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17680
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17681
I1
sS'trials_2.thisN'
p17682
I2
sa(dp17683
g20
g21
sS'trials.thisIndex'
p17684
g36
(g38
S'\x00\x00\x00\x00'
tRp17685
sg22
V
sS'trials_2.thisRepN'
p17686
I2
sS'trials_2.thisTrialN'
p17687
I0
sS'trials.thisRepN'
p17688
I241
sS'trials_2.thisTrial'
p17689
NsS'trials.thisN'
p17690
I482
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17691
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17692
I0
sS'trials_2.thisN'
p17693
I2
sa(dp17694
g20
g21
sS'trials.thisIndex'
p17695
g36
(g38
S'\x01\x00\x00\x00'
tRp17696
sg22
V
sS'trials_2.thisRepN'
p17697
I2
sS'trials_2.thisTrialN'
p17698
I0
sS'trials.thisRepN'
p17699
I241
sS'trials_2.thisTrial'
p17700
NsS'trials.thisN'
p17701
I483
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17702
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17703
I1
sS'trials_2.thisN'
p17704
I2
sa(dp17705
g20
g21
sS'trials.thisIndex'
p17706
g36
(g38
S'\x00\x00\x00\x00'
tRp17707
sg22
V
sS'trials_2.thisRepN'
p17708
I2
sS'trials_2.thisTrialN'
p17709
I0
sS'trials.thisRepN'
p17710
I242
sS'trials_2.thisTrial'
p17711
NsS'trials.thisN'
p17712
I484
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17713
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17714
I0
sS'trials_2.thisN'
p17715
I2
sa(dp17716
g20
g21
sS'trials.thisIndex'
p17717
g36
(g38
S'\x01\x00\x00\x00'
tRp17718
sg22
V
sS'trials_2.thisRepN'
p17719
I2
sS'trials_2.thisTrialN'
p17720
I0
sS'trials.thisRepN'
p17721
I242
sS'trials_2.thisTrial'
p17722
NsS'trials.thisN'
p17723
I485
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17724
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17725
I1
sS'trials_2.thisN'
p17726
I2
sa(dp17727
g20
g21
sS'trials.thisIndex'
p17728
g36
(g38
S'\x00\x00\x00\x00'
tRp17729
sg22
V
sS'trials_2.thisRepN'
p17730
I2
sS'trials_2.thisTrialN'
p17731
I0
sS'trials.thisRepN'
p17732
I243
sS'trials_2.thisTrial'
p17733
NsS'trials.thisN'
p17734
I486
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17735
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17736
I0
sS'trials_2.thisN'
p17737
I2
sa(dp17738
g20
g21
sS'trials.thisIndex'
p17739
g36
(g38
S'\x01\x00\x00\x00'
tRp17740
sg22
V
sS'trials_2.thisRepN'
p17741
I2
sS'trials_2.thisTrialN'
p17742
I0
sS'trials.thisRepN'
p17743
I243
sS'trials_2.thisTrial'
p17744
NsS'trials.thisN'
p17745
I487
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17746
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17747
I1
sS'trials_2.thisN'
p17748
I2
sa(dp17749
g20
g21
sS'trials.thisIndex'
p17750
g36
(g38
S'\x00\x00\x00\x00'
tRp17751
sg22
V
sS'trials_2.thisRepN'
p17752
I2
sS'trials_2.thisTrialN'
p17753
I0
sS'trials.thisRepN'
p17754
I244
sS'trials_2.thisTrial'
p17755
NsS'trials.thisN'
p17756
I488
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17757
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17758
I0
sS'trials_2.thisN'
p17759
I2
sa(dp17760
g20
g21
sS'trials.thisIndex'
p17761
g36
(g38
S'\x01\x00\x00\x00'
tRp17762
sg22
V
sS'trials_2.thisRepN'
p17763
I2
sS'trials_2.thisTrialN'
p17764
I0
sS'trials.thisRepN'
p17765
I244
sS'trials_2.thisTrial'
p17766
NsS'trials.thisN'
p17767
I489
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17768
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17769
I1
sS'trials_2.thisN'
p17770
I2
sa(dp17771
g20
g21
sS'trials.thisIndex'
p17772
g36
(g38
S'\x00\x00\x00\x00'
tRp17773
sg22
V
sS'trials_2.thisRepN'
p17774
I2
sS'trials_2.thisTrialN'
p17775
I0
sS'trials.thisRepN'
p17776
I245
sS'trials_2.thisTrial'
p17777
NsS'trials.thisN'
p17778
I490
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17779
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17780
I0
sS'trials_2.thisN'
p17781
I2
sa(dp17782
g20
g21
sS'trials.thisIndex'
p17783
g36
(g38
S'\x01\x00\x00\x00'
tRp17784
sg22
V
sS'trials_2.thisRepN'
p17785
I2
sS'trials_2.thisTrialN'
p17786
I0
sS'trials.thisRepN'
p17787
I245
sS'trials_2.thisTrial'
p17788
NsS'trials.thisN'
p17789
I491
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17790
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17791
I1
sS'trials_2.thisN'
p17792
I2
sa(dp17793
g20
g21
sS'trials.thisIndex'
p17794
g36
(g38
S'\x00\x00\x00\x00'
tRp17795
sg22
V
sS'trials_2.thisRepN'
p17796
I2
sS'trials_2.thisTrialN'
p17797
I0
sS'trials.thisRepN'
p17798
I246
sS'trials_2.thisTrial'
p17799
NsS'trials.thisN'
p17800
I492
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17801
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17802
I0
sS'trials_2.thisN'
p17803
I2
sa(dp17804
g20
g21
sS'trials.thisIndex'
p17805
g36
(g38
S'\x01\x00\x00\x00'
tRp17806
sg22
V
sS'trials_2.thisRepN'
p17807
I2
sS'trials_2.thisTrialN'
p17808
I0
sS'trials.thisRepN'
p17809
I246
sS'trials_2.thisTrial'
p17810
NsS'trials.thisN'
p17811
I493
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17812
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17813
I1
sS'trials_2.thisN'
p17814
I2
sa(dp17815
g20
g21
sS'trials.thisIndex'
p17816
g36
(g38
S'\x00\x00\x00\x00'
tRp17817
sg22
V
sS'trials_2.thisRepN'
p17818
I2
sS'trials_2.thisTrialN'
p17819
I0
sS'trials.thisRepN'
p17820
I247
sS'trials_2.thisTrial'
p17821
NsS'trials.thisN'
p17822
I494
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17823
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17824
I0
sS'trials_2.thisN'
p17825
I2
sa(dp17826
g20
g21
sS'trials.thisIndex'
p17827
g36
(g38
S'\x01\x00\x00\x00'
tRp17828
sg22
V
sS'trials_2.thisRepN'
p17829
I2
sS'trials_2.thisTrialN'
p17830
I0
sS'trials.thisRepN'
p17831
I247
sS'trials_2.thisTrial'
p17832
NsS'trials.thisN'
p17833
I495
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17834
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17835
I1
sS'trials_2.thisN'
p17836
I2
sa(dp17837
g20
g21
sS'trials.thisIndex'
p17838
g36
(g38
S'\x00\x00\x00\x00'
tRp17839
sg22
V
sS'trials_2.thisRepN'
p17840
I2
sS'trials_2.thisTrialN'
p17841
I0
sS'trials.thisRepN'
p17842
I248
sS'trials_2.thisTrial'
p17843
NsS'trials.thisN'
p17844
I496
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17845
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17846
I0
sS'trials_2.thisN'
p17847
I2
sa(dp17848
g20
g21
sS'trials.thisIndex'
p17849
g36
(g38
S'\x01\x00\x00\x00'
tRp17850
sg22
V
sS'trials_2.thisRepN'
p17851
I2
sS'trials_2.thisTrialN'
p17852
I0
sS'trials.thisRepN'
p17853
I248
sS'trials_2.thisTrial'
p17854
NsS'trials.thisN'
p17855
I497
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17856
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17857
I1
sS'trials_2.thisN'
p17858
I2
sa(dp17859
g20
g21
sS'trials.thisIndex'
p17860
g36
(g38
S'\x00\x00\x00\x00'
tRp17861
sg22
V
sS'trials_2.thisRepN'
p17862
I2
sS'trials_2.thisTrialN'
p17863
I0
sS'trials.thisRepN'
p17864
I249
sS'trials_2.thisTrial'
p17865
NsS'trials.thisN'
p17866
I498
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17867
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17868
I0
sS'trials_2.thisN'
p17869
I2
sa(dp17870
g20
g21
sS'trials.thisIndex'
p17871
g36
(g38
S'\x01\x00\x00\x00'
tRp17872
sg22
V
sS'trials_2.thisRepN'
p17873
I2
sS'trials_2.thisTrialN'
p17874
I0
sS'trials.thisRepN'
p17875
I249
sS'trials_2.thisTrial'
p17876
NsS'trials.thisN'
p17877
I499
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17878
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17879
I1
sS'trials_2.thisN'
p17880
I2
sa(dp17881
g20
g21
sS'trials.thisIndex'
p17882
g36
(g38
S'\x00\x00\x00\x00'
tRp17883
sg22
V
sS'trials_2.thisRepN'
p17884
I2
sS'trials_2.thisTrialN'
p17885
I0
sS'trials.thisRepN'
p17886
I250
sS'trials_2.thisTrial'
p17887
NsS'trials.thisN'
p17888
I500
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17889
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17890
I0
sS'trials_2.thisN'
p17891
I2
sa(dp17892
g20
g21
sS'trials.thisIndex'
p17893
g36
(g38
S'\x01\x00\x00\x00'
tRp17894
sg22
V
sS'trials_2.thisRepN'
p17895
I2
sS'trials_2.thisTrialN'
p17896
I0
sS'trials.thisRepN'
p17897
I250
sS'trials_2.thisTrial'
p17898
NsS'trials.thisN'
p17899
I501
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17900
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17901
I1
sS'trials_2.thisN'
p17902
I2
sa(dp17903
g20
g21
sS'trials.thisIndex'
p17904
g36
(g38
S'\x00\x00\x00\x00'
tRp17905
sg22
V
sS'trials_2.thisRepN'
p17906
I2
sS'trials_2.thisTrialN'
p17907
I0
sS'trials.thisRepN'
p17908
I251
sS'trials_2.thisTrial'
p17909
NsS'trials.thisN'
p17910
I502
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17911
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17912
I0
sS'trials_2.thisN'
p17913
I2
sa(dp17914
g20
g21
sS'trials.thisIndex'
p17915
g36
(g38
S'\x01\x00\x00\x00'
tRp17916
sg22
V
sS'trials_2.thisRepN'
p17917
I2
sS'trials_2.thisTrialN'
p17918
I0
sS'trials.thisRepN'
p17919
I251
sS'trials_2.thisTrial'
p17920
NsS'trials.thisN'
p17921
I503
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17922
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17923
I1
sS'trials_2.thisN'
p17924
I2
sa(dp17925
g20
g21
sS'trials.thisIndex'
p17926
g36
(g38
S'\x00\x00\x00\x00'
tRp17927
sg22
V
sS'trials_2.thisRepN'
p17928
I2
sS'trials_2.thisTrialN'
p17929
I0
sS'trials.thisRepN'
p17930
I252
sS'trials_2.thisTrial'
p17931
NsS'trials.thisN'
p17932
I504
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17933
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17934
I0
sS'trials_2.thisN'
p17935
I2
sa(dp17936
g20
g21
sS'trials.thisIndex'
p17937
g36
(g38
S'\x01\x00\x00\x00'
tRp17938
sg22
V
sS'trials_2.thisRepN'
p17939
I2
sS'trials_2.thisTrialN'
p17940
I0
sS'trials.thisRepN'
p17941
I252
sS'trials_2.thisTrial'
p17942
NsS'trials.thisN'
p17943
I505
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17944
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17945
I1
sS'trials_2.thisN'
p17946
I2
sa(dp17947
g20
g21
sS'trials.thisIndex'
p17948
g36
(g38
S'\x00\x00\x00\x00'
tRp17949
sg22
V
sS'trials_2.thisRepN'
p17950
I2
sS'trials_2.thisTrialN'
p17951
I0
sS'trials.thisRepN'
p17952
I253
sS'trials_2.thisTrial'
p17953
NsS'trials.thisN'
p17954
I506
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17955
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17956
I0
sS'trials_2.thisN'
p17957
I2
sa(dp17958
g20
g21
sS'trials.thisIndex'
p17959
g36
(g38
S'\x01\x00\x00\x00'
tRp17960
sg22
V
sS'trials_2.thisRepN'
p17961
I2
sS'trials_2.thisTrialN'
p17962
I0
sS'trials.thisRepN'
p17963
I253
sS'trials_2.thisTrial'
p17964
NsS'trials.thisN'
p17965
I507
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17966
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17967
I1
sS'trials_2.thisN'
p17968
I2
sa(dp17969
g20
g21
sS'trials.thisIndex'
p17970
g36
(g38
S'\x00\x00\x00\x00'
tRp17971
sg22
V
sS'trials_2.thisRepN'
p17972
I2
sS'trials_2.thisTrialN'
p17973
I0
sS'trials.thisRepN'
p17974
I254
sS'trials_2.thisTrial'
p17975
NsS'trials.thisN'
p17976
I508
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17977
g12386
sg12387
g12388
sS'trials.thisTrialN'
p17978
I0
sS'trials_2.thisN'
p17979
I2
sa(dp17980
g20
g21
sS'trials.thisIndex'
p17981
g36
(g38
S'\x01\x00\x00\x00'
tRp17982
sg22
V
sS'trials_2.thisRepN'
p17983
I2
sS'trials_2.thisTrialN'
p17984
I0
sS'trials.thisRepN'
p17985
I254
sS'trials_2.thisTrial'
p17986
NsS'trials.thisN'
p17987
I509
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17988
g12386
sg12387
g12400
sS'trials.thisTrialN'
p17989
I1
sS'trials_2.thisN'
p17990
I2
sa(dp17991
g20
g21
sS'trials.thisIndex'
p17992
g36
(g38
S'\x00\x00\x00\x00'
tRp17993
sg22
V
sS'trials_2.thisRepN'
p17994
I2
sS'trials_2.thisTrialN'
p17995
I0
sS'trials.thisRepN'
p17996
I255
sS'trials_2.thisTrial'
p17997
NsS'trials.thisN'
p17998
I510
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p17999
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18000
I0
sS'trials_2.thisN'
p18001
I2
sa(dp18002
g20
g21
sS'trials.thisIndex'
p18003
g36
(g38
S'\x01\x00\x00\x00'
tRp18004
sg22
V
sS'trials_2.thisRepN'
p18005
I2
sS'trials_2.thisTrialN'
p18006
I0
sS'trials.thisRepN'
p18007
I255
sS'trials_2.thisTrial'
p18008
NsS'trials.thisN'
p18009
I511
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18010
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18011
I1
sS'trials_2.thisN'
p18012
I2
sa(dp18013
g20
g21
sS'trials.thisIndex'
p18014
g36
(g38
S'\x00\x00\x00\x00'
tRp18015
sg22
V
sS'trials_2.thisRepN'
p18016
I2
sS'trials_2.thisTrialN'
p18017
I0
sS'trials.thisRepN'
p18018
I256
sS'trials_2.thisTrial'
p18019
NsS'trials.thisN'
p18020
I512
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18021
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18022
I0
sS'trials_2.thisN'
p18023
I2
sa(dp18024
g20
g21
sS'trials.thisIndex'
p18025
g36
(g38
S'\x01\x00\x00\x00'
tRp18026
sg22
V
sS'trials_2.thisRepN'
p18027
I2
sS'trials_2.thisTrialN'
p18028
I0
sS'trials.thisRepN'
p18029
I256
sS'trials_2.thisTrial'
p18030
NsS'trials.thisN'
p18031
I513
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18032
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18033
I1
sS'trials_2.thisN'
p18034
I2
sa(dp18035
g20
g21
sS'trials.thisIndex'
p18036
g36
(g38
S'\x00\x00\x00\x00'
tRp18037
sg22
V
sS'trials_2.thisRepN'
p18038
I2
sS'trials_2.thisTrialN'
p18039
I0
sS'trials.thisRepN'
p18040
I257
sS'trials_2.thisTrial'
p18041
NsS'trials.thisN'
p18042
I514
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18043
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18044
I0
sS'trials_2.thisN'
p18045
I2
sa(dp18046
g20
g21
sS'trials.thisIndex'
p18047
g36
(g38
S'\x01\x00\x00\x00'
tRp18048
sg22
V
sS'trials_2.thisRepN'
p18049
I2
sS'trials_2.thisTrialN'
p18050
I0
sS'trials.thisRepN'
p18051
I257
sS'trials_2.thisTrial'
p18052
NsS'trials.thisN'
p18053
I515
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18054
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18055
I1
sS'trials_2.thisN'
p18056
I2
sa(dp18057
g20
g21
sS'trials.thisIndex'
p18058
g36
(g38
S'\x00\x00\x00\x00'
tRp18059
sg22
V
sS'trials_2.thisRepN'
p18060
I2
sS'trials_2.thisTrialN'
p18061
I0
sS'trials.thisRepN'
p18062
I258
sS'trials_2.thisTrial'
p18063
NsS'trials.thisN'
p18064
I516
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18065
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18066
I0
sS'trials_2.thisN'
p18067
I2
sa(dp18068
g20
g21
sS'trials.thisIndex'
p18069
g36
(g38
S'\x01\x00\x00\x00'
tRp18070
sg22
V
sS'trials_2.thisRepN'
p18071
I2
sS'trials_2.thisTrialN'
p18072
I0
sS'trials.thisRepN'
p18073
I258
sS'trials_2.thisTrial'
p18074
NsS'trials.thisN'
p18075
I517
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18076
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18077
I1
sS'trials_2.thisN'
p18078
I2
sa(dp18079
g20
g21
sS'trials.thisIndex'
p18080
g36
(g38
S'\x00\x00\x00\x00'
tRp18081
sg22
V
sS'trials_2.thisRepN'
p18082
I2
sS'trials_2.thisTrialN'
p18083
I0
sS'trials.thisRepN'
p18084
I259
sS'trials_2.thisTrial'
p18085
NsS'trials.thisN'
p18086
I518
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18087
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18088
I0
sS'trials_2.thisN'
p18089
I2
sa(dp18090
g20
g21
sS'trials.thisIndex'
p18091
g36
(g38
S'\x01\x00\x00\x00'
tRp18092
sg22
V
sS'trials_2.thisRepN'
p18093
I2
sS'trials_2.thisTrialN'
p18094
I0
sS'trials.thisRepN'
p18095
I259
sS'trials_2.thisTrial'
p18096
NsS'trials.thisN'
p18097
I519
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18098
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18099
I1
sS'trials_2.thisN'
p18100
I2
sa(dp18101
g20
g21
sS'trials.thisIndex'
p18102
g36
(g38
S'\x00\x00\x00\x00'
tRp18103
sg22
V
sS'trials_2.thisRepN'
p18104
I2
sS'trials_2.thisTrialN'
p18105
I0
sS'trials.thisRepN'
p18106
I260
sS'trials_2.thisTrial'
p18107
NsS'trials.thisN'
p18108
I520
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18109
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18110
I0
sS'trials_2.thisN'
p18111
I2
sa(dp18112
g20
g21
sS'trials.thisIndex'
p18113
g36
(g38
S'\x01\x00\x00\x00'
tRp18114
sg22
V
sS'trials_2.thisRepN'
p18115
I2
sS'trials_2.thisTrialN'
p18116
I0
sS'trials.thisRepN'
p18117
I260
sS'trials_2.thisTrial'
p18118
NsS'trials.thisN'
p18119
I521
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18120
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18121
I1
sS'trials_2.thisN'
p18122
I2
sa(dp18123
g20
g21
sS'trials.thisIndex'
p18124
g36
(g38
S'\x00\x00\x00\x00'
tRp18125
sg22
V
sS'trials_2.thisRepN'
p18126
I2
sS'trials_2.thisTrialN'
p18127
I0
sS'trials.thisRepN'
p18128
I261
sS'trials_2.thisTrial'
p18129
NsS'trials.thisN'
p18130
I522
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18131
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18132
I0
sS'trials_2.thisN'
p18133
I2
sa(dp18134
g20
g21
sS'trials.thisIndex'
p18135
g36
(g38
S'\x01\x00\x00\x00'
tRp18136
sg22
V
sS'trials_2.thisRepN'
p18137
I2
sS'trials_2.thisTrialN'
p18138
I0
sS'trials.thisRepN'
p18139
I261
sS'trials_2.thisTrial'
p18140
NsS'trials.thisN'
p18141
I523
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18142
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18143
I1
sS'trials_2.thisN'
p18144
I2
sa(dp18145
g20
g21
sS'trials.thisIndex'
p18146
g36
(g38
S'\x00\x00\x00\x00'
tRp18147
sg22
V
sS'trials_2.thisRepN'
p18148
I2
sS'trials_2.thisTrialN'
p18149
I0
sS'trials.thisRepN'
p18150
I262
sS'trials_2.thisTrial'
p18151
NsS'trials.thisN'
p18152
I524
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18153
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18154
I0
sS'trials_2.thisN'
p18155
I2
sa(dp18156
g20
g21
sS'trials.thisIndex'
p18157
g36
(g38
S'\x01\x00\x00\x00'
tRp18158
sg22
V
sS'trials_2.thisRepN'
p18159
I2
sS'trials_2.thisTrialN'
p18160
I0
sS'trials.thisRepN'
p18161
I262
sS'trials_2.thisTrial'
p18162
NsS'trials.thisN'
p18163
I525
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18164
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18165
I1
sS'trials_2.thisN'
p18166
I2
sa(dp18167
g20
g21
sS'trials.thisIndex'
p18168
g36
(g38
S'\x00\x00\x00\x00'
tRp18169
sg22
V
sS'trials_2.thisRepN'
p18170
I2
sS'trials_2.thisTrialN'
p18171
I0
sS'trials.thisRepN'
p18172
I263
sS'trials_2.thisTrial'
p18173
NsS'trials.thisN'
p18174
I526
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18175
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18176
I0
sS'trials_2.thisN'
p18177
I2
sa(dp18178
g20
g21
sS'trials.thisIndex'
p18179
g36
(g38
S'\x01\x00\x00\x00'
tRp18180
sg22
V
sS'trials_2.thisRepN'
p18181
I2
sS'trials_2.thisTrialN'
p18182
I0
sS'trials.thisRepN'
p18183
I263
sS'trials_2.thisTrial'
p18184
NsS'trials.thisN'
p18185
I527
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18186
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18187
I1
sS'trials_2.thisN'
p18188
I2
sa(dp18189
g20
g21
sS'trials.thisIndex'
p18190
g36
(g38
S'\x00\x00\x00\x00'
tRp18191
sg22
V
sS'trials_2.thisRepN'
p18192
I2
sS'trials_2.thisTrialN'
p18193
I0
sS'trials.thisRepN'
p18194
I264
sS'trials_2.thisTrial'
p18195
NsS'trials.thisN'
p18196
I528
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18197
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18198
I0
sS'trials_2.thisN'
p18199
I2
sa(dp18200
g20
g21
sS'trials.thisIndex'
p18201
g36
(g38
S'\x01\x00\x00\x00'
tRp18202
sg22
V
sS'trials_2.thisRepN'
p18203
I2
sS'trials_2.thisTrialN'
p18204
I0
sS'trials.thisRepN'
p18205
I264
sS'trials_2.thisTrial'
p18206
NsS'trials.thisN'
p18207
I529
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18208
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18209
I1
sS'trials_2.thisN'
p18210
I2
sa(dp18211
g20
g21
sS'trials.thisIndex'
p18212
g36
(g38
S'\x00\x00\x00\x00'
tRp18213
sg22
V
sS'trials_2.thisRepN'
p18214
I2
sS'trials_2.thisTrialN'
p18215
I0
sS'trials.thisRepN'
p18216
I265
sS'trials_2.thisTrial'
p18217
NsS'trials.thisN'
p18218
I530
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18219
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18220
I0
sS'trials_2.thisN'
p18221
I2
sa(dp18222
g20
g21
sS'trials.thisIndex'
p18223
g36
(g38
S'\x01\x00\x00\x00'
tRp18224
sg22
V
sS'trials_2.thisRepN'
p18225
I2
sS'trials_2.thisTrialN'
p18226
I0
sS'trials.thisRepN'
p18227
I265
sS'trials_2.thisTrial'
p18228
NsS'trials.thisN'
p18229
I531
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18230
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18231
I1
sS'trials_2.thisN'
p18232
I2
sa(dp18233
g20
g21
sS'trials.thisIndex'
p18234
g36
(g38
S'\x00\x00\x00\x00'
tRp18235
sg22
V
sS'trials_2.thisRepN'
p18236
I2
sS'trials_2.thisTrialN'
p18237
I0
sS'trials.thisRepN'
p18238
I266
sS'trials_2.thisTrial'
p18239
NsS'trials.thisN'
p18240
I532
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18241
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18242
I0
sS'trials_2.thisN'
p18243
I2
sa(dp18244
g20
g21
sS'trials.thisIndex'
p18245
g36
(g38
S'\x01\x00\x00\x00'
tRp18246
sg22
V
sS'trials_2.thisRepN'
p18247
I2
sS'trials_2.thisTrialN'
p18248
I0
sS'trials.thisRepN'
p18249
I266
sS'trials_2.thisTrial'
p18250
NsS'trials.thisN'
p18251
I533
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18252
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18253
I1
sS'trials_2.thisN'
p18254
I2
sa(dp18255
g20
g21
sS'trials.thisIndex'
p18256
g36
(g38
S'\x00\x00\x00\x00'
tRp18257
sg22
V
sS'trials_2.thisRepN'
p18258
I2
sS'trials_2.thisTrialN'
p18259
I0
sS'trials.thisRepN'
p18260
I267
sS'trials_2.thisTrial'
p18261
NsS'trials.thisN'
p18262
I534
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18263
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18264
I0
sS'trials_2.thisN'
p18265
I2
sa(dp18266
g20
g21
sS'trials.thisIndex'
p18267
g36
(g38
S'\x01\x00\x00\x00'
tRp18268
sg22
V
sS'trials_2.thisRepN'
p18269
I2
sS'trials_2.thisTrialN'
p18270
I0
sS'trials.thisRepN'
p18271
I267
sS'trials_2.thisTrial'
p18272
NsS'trials.thisN'
p18273
I535
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18274
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18275
I1
sS'trials_2.thisN'
p18276
I2
sa(dp18277
g20
g21
sS'trials.thisIndex'
p18278
g36
(g38
S'\x00\x00\x00\x00'
tRp18279
sg22
V
sS'trials_2.thisRepN'
p18280
I2
sS'trials_2.thisTrialN'
p18281
I0
sS'trials.thisRepN'
p18282
I268
sS'trials_2.thisTrial'
p18283
NsS'trials.thisN'
p18284
I536
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18285
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18286
I0
sS'trials_2.thisN'
p18287
I2
sa(dp18288
g20
g21
sS'trials.thisIndex'
p18289
g36
(g38
S'\x01\x00\x00\x00'
tRp18290
sg22
V
sS'trials_2.thisRepN'
p18291
I2
sS'trials_2.thisTrialN'
p18292
I0
sS'trials.thisRepN'
p18293
I268
sS'trials_2.thisTrial'
p18294
NsS'trials.thisN'
p18295
I537
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18296
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18297
I1
sS'trials_2.thisN'
p18298
I2
sa(dp18299
g20
g21
sS'trials.thisIndex'
p18300
g36
(g38
S'\x00\x00\x00\x00'
tRp18301
sg22
V
sS'trials_2.thisRepN'
p18302
I2
sS'trials_2.thisTrialN'
p18303
I0
sS'trials.thisRepN'
p18304
I269
sS'trials_2.thisTrial'
p18305
NsS'trials.thisN'
p18306
I538
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18307
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18308
I0
sS'trials_2.thisN'
p18309
I2
sa(dp18310
g20
g21
sS'trials.thisIndex'
p18311
g36
(g38
S'\x01\x00\x00\x00'
tRp18312
sg22
V
sS'trials_2.thisRepN'
p18313
I2
sS'trials_2.thisTrialN'
p18314
I0
sS'trials.thisRepN'
p18315
I269
sS'trials_2.thisTrial'
p18316
NsS'trials.thisN'
p18317
I539
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18318
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18319
I1
sS'trials_2.thisN'
p18320
I2
sa(dp18321
g20
g21
sS'trials.thisIndex'
p18322
g36
(g38
S'\x00\x00\x00\x00'
tRp18323
sg22
V
sS'trials_2.thisRepN'
p18324
I2
sS'trials_2.thisTrialN'
p18325
I0
sS'trials.thisRepN'
p18326
I270
sS'trials_2.thisTrial'
p18327
NsS'trials.thisN'
p18328
I540
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18329
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18330
I0
sS'trials_2.thisN'
p18331
I2
sa(dp18332
g20
g21
sS'trials.thisIndex'
p18333
g36
(g38
S'\x01\x00\x00\x00'
tRp18334
sg22
V
sS'trials_2.thisRepN'
p18335
I2
sS'trials_2.thisTrialN'
p18336
I0
sS'trials.thisRepN'
p18337
I270
sS'trials_2.thisTrial'
p18338
NsS'trials.thisN'
p18339
I541
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18340
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18341
I1
sS'trials_2.thisN'
p18342
I2
sa(dp18343
g20
g21
sS'trials.thisIndex'
p18344
g36
(g38
S'\x00\x00\x00\x00'
tRp18345
sg22
V
sS'trials_2.thisRepN'
p18346
I2
sS'trials_2.thisTrialN'
p18347
I0
sS'trials.thisRepN'
p18348
I271
sS'trials_2.thisTrial'
p18349
NsS'trials.thisN'
p18350
I542
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18351
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18352
I0
sS'trials_2.thisN'
p18353
I2
sa(dp18354
g20
g21
sS'trials.thisIndex'
p18355
g36
(g38
S'\x01\x00\x00\x00'
tRp18356
sg22
V
sS'trials_2.thisRepN'
p18357
I2
sS'trials_2.thisTrialN'
p18358
I0
sS'trials.thisRepN'
p18359
I271
sS'trials_2.thisTrial'
p18360
NsS'trials.thisN'
p18361
I543
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18362
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18363
I1
sS'trials_2.thisN'
p18364
I2
sa(dp18365
g20
g21
sS'trials.thisIndex'
p18366
g36
(g38
S'\x00\x00\x00\x00'
tRp18367
sg22
V
sS'trials_2.thisRepN'
p18368
I2
sS'trials_2.thisTrialN'
p18369
I0
sS'trials.thisRepN'
p18370
I272
sS'trials_2.thisTrial'
p18371
NsS'trials.thisN'
p18372
I544
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18373
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18374
I0
sS'trials_2.thisN'
p18375
I2
sa(dp18376
g20
g21
sS'trials.thisIndex'
p18377
g36
(g38
S'\x01\x00\x00\x00'
tRp18378
sg22
V
sS'trials_2.thisRepN'
p18379
I2
sS'trials_2.thisTrialN'
p18380
I0
sS'trials.thisRepN'
p18381
I272
sS'trials_2.thisTrial'
p18382
NsS'trials.thisN'
p18383
I545
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18384
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18385
I1
sS'trials_2.thisN'
p18386
I2
sa(dp18387
g20
g21
sS'trials.thisIndex'
p18388
g36
(g38
S'\x00\x00\x00\x00'
tRp18389
sg22
V
sS'trials_2.thisRepN'
p18390
I2
sS'trials_2.thisTrialN'
p18391
I0
sS'trials.thisRepN'
p18392
I273
sS'trials_2.thisTrial'
p18393
NsS'trials.thisN'
p18394
I546
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18395
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18396
I0
sS'trials_2.thisN'
p18397
I2
sa(dp18398
g20
g21
sS'trials.thisIndex'
p18399
g36
(g38
S'\x01\x00\x00\x00'
tRp18400
sg22
V
sS'trials_2.thisRepN'
p18401
I2
sS'trials_2.thisTrialN'
p18402
I0
sS'trials.thisRepN'
p18403
I273
sS'trials_2.thisTrial'
p18404
NsS'trials.thisN'
p18405
I547
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18406
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18407
I1
sS'trials_2.thisN'
p18408
I2
sa(dp18409
g20
g21
sS'trials.thisIndex'
p18410
g36
(g38
S'\x00\x00\x00\x00'
tRp18411
sg22
V
sS'trials_2.thisRepN'
p18412
I2
sS'trials_2.thisTrialN'
p18413
I0
sS'trials.thisRepN'
p18414
I274
sS'trials_2.thisTrial'
p18415
NsS'trials.thisN'
p18416
I548
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18417
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18418
I0
sS'trials_2.thisN'
p18419
I2
sa(dp18420
g20
g21
sS'trials.thisIndex'
p18421
g36
(g38
S'\x01\x00\x00\x00'
tRp18422
sg22
V
sS'trials_2.thisRepN'
p18423
I2
sS'trials_2.thisTrialN'
p18424
I0
sS'trials.thisRepN'
p18425
I274
sS'trials_2.thisTrial'
p18426
NsS'trials.thisN'
p18427
I549
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18428
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18429
I1
sS'trials_2.thisN'
p18430
I2
sa(dp18431
g20
g21
sS'trials.thisIndex'
p18432
g36
(g38
S'\x00\x00\x00\x00'
tRp18433
sg22
V
sS'trials_2.thisRepN'
p18434
I2
sS'trials_2.thisTrialN'
p18435
I0
sS'trials.thisRepN'
p18436
I275
sS'trials_2.thisTrial'
p18437
NsS'trials.thisN'
p18438
I550
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18439
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18440
I0
sS'trials_2.thisN'
p18441
I2
sa(dp18442
g20
g21
sS'trials.thisIndex'
p18443
g36
(g38
S'\x01\x00\x00\x00'
tRp18444
sg22
V
sS'trials_2.thisRepN'
p18445
I2
sS'trials_2.thisTrialN'
p18446
I0
sS'trials.thisRepN'
p18447
I275
sS'trials_2.thisTrial'
p18448
NsS'trials.thisN'
p18449
I551
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18450
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18451
I1
sS'trials_2.thisN'
p18452
I2
sa(dp18453
g20
g21
sS'trials.thisIndex'
p18454
g36
(g38
S'\x00\x00\x00\x00'
tRp18455
sg22
V
sS'trials_2.thisRepN'
p18456
I2
sS'trials_2.thisTrialN'
p18457
I0
sS'trials.thisRepN'
p18458
I276
sS'trials_2.thisTrial'
p18459
NsS'trials.thisN'
p18460
I552
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18461
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18462
I0
sS'trials_2.thisN'
p18463
I2
sa(dp18464
g20
g21
sS'trials.thisIndex'
p18465
g36
(g38
S'\x01\x00\x00\x00'
tRp18466
sg22
V
sS'trials_2.thisRepN'
p18467
I2
sS'trials_2.thisTrialN'
p18468
I0
sS'trials.thisRepN'
p18469
I276
sS'trials_2.thisTrial'
p18470
NsS'trials.thisN'
p18471
I553
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18472
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18473
I1
sS'trials_2.thisN'
p18474
I2
sa(dp18475
g20
g21
sS'trials.thisIndex'
p18476
g36
(g38
S'\x00\x00\x00\x00'
tRp18477
sg22
V
sS'trials_2.thisRepN'
p18478
I2
sS'trials_2.thisTrialN'
p18479
I0
sS'trials.thisRepN'
p18480
I277
sS'trials_2.thisTrial'
p18481
NsS'trials.thisN'
p18482
I554
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18483
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18484
I0
sS'trials_2.thisN'
p18485
I2
sa(dp18486
g20
g21
sS'trials.thisIndex'
p18487
g36
(g38
S'\x01\x00\x00\x00'
tRp18488
sg22
V
sS'trials_2.thisRepN'
p18489
I2
sS'trials_2.thisTrialN'
p18490
I0
sS'trials.thisRepN'
p18491
I277
sS'trials_2.thisTrial'
p18492
NsS'trials.thisN'
p18493
I555
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18494
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18495
I1
sS'trials_2.thisN'
p18496
I2
sa(dp18497
g20
g21
sS'trials.thisIndex'
p18498
g36
(g38
S'\x00\x00\x00\x00'
tRp18499
sg22
V
sS'trials_2.thisRepN'
p18500
I2
sS'trials_2.thisTrialN'
p18501
I0
sS'trials.thisRepN'
p18502
I278
sS'trials_2.thisTrial'
p18503
NsS'trials.thisN'
p18504
I556
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18505
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18506
I0
sS'trials_2.thisN'
p18507
I2
sa(dp18508
g20
g21
sS'trials.thisIndex'
p18509
g36
(g38
S'\x01\x00\x00\x00'
tRp18510
sg22
V
sS'trials_2.thisRepN'
p18511
I2
sS'trials_2.thisTrialN'
p18512
I0
sS'trials.thisRepN'
p18513
I278
sS'trials_2.thisTrial'
p18514
NsS'trials.thisN'
p18515
I557
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18516
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18517
I1
sS'trials_2.thisN'
p18518
I2
sa(dp18519
g20
g21
sS'trials.thisIndex'
p18520
g36
(g38
S'\x00\x00\x00\x00'
tRp18521
sg22
V
sS'trials_2.thisRepN'
p18522
I2
sS'trials_2.thisTrialN'
p18523
I0
sS'trials.thisRepN'
p18524
I279
sS'trials_2.thisTrial'
p18525
NsS'trials.thisN'
p18526
I558
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18527
g12386
sg12387
g12388
sS'trials.thisTrialN'
p18528
I0
sS'trials_2.thisN'
p18529
I2
sa(dp18530
g20
g21
sS'trials.thisIndex'
p18531
g36
(g38
S'\x01\x00\x00\x00'
tRp18532
sg22
V
sS'trials_2.thisRepN'
p18533
I2
sS'trials_2.thisTrialN'
p18534
I0
sS'trials.thisRepN'
p18535
I279
sS'trials_2.thisTrial'
p18536
NsS'trials.thisN'
p18537
I559
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18538
g12386
sg12387
g12400
sS'trials.thisTrialN'
p18539
I1
sS'trials_2.thisN'
p18540
I2
sa(dp18541
g20
g21
sg22
V
sS'trials_2.thisRepN'
p18542
I2
sS'trials_2.thisTrialN'
p18543
I0
sS'trials_2.thisTrial'
p18544
Nsg19
g11
sS'trials_2.thisIndex'
p18545
g12386
sg17
g18
sS'trials_2.thisN'
p18546
I2
sa(dp18547
g20
g21
sS'trials.thisIndex'
p18548
g36
(g38
S'\x00\x00\x00\x00'
tRp18549
sg22
V
sS'trials_2.thisRepN'
p18550
I3
sS'trials_2.thisTrialN'
p18551
I0
sS'trials.thisRepN'
p18552
I0
sS'trials_2.thisTrial'
p18553
NsS'trials.thisN'
p18554
I0
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18555
g36
(g38
S'\x00\x00\x00\x00'
tRp18556
sS'phase'
p18557
g36
(g47
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp18558
sS'trials.thisTrialN'
p18559
I0
sS'trials_2.thisN'
p18560
I3
sa(dp18561
g20
g21
sS'trials.thisIndex'
p18562
g36
(g38
S'\x01\x00\x00\x00'
tRp18563
sg22
V
sS'trials_2.thisRepN'
p18564
I3
sS'trials_2.thisTrialN'
p18565
I0
sS'trials.thisRepN'
p18566
I0
sS'trials_2.thisTrial'
p18567
NsS'trials.thisN'
p18568
I1
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18569
g18556
sg18557
g36
(g47
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp18570
sS'trials.thisTrialN'
p18571
I1
sS'trials_2.thisN'
p18572
I3
sa(dp18573
g20
g21
sS'trials.thisIndex'
p18574
g36
(g38
S'\x00\x00\x00\x00'
tRp18575
sg22
V
sS'trials_2.thisRepN'
p18576
I3
sS'trials_2.thisTrialN'
p18577
I0
sS'trials.thisRepN'
p18578
I1
sS'trials_2.thisTrial'
p18579
NsS'trials.thisN'
p18580
I2
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18581
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18582
I0
sS'trials_2.thisN'
p18583
I3
sa(dp18584
g20
g21
sS'trials.thisIndex'
p18585
g36
(g38
S'\x01\x00\x00\x00'
tRp18586
sg22
V
sS'trials_2.thisRepN'
p18587
I3
sS'trials_2.thisTrialN'
p18588
I0
sS'trials.thisRepN'
p18589
I1
sS'trials_2.thisTrial'
p18590
NsS'trials.thisN'
p18591
I3
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18592
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18593
I1
sS'trials_2.thisN'
p18594
I3
sa(dp18595
g20
g21
sS'trials.thisIndex'
p18596
g36
(g38
S'\x00\x00\x00\x00'
tRp18597
sg22
V
sS'trials_2.thisRepN'
p18598
I3
sS'trials_2.thisTrialN'
p18599
I0
sS'trials.thisRepN'
p18600
I2
sS'trials_2.thisTrial'
p18601
NsS'trials.thisN'
p18602
I4
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18603
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18604
I0
sS'trials_2.thisN'
p18605
I3
sa(dp18606
g20
g21
sS'trials.thisIndex'
p18607
g36
(g38
S'\x01\x00\x00\x00'
tRp18608
sg22
V
sS'trials_2.thisRepN'
p18609
I3
sS'trials_2.thisTrialN'
p18610
I0
sS'trials.thisRepN'
p18611
I2
sS'trials_2.thisTrial'
p18612
NsS'trials.thisN'
p18613
I5
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18614
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18615
I1
sS'trials_2.thisN'
p18616
I3
sa(dp18617
g20
g21
sS'trials.thisIndex'
p18618
g36
(g38
S'\x00\x00\x00\x00'
tRp18619
sg22
V
sS'trials_2.thisRepN'
p18620
I3
sS'trials_2.thisTrialN'
p18621
I0
sS'trials.thisRepN'
p18622
I3
sS'trials_2.thisTrial'
p18623
NsS'trials.thisN'
p18624
I6
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18625
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18626
I0
sS'trials_2.thisN'
p18627
I3
sa(dp18628
g20
g21
sS'trials.thisIndex'
p18629
g36
(g38
S'\x01\x00\x00\x00'
tRp18630
sg22
V
sS'trials_2.thisRepN'
p18631
I3
sS'trials_2.thisTrialN'
p18632
I0
sS'trials.thisRepN'
p18633
I3
sS'trials_2.thisTrial'
p18634
NsS'trials.thisN'
p18635
I7
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18636
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18637
I1
sS'trials_2.thisN'
p18638
I3
sa(dp18639
g20
g21
sS'trials.thisIndex'
p18640
g36
(g38
S'\x00\x00\x00\x00'
tRp18641
sg22
V
sS'trials_2.thisRepN'
p18642
I3
sS'trials_2.thisTrialN'
p18643
I0
sS'trials.thisRepN'
p18644
I4
sS'trials_2.thisTrial'
p18645
NsS'trials.thisN'
p18646
I8
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18647
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18648
I0
sS'trials_2.thisN'
p18649
I3
sa(dp18650
g20
g21
sS'trials.thisIndex'
p18651
g36
(g38
S'\x01\x00\x00\x00'
tRp18652
sg22
V
sS'trials_2.thisRepN'
p18653
I3
sS'trials_2.thisTrialN'
p18654
I0
sS'trials.thisRepN'
p18655
I4
sS'trials_2.thisTrial'
p18656
NsS'trials.thisN'
p18657
I9
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18658
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18659
I1
sS'trials_2.thisN'
p18660
I3
sa(dp18661
g20
g21
sS'trials.thisIndex'
p18662
g36
(g38
S'\x00\x00\x00\x00'
tRp18663
sg22
V
sS'trials_2.thisRepN'
p18664
I3
sS'trials_2.thisTrialN'
p18665
I0
sS'trials.thisRepN'
p18666
I5
sS'trials_2.thisTrial'
p18667
NsS'trials.thisN'
p18668
I10
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18669
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18670
I0
sS'trials_2.thisN'
p18671
I3
sa(dp18672
g20
g21
sS'trials.thisIndex'
p18673
g36
(g38
S'\x01\x00\x00\x00'
tRp18674
sg22
V
sS'trials_2.thisRepN'
p18675
I3
sS'trials_2.thisTrialN'
p18676
I0
sS'trials.thisRepN'
p18677
I5
sS'trials_2.thisTrial'
p18678
NsS'trials.thisN'
p18679
I11
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18680
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18681
I1
sS'trials_2.thisN'
p18682
I3
sa(dp18683
g20
g21
sS'trials.thisIndex'
p18684
g36
(g38
S'\x00\x00\x00\x00'
tRp18685
sg22
V
sS'trials_2.thisRepN'
p18686
I3
sS'trials_2.thisTrialN'
p18687
I0
sS'trials.thisRepN'
p18688
I6
sS'trials_2.thisTrial'
p18689
NsS'trials.thisN'
p18690
I12
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18691
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18692
I0
sS'trials_2.thisN'
p18693
I3
sa(dp18694
g20
g21
sS'trials.thisIndex'
p18695
g36
(g38
S'\x01\x00\x00\x00'
tRp18696
sg22
V
sS'trials_2.thisRepN'
p18697
I3
sS'trials_2.thisTrialN'
p18698
I0
sS'trials.thisRepN'
p18699
I6
sS'trials_2.thisTrial'
p18700
NsS'trials.thisN'
p18701
I13
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18702
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18703
I1
sS'trials_2.thisN'
p18704
I3
sa(dp18705
g20
g21
sS'trials.thisIndex'
p18706
g36
(g38
S'\x00\x00\x00\x00'
tRp18707
sg22
V
sS'trials_2.thisRepN'
p18708
I3
sS'trials_2.thisTrialN'
p18709
I0
sS'trials.thisRepN'
p18710
I7
sS'trials_2.thisTrial'
p18711
NsS'trials.thisN'
p18712
I14
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18713
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18714
I0
sS'trials_2.thisN'
p18715
I3
sa(dp18716
g20
g21
sS'trials.thisIndex'
p18717
g36
(g38
S'\x01\x00\x00\x00'
tRp18718
sg22
V
sS'trials_2.thisRepN'
p18719
I3
sS'trials_2.thisTrialN'
p18720
I0
sS'trials.thisRepN'
p18721
I7
sS'trials_2.thisTrial'
p18722
NsS'trials.thisN'
p18723
I15
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18724
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18725
I1
sS'trials_2.thisN'
p18726
I3
sa(dp18727
g20
g21
sS'trials.thisIndex'
p18728
g36
(g38
S'\x00\x00\x00\x00'
tRp18729
sg22
V
sS'trials_2.thisRepN'
p18730
I3
sS'trials_2.thisTrialN'
p18731
I0
sS'trials.thisRepN'
p18732
I8
sS'trials_2.thisTrial'
p18733
NsS'trials.thisN'
p18734
I16
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18735
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18736
I0
sS'trials_2.thisN'
p18737
I3
sa(dp18738
g20
g21
sS'trials.thisIndex'
p18739
g36
(g38
S'\x01\x00\x00\x00'
tRp18740
sg22
V
sS'trials_2.thisRepN'
p18741
I3
sS'trials_2.thisTrialN'
p18742
I0
sS'trials.thisRepN'
p18743
I8
sS'trials_2.thisTrial'
p18744
NsS'trials.thisN'
p18745
I17
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18746
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18747
I1
sS'trials_2.thisN'
p18748
I3
sa(dp18749
g20
g21
sS'trials.thisIndex'
p18750
g36
(g38
S'\x00\x00\x00\x00'
tRp18751
sg22
V
sS'trials_2.thisRepN'
p18752
I3
sS'trials_2.thisTrialN'
p18753
I0
sS'trials.thisRepN'
p18754
I9
sS'trials_2.thisTrial'
p18755
NsS'trials.thisN'
p18756
I18
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18757
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18758
I0
sS'trials_2.thisN'
p18759
I3
sa(dp18760
g20
g21
sS'trials.thisIndex'
p18761
g36
(g38
S'\x01\x00\x00\x00'
tRp18762
sg22
V
sS'trials_2.thisRepN'
p18763
I3
sS'trials_2.thisTrialN'
p18764
I0
sS'trials.thisRepN'
p18765
I9
sS'trials_2.thisTrial'
p18766
NsS'trials.thisN'
p18767
I19
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18768
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18769
I1
sS'trials_2.thisN'
p18770
I3
sa(dp18771
g20
g21
sS'trials.thisIndex'
p18772
g36
(g38
S'\x00\x00\x00\x00'
tRp18773
sg22
V
sS'trials_2.thisRepN'
p18774
I3
sS'trials_2.thisTrialN'
p18775
I0
sS'trials.thisRepN'
p18776
I10
sS'trials_2.thisTrial'
p18777
NsS'trials.thisN'
p18778
I20
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18779
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18780
I0
sS'trials_2.thisN'
p18781
I3
sa(dp18782
g20
g21
sS'trials.thisIndex'
p18783
g36
(g38
S'\x01\x00\x00\x00'
tRp18784
sg22
V
sS'trials_2.thisRepN'
p18785
I3
sS'trials_2.thisTrialN'
p18786
I0
sS'trials.thisRepN'
p18787
I10
sS'trials_2.thisTrial'
p18788
NsS'trials.thisN'
p18789
I21
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18790
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18791
I1
sS'trials_2.thisN'
p18792
I3
sa(dp18793
g20
g21
sS'trials.thisIndex'
p18794
g36
(g38
S'\x00\x00\x00\x00'
tRp18795
sg22
V
sS'trials_2.thisRepN'
p18796
I3
sS'trials_2.thisTrialN'
p18797
I0
sS'trials.thisRepN'
p18798
I11
sS'trials_2.thisTrial'
p18799
NsS'trials.thisN'
p18800
I22
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18801
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18802
I0
sS'trials_2.thisN'
p18803
I3
sa(dp18804
g20
g21
sS'trials.thisIndex'
p18805
g36
(g38
S'\x01\x00\x00\x00'
tRp18806
sg22
V
sS'trials_2.thisRepN'
p18807
I3
sS'trials_2.thisTrialN'
p18808
I0
sS'trials.thisRepN'
p18809
I11
sS'trials_2.thisTrial'
p18810
NsS'trials.thisN'
p18811
I23
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18812
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18813
I1
sS'trials_2.thisN'
p18814
I3
sa(dp18815
g20
g21
sS'trials.thisIndex'
p18816
g36
(g38
S'\x00\x00\x00\x00'
tRp18817
sg22
V
sS'trials_2.thisRepN'
p18818
I3
sS'trials_2.thisTrialN'
p18819
I0
sS'trials.thisRepN'
p18820
I12
sS'trials_2.thisTrial'
p18821
NsS'trials.thisN'
p18822
I24
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18823
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18824
I0
sS'trials_2.thisN'
p18825
I3
sa(dp18826
g20
g21
sS'trials.thisIndex'
p18827
g36
(g38
S'\x01\x00\x00\x00'
tRp18828
sg22
V
sS'trials_2.thisRepN'
p18829
I3
sS'trials_2.thisTrialN'
p18830
I0
sS'trials.thisRepN'
p18831
I12
sS'trials_2.thisTrial'
p18832
NsS'trials.thisN'
p18833
I25
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18834
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18835
I1
sS'trials_2.thisN'
p18836
I3
sa(dp18837
g20
g21
sS'trials.thisIndex'
p18838
g36
(g38
S'\x00\x00\x00\x00'
tRp18839
sg22
V
sS'trials_2.thisRepN'
p18840
I3
sS'trials_2.thisTrialN'
p18841
I0
sS'trials.thisRepN'
p18842
I13
sS'trials_2.thisTrial'
p18843
NsS'trials.thisN'
p18844
I26
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18845
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18846
I0
sS'trials_2.thisN'
p18847
I3
sa(dp18848
g20
g21
sS'trials.thisIndex'
p18849
g36
(g38
S'\x01\x00\x00\x00'
tRp18850
sg22
V
sS'trials_2.thisRepN'
p18851
I3
sS'trials_2.thisTrialN'
p18852
I0
sS'trials.thisRepN'
p18853
I13
sS'trials_2.thisTrial'
p18854
NsS'trials.thisN'
p18855
I27
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18856
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18857
I1
sS'trials_2.thisN'
p18858
I3
sa(dp18859
g20
g21
sS'trials.thisIndex'
p18860
g36
(g38
S'\x00\x00\x00\x00'
tRp18861
sg22
V
sS'trials_2.thisRepN'
p18862
I3
sS'trials_2.thisTrialN'
p18863
I0
sS'trials.thisRepN'
p18864
I14
sS'trials_2.thisTrial'
p18865
NsS'trials.thisN'
p18866
I28
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18867
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18868
I0
sS'trials_2.thisN'
p18869
I3
sa(dp18870
g20
g21
sS'trials.thisIndex'
p18871
g36
(g38
S'\x01\x00\x00\x00'
tRp18872
sg22
V
sS'trials_2.thisRepN'
p18873
I3
sS'trials_2.thisTrialN'
p18874
I0
sS'trials.thisRepN'
p18875
I14
sS'trials_2.thisTrial'
p18876
NsS'trials.thisN'
p18877
I29
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18878
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18879
I1
sS'trials_2.thisN'
p18880
I3
sa(dp18881
g20
g21
sS'trials.thisIndex'
p18882
g36
(g38
S'\x00\x00\x00\x00'
tRp18883
sg22
V
sS'trials_2.thisRepN'
p18884
I3
sS'trials_2.thisTrialN'
p18885
I0
sS'trials.thisRepN'
p18886
I15
sS'trials_2.thisTrial'
p18887
NsS'trials.thisN'
p18888
I30
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18889
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18890
I0
sS'trials_2.thisN'
p18891
I3
sa(dp18892
g20
g21
sS'trials.thisIndex'
p18893
g36
(g38
S'\x01\x00\x00\x00'
tRp18894
sg22
V
sS'trials_2.thisRepN'
p18895
I3
sS'trials_2.thisTrialN'
p18896
I0
sS'trials.thisRepN'
p18897
I15
sS'trials_2.thisTrial'
p18898
NsS'trials.thisN'
p18899
I31
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18900
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18901
I1
sS'trials_2.thisN'
p18902
I3
sa(dp18903
g20
g21
sS'trials.thisIndex'
p18904
g36
(g38
S'\x00\x00\x00\x00'
tRp18905
sg22
V
sS'trials_2.thisRepN'
p18906
I3
sS'trials_2.thisTrialN'
p18907
I0
sS'trials.thisRepN'
p18908
I16
sS'trials_2.thisTrial'
p18909
NsS'trials.thisN'
p18910
I32
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18911
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18912
I0
sS'trials_2.thisN'
p18913
I3
sa(dp18914
g20
g21
sS'trials.thisIndex'
p18915
g36
(g38
S'\x01\x00\x00\x00'
tRp18916
sg22
V
sS'trials_2.thisRepN'
p18917
I3
sS'trials_2.thisTrialN'
p18918
I0
sS'trials.thisRepN'
p18919
I16
sS'trials_2.thisTrial'
p18920
NsS'trials.thisN'
p18921
I33
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18922
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18923
I1
sS'trials_2.thisN'
p18924
I3
sa(dp18925
g20
g21
sS'trials.thisIndex'
p18926
g36
(g38
S'\x00\x00\x00\x00'
tRp18927
sg22
V
sS'trials_2.thisRepN'
p18928
I3
sS'trials_2.thisTrialN'
p18929
I0
sS'trials.thisRepN'
p18930
I17
sS'trials_2.thisTrial'
p18931
NsS'trials.thisN'
p18932
I34
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18933
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18934
I0
sS'trials_2.thisN'
p18935
I3
sa(dp18936
g20
g21
sS'trials.thisIndex'
p18937
g36
(g38
S'\x01\x00\x00\x00'
tRp18938
sg22
V
sS'trials_2.thisRepN'
p18939
I3
sS'trials_2.thisTrialN'
p18940
I0
sS'trials.thisRepN'
p18941
I17
sS'trials_2.thisTrial'
p18942
NsS'trials.thisN'
p18943
I35
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18944
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18945
I1
sS'trials_2.thisN'
p18946
I3
sa(dp18947
g20
g21
sS'trials.thisIndex'
p18948
g36
(g38
S'\x00\x00\x00\x00'
tRp18949
sg22
V
sS'trials_2.thisRepN'
p18950
I3
sS'trials_2.thisTrialN'
p18951
I0
sS'trials.thisRepN'
p18952
I18
sS'trials_2.thisTrial'
p18953
NsS'trials.thisN'
p18954
I36
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18955
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18956
I0
sS'trials_2.thisN'
p18957
I3
sa(dp18958
g20
g21
sS'trials.thisIndex'
p18959
g36
(g38
S'\x01\x00\x00\x00'
tRp18960
sg22
V
sS'trials_2.thisRepN'
p18961
I3
sS'trials_2.thisTrialN'
p18962
I0
sS'trials.thisRepN'
p18963
I18
sS'trials_2.thisTrial'
p18964
NsS'trials.thisN'
p18965
I37
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18966
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18967
I1
sS'trials_2.thisN'
p18968
I3
sa(dp18969
g20
g21
sS'trials.thisIndex'
p18970
g36
(g38
S'\x00\x00\x00\x00'
tRp18971
sg22
V
sS'trials_2.thisRepN'
p18972
I3
sS'trials_2.thisTrialN'
p18973
I0
sS'trials.thisRepN'
p18974
I19
sS'trials_2.thisTrial'
p18975
NsS'trials.thisN'
p18976
I38
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18977
g18556
sg18557
g18558
sS'trials.thisTrialN'
p18978
I0
sS'trials_2.thisN'
p18979
I3
sa(dp18980
g20
g21
sS'trials.thisIndex'
p18981
g36
(g38
S'\x01\x00\x00\x00'
tRp18982
sg22
V
sS'trials_2.thisRepN'
p18983
I3
sS'trials_2.thisTrialN'
p18984
I0
sS'trials.thisRepN'
p18985
I19
sS'trials_2.thisTrial'
p18986
NsS'trials.thisN'
p18987
I39
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18988
g18556
sg18557
g18570
sS'trials.thisTrialN'
p18989
I1
sS'trials_2.thisN'
p18990
I3
sa(dp18991
g20
g21
sS'trials.thisIndex'
p18992
g36
(g38
S'\x00\x00\x00\x00'
tRp18993
sg22
V
sS'trials_2.thisRepN'
p18994
I3
sS'trials_2.thisTrialN'
p18995
I0
sS'trials.thisRepN'
p18996
I20
sS'trials_2.thisTrial'
p18997
NsS'trials.thisN'
p18998
I40
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p18999
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19000
I0
sS'trials_2.thisN'
p19001
I3
sa(dp19002
g20
g21
sS'trials.thisIndex'
p19003
g36
(g38
S'\x01\x00\x00\x00'
tRp19004
sg22
V
sS'trials_2.thisRepN'
p19005
I3
sS'trials_2.thisTrialN'
p19006
I0
sS'trials.thisRepN'
p19007
I20
sS'trials_2.thisTrial'
p19008
NsS'trials.thisN'
p19009
I41
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19010
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19011
I1
sS'trials_2.thisN'
p19012
I3
sa(dp19013
g20
g21
sS'trials.thisIndex'
p19014
g36
(g38
S'\x00\x00\x00\x00'
tRp19015
sg22
V
sS'trials_2.thisRepN'
p19016
I3
sS'trials_2.thisTrialN'
p19017
I0
sS'trials.thisRepN'
p19018
I21
sS'trials_2.thisTrial'
p19019
NsS'trials.thisN'
p19020
I42
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19021
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19022
I0
sS'trials_2.thisN'
p19023
I3
sa(dp19024
g20
g21
sS'trials.thisIndex'
p19025
g36
(g38
S'\x01\x00\x00\x00'
tRp19026
sg22
V
sS'trials_2.thisRepN'
p19027
I3
sS'trials_2.thisTrialN'
p19028
I0
sS'trials.thisRepN'
p19029
I21
sS'trials_2.thisTrial'
p19030
NsS'trials.thisN'
p19031
I43
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19032
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19033
I1
sS'trials_2.thisN'
p19034
I3
sa(dp19035
g20
g21
sS'trials.thisIndex'
p19036
g36
(g38
S'\x00\x00\x00\x00'
tRp19037
sg22
V
sS'trials_2.thisRepN'
p19038
I3
sS'trials_2.thisTrialN'
p19039
I0
sS'trials.thisRepN'
p19040
I22
sS'trials_2.thisTrial'
p19041
NsS'trials.thisN'
p19042
I44
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19043
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19044
I0
sS'trials_2.thisN'
p19045
I3
sa(dp19046
g20
g21
sS'trials.thisIndex'
p19047
g36
(g38
S'\x01\x00\x00\x00'
tRp19048
sg22
V
sS'trials_2.thisRepN'
p19049
I3
sS'trials_2.thisTrialN'
p19050
I0
sS'trials.thisRepN'
p19051
I22
sS'trials_2.thisTrial'
p19052
NsS'trials.thisN'
p19053
I45
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19054
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19055
I1
sS'trials_2.thisN'
p19056
I3
sa(dp19057
g20
g21
sS'trials.thisIndex'
p19058
g36
(g38
S'\x00\x00\x00\x00'
tRp19059
sg22
V
sS'trials_2.thisRepN'
p19060
I3
sS'trials_2.thisTrialN'
p19061
I0
sS'trials.thisRepN'
p19062
I23
sS'trials_2.thisTrial'
p19063
NsS'trials.thisN'
p19064
I46
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19065
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19066
I0
sS'trials_2.thisN'
p19067
I3
sa(dp19068
g20
g21
sS'trials.thisIndex'
p19069
g36
(g38
S'\x01\x00\x00\x00'
tRp19070
sg22
V
sS'trials_2.thisRepN'
p19071
I3
sS'trials_2.thisTrialN'
p19072
I0
sS'trials.thisRepN'
p19073
I23
sS'trials_2.thisTrial'
p19074
NsS'trials.thisN'
p19075
I47
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19076
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19077
I1
sS'trials_2.thisN'
p19078
I3
sa(dp19079
g20
g21
sS'trials.thisIndex'
p19080
g36
(g38
S'\x00\x00\x00\x00'
tRp19081
sg22
V
sS'trials_2.thisRepN'
p19082
I3
sS'trials_2.thisTrialN'
p19083
I0
sS'trials.thisRepN'
p19084
I24
sS'trials_2.thisTrial'
p19085
NsS'trials.thisN'
p19086
I48
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19087
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19088
I0
sS'trials_2.thisN'
p19089
I3
sa(dp19090
g20
g21
sS'trials.thisIndex'
p19091
g36
(g38
S'\x01\x00\x00\x00'
tRp19092
sg22
V
sS'trials_2.thisRepN'
p19093
I3
sS'trials_2.thisTrialN'
p19094
I0
sS'trials.thisRepN'
p19095
I24
sS'trials_2.thisTrial'
p19096
NsS'trials.thisN'
p19097
I49
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19098
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19099
I1
sS'trials_2.thisN'
p19100
I3
sa(dp19101
g20
g21
sS'trials.thisIndex'
p19102
g36
(g38
S'\x00\x00\x00\x00'
tRp19103
sg22
V
sS'trials_2.thisRepN'
p19104
I3
sS'trials_2.thisTrialN'
p19105
I0
sS'trials.thisRepN'
p19106
I25
sS'trials_2.thisTrial'
p19107
NsS'trials.thisN'
p19108
I50
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19109
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19110
I0
sS'trials_2.thisN'
p19111
I3
sa(dp19112
g20
g21
sS'trials.thisIndex'
p19113
g36
(g38
S'\x01\x00\x00\x00'
tRp19114
sg22
V
sS'trials_2.thisRepN'
p19115
I3
sS'trials_2.thisTrialN'
p19116
I0
sS'trials.thisRepN'
p19117
I25
sS'trials_2.thisTrial'
p19118
NsS'trials.thisN'
p19119
I51
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19120
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19121
I1
sS'trials_2.thisN'
p19122
I3
sa(dp19123
g20
g21
sS'trials.thisIndex'
p19124
g36
(g38
S'\x00\x00\x00\x00'
tRp19125
sg22
V
sS'trials_2.thisRepN'
p19126
I3
sS'trials_2.thisTrialN'
p19127
I0
sS'trials.thisRepN'
p19128
I26
sS'trials_2.thisTrial'
p19129
NsS'trials.thisN'
p19130
I52
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19131
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19132
I0
sS'trials_2.thisN'
p19133
I3
sa(dp19134
g20
g21
sS'trials.thisIndex'
p19135
g36
(g38
S'\x01\x00\x00\x00'
tRp19136
sg22
V
sS'trials_2.thisRepN'
p19137
I3
sS'trials_2.thisTrialN'
p19138
I0
sS'trials.thisRepN'
p19139
I26
sS'trials_2.thisTrial'
p19140
NsS'trials.thisN'
p19141
I53
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19142
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19143
I1
sS'trials_2.thisN'
p19144
I3
sa(dp19145
g20
g21
sS'trials.thisIndex'
p19146
g36
(g38
S'\x00\x00\x00\x00'
tRp19147
sg22
V
sS'trials_2.thisRepN'
p19148
I3
sS'trials_2.thisTrialN'
p19149
I0
sS'trials.thisRepN'
p19150
I27
sS'trials_2.thisTrial'
p19151
NsS'trials.thisN'
p19152
I54
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19153
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19154
I0
sS'trials_2.thisN'
p19155
I3
sa(dp19156
g20
g21
sS'trials.thisIndex'
p19157
g36
(g38
S'\x01\x00\x00\x00'
tRp19158
sg22
V
sS'trials_2.thisRepN'
p19159
I3
sS'trials_2.thisTrialN'
p19160
I0
sS'trials.thisRepN'
p19161
I27
sS'trials_2.thisTrial'
p19162
NsS'trials.thisN'
p19163
I55
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19164
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19165
I1
sS'trials_2.thisN'
p19166
I3
sa(dp19167
g20
g21
sS'trials.thisIndex'
p19168
g36
(g38
S'\x00\x00\x00\x00'
tRp19169
sg22
V
sS'trials_2.thisRepN'
p19170
I3
sS'trials_2.thisTrialN'
p19171
I0
sS'trials.thisRepN'
p19172
I28
sS'trials_2.thisTrial'
p19173
NsS'trials.thisN'
p19174
I56
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19175
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19176
I0
sS'trials_2.thisN'
p19177
I3
sa(dp19178
g20
g21
sS'trials.thisIndex'
p19179
g36
(g38
S'\x01\x00\x00\x00'
tRp19180
sg22
V
sS'trials_2.thisRepN'
p19181
I3
sS'trials_2.thisTrialN'
p19182
I0
sS'trials.thisRepN'
p19183
I28
sS'trials_2.thisTrial'
p19184
NsS'trials.thisN'
p19185
I57
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19186
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19187
I1
sS'trials_2.thisN'
p19188
I3
sa(dp19189
g20
g21
sS'trials.thisIndex'
p19190
g36
(g38
S'\x00\x00\x00\x00'
tRp19191
sg22
V
sS'trials_2.thisRepN'
p19192
I3
sS'trials_2.thisTrialN'
p19193
I0
sS'trials.thisRepN'
p19194
I29
sS'trials_2.thisTrial'
p19195
NsS'trials.thisN'
p19196
I58
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19197
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19198
I0
sS'trials_2.thisN'
p19199
I3
sa(dp19200
g20
g21
sS'trials.thisIndex'
p19201
g36
(g38
S'\x01\x00\x00\x00'
tRp19202
sg22
V
sS'trials_2.thisRepN'
p19203
I3
sS'trials_2.thisTrialN'
p19204
I0
sS'trials.thisRepN'
p19205
I29
sS'trials_2.thisTrial'
p19206
NsS'trials.thisN'
p19207
I59
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19208
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19209
I1
sS'trials_2.thisN'
p19210
I3
sa(dp19211
g20
g21
sS'trials.thisIndex'
p19212
g36
(g38
S'\x00\x00\x00\x00'
tRp19213
sg22
V
sS'trials_2.thisRepN'
p19214
I3
sS'trials_2.thisTrialN'
p19215
I0
sS'trials.thisRepN'
p19216
I30
sS'trials_2.thisTrial'
p19217
NsS'trials.thisN'
p19218
I60
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19219
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19220
I0
sS'trials_2.thisN'
p19221
I3
sa(dp19222
g20
g21
sS'trials.thisIndex'
p19223
g36
(g38
S'\x01\x00\x00\x00'
tRp19224
sg22
V
sS'trials_2.thisRepN'
p19225
I3
sS'trials_2.thisTrialN'
p19226
I0
sS'trials.thisRepN'
p19227
I30
sS'trials_2.thisTrial'
p19228
NsS'trials.thisN'
p19229
I61
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19230
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19231
I1
sS'trials_2.thisN'
p19232
I3
sa(dp19233
g20
g21
sS'trials.thisIndex'
p19234
g36
(g38
S'\x00\x00\x00\x00'
tRp19235
sg22
V
sS'trials_2.thisRepN'
p19236
I3
sS'trials_2.thisTrialN'
p19237
I0
sS'trials.thisRepN'
p19238
I31
sS'trials_2.thisTrial'
p19239
NsS'trials.thisN'
p19240
I62
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19241
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19242
I0
sS'trials_2.thisN'
p19243
I3
sa(dp19244
g20
g21
sS'trials.thisIndex'
p19245
g36
(g38
S'\x01\x00\x00\x00'
tRp19246
sg22
V
sS'trials_2.thisRepN'
p19247
I3
sS'trials_2.thisTrialN'
p19248
I0
sS'trials.thisRepN'
p19249
I31
sS'trials_2.thisTrial'
p19250
NsS'trials.thisN'
p19251
I63
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19252
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19253
I1
sS'trials_2.thisN'
p19254
I3
sa(dp19255
g20
g21
sS'trials.thisIndex'
p19256
g36
(g38
S'\x00\x00\x00\x00'
tRp19257
sg22
V
sS'trials_2.thisRepN'
p19258
I3
sS'trials_2.thisTrialN'
p19259
I0
sS'trials.thisRepN'
p19260
I32
sS'trials_2.thisTrial'
p19261
NsS'trials.thisN'
p19262
I64
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19263
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19264
I0
sS'trials_2.thisN'
p19265
I3
sa(dp19266
g20
g21
sS'trials.thisIndex'
p19267
g36
(g38
S'\x01\x00\x00\x00'
tRp19268
sg22
V
sS'trials_2.thisRepN'
p19269
I3
sS'trials_2.thisTrialN'
p19270
I0
sS'trials.thisRepN'
p19271
I32
sS'trials_2.thisTrial'
p19272
NsS'trials.thisN'
p19273
I65
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19274
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19275
I1
sS'trials_2.thisN'
p19276
I3
sa(dp19277
g20
g21
sS'trials.thisIndex'
p19278
g36
(g38
S'\x00\x00\x00\x00'
tRp19279
sg22
V
sS'trials_2.thisRepN'
p19280
I3
sS'trials_2.thisTrialN'
p19281
I0
sS'trials.thisRepN'
p19282
I33
sS'trials_2.thisTrial'
p19283
NsS'trials.thisN'
p19284
I66
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19285
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19286
I0
sS'trials_2.thisN'
p19287
I3
sa(dp19288
g20
g21
sS'trials.thisIndex'
p19289
g36
(g38
S'\x01\x00\x00\x00'
tRp19290
sg22
V
sS'trials_2.thisRepN'
p19291
I3
sS'trials_2.thisTrialN'
p19292
I0
sS'trials.thisRepN'
p19293
I33
sS'trials_2.thisTrial'
p19294
NsS'trials.thisN'
p19295
I67
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19296
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19297
I1
sS'trials_2.thisN'
p19298
I3
sa(dp19299
g20
g21
sS'trials.thisIndex'
p19300
g36
(g38
S'\x00\x00\x00\x00'
tRp19301
sg22
V
sS'trials_2.thisRepN'
p19302
I3
sS'trials_2.thisTrialN'
p19303
I0
sS'trials.thisRepN'
p19304
I34
sS'trials_2.thisTrial'
p19305
NsS'trials.thisN'
p19306
I68
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19307
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19308
I0
sS'trials_2.thisN'
p19309
I3
sa(dp19310
g20
g21
sS'trials.thisIndex'
p19311
g36
(g38
S'\x01\x00\x00\x00'
tRp19312
sg22
V
sS'trials_2.thisRepN'
p19313
I3
sS'trials_2.thisTrialN'
p19314
I0
sS'trials.thisRepN'
p19315
I34
sS'trials_2.thisTrial'
p19316
NsS'trials.thisN'
p19317
I69
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19318
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19319
I1
sS'trials_2.thisN'
p19320
I3
sa(dp19321
g20
g21
sS'trials.thisIndex'
p19322
g36
(g38
S'\x00\x00\x00\x00'
tRp19323
sg22
V
sS'trials_2.thisRepN'
p19324
I3
sS'trials_2.thisTrialN'
p19325
I0
sS'trials.thisRepN'
p19326
I35
sS'trials_2.thisTrial'
p19327
NsS'trials.thisN'
p19328
I70
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19329
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19330
I0
sS'trials_2.thisN'
p19331
I3
sa(dp19332
g20
g21
sS'trials.thisIndex'
p19333
g36
(g38
S'\x01\x00\x00\x00'
tRp19334
sg22
V
sS'trials_2.thisRepN'
p19335
I3
sS'trials_2.thisTrialN'
p19336
I0
sS'trials.thisRepN'
p19337
I35
sS'trials_2.thisTrial'
p19338
NsS'trials.thisN'
p19339
I71
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19340
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19341
I1
sS'trials_2.thisN'
p19342
I3
sa(dp19343
g20
g21
sS'trials.thisIndex'
p19344
g36
(g38
S'\x00\x00\x00\x00'
tRp19345
sg22
V
sS'trials_2.thisRepN'
p19346
I3
sS'trials_2.thisTrialN'
p19347
I0
sS'trials.thisRepN'
p19348
I36
sS'trials_2.thisTrial'
p19349
NsS'trials.thisN'
p19350
I72
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19351
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19352
I0
sS'trials_2.thisN'
p19353
I3
sa(dp19354
g20
g21
sS'trials.thisIndex'
p19355
g36
(g38
S'\x01\x00\x00\x00'
tRp19356
sg22
V
sS'trials_2.thisRepN'
p19357
I3
sS'trials_2.thisTrialN'
p19358
I0
sS'trials.thisRepN'
p19359
I36
sS'trials_2.thisTrial'
p19360
NsS'trials.thisN'
p19361
I73
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19362
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19363
I1
sS'trials_2.thisN'
p19364
I3
sa(dp19365
g20
g21
sS'trials.thisIndex'
p19366
g36
(g38
S'\x00\x00\x00\x00'
tRp19367
sg22
V
sS'trials_2.thisRepN'
p19368
I3
sS'trials_2.thisTrialN'
p19369
I0
sS'trials.thisRepN'
p19370
I37
sS'trials_2.thisTrial'
p19371
NsS'trials.thisN'
p19372
I74
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19373
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19374
I0
sS'trials_2.thisN'
p19375
I3
sa(dp19376
g20
g21
sS'trials.thisIndex'
p19377
g36
(g38
S'\x01\x00\x00\x00'
tRp19378
sg22
V
sS'trials_2.thisRepN'
p19379
I3
sS'trials_2.thisTrialN'
p19380
I0
sS'trials.thisRepN'
p19381
I37
sS'trials_2.thisTrial'
p19382
NsS'trials.thisN'
p19383
I75
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19384
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19385
I1
sS'trials_2.thisN'
p19386
I3
sa(dp19387
g20
g21
sS'trials.thisIndex'
p19388
g36
(g38
S'\x00\x00\x00\x00'
tRp19389
sg22
V
sS'trials_2.thisRepN'
p19390
I3
sS'trials_2.thisTrialN'
p19391
I0
sS'trials.thisRepN'
p19392
I38
sS'trials_2.thisTrial'
p19393
NsS'trials.thisN'
p19394
I76
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19395
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19396
I0
sS'trials_2.thisN'
p19397
I3
sa(dp19398
g20
g21
sS'trials.thisIndex'
p19399
g36
(g38
S'\x01\x00\x00\x00'
tRp19400
sg22
V
sS'trials_2.thisRepN'
p19401
I3
sS'trials_2.thisTrialN'
p19402
I0
sS'trials.thisRepN'
p19403
I38
sS'trials_2.thisTrial'
p19404
NsS'trials.thisN'
p19405
I77
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19406
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19407
I1
sS'trials_2.thisN'
p19408
I3
sa(dp19409
g20
g21
sS'trials.thisIndex'
p19410
g36
(g38
S'\x00\x00\x00\x00'
tRp19411
sg22
V
sS'trials_2.thisRepN'
p19412
I3
sS'trials_2.thisTrialN'
p19413
I0
sS'trials.thisRepN'
p19414
I39
sS'trials_2.thisTrial'
p19415
NsS'trials.thisN'
p19416
I78
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19417
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19418
I0
sS'trials_2.thisN'
p19419
I3
sa(dp19420
g20
g21
sS'trials.thisIndex'
p19421
g36
(g38
S'\x01\x00\x00\x00'
tRp19422
sg22
V
sS'trials_2.thisRepN'
p19423
I3
sS'trials_2.thisTrialN'
p19424
I0
sS'trials.thisRepN'
p19425
I39
sS'trials_2.thisTrial'
p19426
NsS'trials.thisN'
p19427
I79
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19428
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19429
I1
sS'trials_2.thisN'
p19430
I3
sa(dp19431
g20
g21
sS'trials.thisIndex'
p19432
g36
(g38
S'\x00\x00\x00\x00'
tRp19433
sg22
V
sS'trials_2.thisRepN'
p19434
I3
sS'trials_2.thisTrialN'
p19435
I0
sS'trials.thisRepN'
p19436
I40
sS'trials_2.thisTrial'
p19437
NsS'trials.thisN'
p19438
I80
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19439
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19440
I0
sS'trials_2.thisN'
p19441
I3
sa(dp19442
g20
g21
sS'trials.thisIndex'
p19443
g36
(g38
S'\x01\x00\x00\x00'
tRp19444
sg22
V
sS'trials_2.thisRepN'
p19445
I3
sS'trials_2.thisTrialN'
p19446
I0
sS'trials.thisRepN'
p19447
I40
sS'trials_2.thisTrial'
p19448
NsS'trials.thisN'
p19449
I81
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19450
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19451
I1
sS'trials_2.thisN'
p19452
I3
sa(dp19453
g20
g21
sS'trials.thisIndex'
p19454
g36
(g38
S'\x00\x00\x00\x00'
tRp19455
sg22
V
sS'trials_2.thisRepN'
p19456
I3
sS'trials_2.thisTrialN'
p19457
I0
sS'trials.thisRepN'
p19458
I41
sS'trials_2.thisTrial'
p19459
NsS'trials.thisN'
p19460
I82
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19461
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19462
I0
sS'trials_2.thisN'
p19463
I3
sa(dp19464
g20
g21
sS'trials.thisIndex'
p19465
g36
(g38
S'\x01\x00\x00\x00'
tRp19466
sg22
V
sS'trials_2.thisRepN'
p19467
I3
sS'trials_2.thisTrialN'
p19468
I0
sS'trials.thisRepN'
p19469
I41
sS'trials_2.thisTrial'
p19470
NsS'trials.thisN'
p19471
I83
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19472
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19473
I1
sS'trials_2.thisN'
p19474
I3
sa(dp19475
g20
g21
sS'trials.thisIndex'
p19476
g36
(g38
S'\x00\x00\x00\x00'
tRp19477
sg22
V
sS'trials_2.thisRepN'
p19478
I3
sS'trials_2.thisTrialN'
p19479
I0
sS'trials.thisRepN'
p19480
I42
sS'trials_2.thisTrial'
p19481
NsS'trials.thisN'
p19482
I84
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19483
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19484
I0
sS'trials_2.thisN'
p19485
I3
sa(dp19486
g20
g21
sS'trials.thisIndex'
p19487
g36
(g38
S'\x01\x00\x00\x00'
tRp19488
sg22
V
sS'trials_2.thisRepN'
p19489
I3
sS'trials_2.thisTrialN'
p19490
I0
sS'trials.thisRepN'
p19491
I42
sS'trials_2.thisTrial'
p19492
NsS'trials.thisN'
p19493
I85
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19494
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19495
I1
sS'trials_2.thisN'
p19496
I3
sa(dp19497
g20
g21
sS'trials.thisIndex'
p19498
g36
(g38
S'\x00\x00\x00\x00'
tRp19499
sg22
V
sS'trials_2.thisRepN'
p19500
I3
sS'trials_2.thisTrialN'
p19501
I0
sS'trials.thisRepN'
p19502
I43
sS'trials_2.thisTrial'
p19503
NsS'trials.thisN'
p19504
I86
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19505
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19506
I0
sS'trials_2.thisN'
p19507
I3
sa(dp19508
g20
g21
sS'trials.thisIndex'
p19509
g36
(g38
S'\x01\x00\x00\x00'
tRp19510
sg22
V
sS'trials_2.thisRepN'
p19511
I3
sS'trials_2.thisTrialN'
p19512
I0
sS'trials.thisRepN'
p19513
I43
sS'trials_2.thisTrial'
p19514
NsS'trials.thisN'
p19515
I87
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19516
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19517
I1
sS'trials_2.thisN'
p19518
I3
sa(dp19519
g20
g21
sS'trials.thisIndex'
p19520
g36
(g38
S'\x00\x00\x00\x00'
tRp19521
sg22
V
sS'trials_2.thisRepN'
p19522
I3
sS'trials_2.thisTrialN'
p19523
I0
sS'trials.thisRepN'
p19524
I44
sS'trials_2.thisTrial'
p19525
NsS'trials.thisN'
p19526
I88
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19527
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19528
I0
sS'trials_2.thisN'
p19529
I3
sa(dp19530
g20
g21
sS'trials.thisIndex'
p19531
g36
(g38
S'\x01\x00\x00\x00'
tRp19532
sg22
V
sS'trials_2.thisRepN'
p19533
I3
sS'trials_2.thisTrialN'
p19534
I0
sS'trials.thisRepN'
p19535
I44
sS'trials_2.thisTrial'
p19536
NsS'trials.thisN'
p19537
I89
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19538
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19539
I1
sS'trials_2.thisN'
p19540
I3
sa(dp19541
g20
g21
sS'trials.thisIndex'
p19542
g36
(g38
S'\x00\x00\x00\x00'
tRp19543
sg22
V
sS'trials_2.thisRepN'
p19544
I3
sS'trials_2.thisTrialN'
p19545
I0
sS'trials.thisRepN'
p19546
I45
sS'trials_2.thisTrial'
p19547
NsS'trials.thisN'
p19548
I90
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19549
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19550
I0
sS'trials_2.thisN'
p19551
I3
sa(dp19552
g20
g21
sS'trials.thisIndex'
p19553
g36
(g38
S'\x01\x00\x00\x00'
tRp19554
sg22
V
sS'trials_2.thisRepN'
p19555
I3
sS'trials_2.thisTrialN'
p19556
I0
sS'trials.thisRepN'
p19557
I45
sS'trials_2.thisTrial'
p19558
NsS'trials.thisN'
p19559
I91
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19560
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19561
I1
sS'trials_2.thisN'
p19562
I3
sa(dp19563
g20
g21
sS'trials.thisIndex'
p19564
g36
(g38
S'\x00\x00\x00\x00'
tRp19565
sg22
V
sS'trials_2.thisRepN'
p19566
I3
sS'trials_2.thisTrialN'
p19567
I0
sS'trials.thisRepN'
p19568
I46
sS'trials_2.thisTrial'
p19569
NsS'trials.thisN'
p19570
I92
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19571
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19572
I0
sS'trials_2.thisN'
p19573
I3
sa(dp19574
g20
g21
sS'trials.thisIndex'
p19575
g36
(g38
S'\x01\x00\x00\x00'
tRp19576
sg22
V
sS'trials_2.thisRepN'
p19577
I3
sS'trials_2.thisTrialN'
p19578
I0
sS'trials.thisRepN'
p19579
I46
sS'trials_2.thisTrial'
p19580
NsS'trials.thisN'
p19581
I93
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19582
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19583
I1
sS'trials_2.thisN'
p19584
I3
sa(dp19585
g20
g21
sS'trials.thisIndex'
p19586
g36
(g38
S'\x00\x00\x00\x00'
tRp19587
sg22
V
sS'trials_2.thisRepN'
p19588
I3
sS'trials_2.thisTrialN'
p19589
I0
sS'trials.thisRepN'
p19590
I47
sS'trials_2.thisTrial'
p19591
NsS'trials.thisN'
p19592
I94
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19593
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19594
I0
sS'trials_2.thisN'
p19595
I3
sa(dp19596
g20
g21
sS'trials.thisIndex'
p19597
g36
(g38
S'\x01\x00\x00\x00'
tRp19598
sg22
V
sS'trials_2.thisRepN'
p19599
I3
sS'trials_2.thisTrialN'
p19600
I0
sS'trials.thisRepN'
p19601
I47
sS'trials_2.thisTrial'
p19602
NsS'trials.thisN'
p19603
I95
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19604
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19605
I1
sS'trials_2.thisN'
p19606
I3
sa(dp19607
g20
g21
sS'trials.thisIndex'
p19608
g36
(g38
S'\x00\x00\x00\x00'
tRp19609
sg22
V
sS'trials_2.thisRepN'
p19610
I3
sS'trials_2.thisTrialN'
p19611
I0
sS'trials.thisRepN'
p19612
I48
sS'trials_2.thisTrial'
p19613
NsS'trials.thisN'
p19614
I96
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19615
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19616
I0
sS'trials_2.thisN'
p19617
I3
sa(dp19618
g20
g21
sS'trials.thisIndex'
p19619
g36
(g38
S'\x01\x00\x00\x00'
tRp19620
sg22
V
sS'trials_2.thisRepN'
p19621
I3
sS'trials_2.thisTrialN'
p19622
I0
sS'trials.thisRepN'
p19623
I48
sS'trials_2.thisTrial'
p19624
NsS'trials.thisN'
p19625
I97
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19626
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19627
I1
sS'trials_2.thisN'
p19628
I3
sa(dp19629
g20
g21
sS'trials.thisIndex'
p19630
g36
(g38
S'\x00\x00\x00\x00'
tRp19631
sg22
V
sS'trials_2.thisRepN'
p19632
I3
sS'trials_2.thisTrialN'
p19633
I0
sS'trials.thisRepN'
p19634
I49
sS'trials_2.thisTrial'
p19635
NsS'trials.thisN'
p19636
I98
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19637
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19638
I0
sS'trials_2.thisN'
p19639
I3
sa(dp19640
g20
g21
sS'trials.thisIndex'
p19641
g36
(g38
S'\x01\x00\x00\x00'
tRp19642
sg22
V
sS'trials_2.thisRepN'
p19643
I3
sS'trials_2.thisTrialN'
p19644
I0
sS'trials.thisRepN'
p19645
I49
sS'trials_2.thisTrial'
p19646
NsS'trials.thisN'
p19647
I99
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19648
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19649
I1
sS'trials_2.thisN'
p19650
I3
sa(dp19651
g20
g21
sS'trials.thisIndex'
p19652
g36
(g38
S'\x00\x00\x00\x00'
tRp19653
sg22
V
sS'trials_2.thisRepN'
p19654
I3
sS'trials_2.thisTrialN'
p19655
I0
sS'trials.thisRepN'
p19656
I50
sS'trials_2.thisTrial'
p19657
NsS'trials.thisN'
p19658
I100
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19659
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19660
I0
sS'trials_2.thisN'
p19661
I3
sa(dp19662
g20
g21
sS'trials.thisIndex'
p19663
g36
(g38
S'\x01\x00\x00\x00'
tRp19664
sg22
V
sS'trials_2.thisRepN'
p19665
I3
sS'trials_2.thisTrialN'
p19666
I0
sS'trials.thisRepN'
p19667
I50
sS'trials_2.thisTrial'
p19668
NsS'trials.thisN'
p19669
I101
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19670
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19671
I1
sS'trials_2.thisN'
p19672
I3
sa(dp19673
g20
g21
sS'trials.thisIndex'
p19674
g36
(g38
S'\x00\x00\x00\x00'
tRp19675
sg22
V
sS'trials_2.thisRepN'
p19676
I3
sS'trials_2.thisTrialN'
p19677
I0
sS'trials.thisRepN'
p19678
I51
sS'trials_2.thisTrial'
p19679
NsS'trials.thisN'
p19680
I102
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19681
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19682
I0
sS'trials_2.thisN'
p19683
I3
sa(dp19684
g20
g21
sS'trials.thisIndex'
p19685
g36
(g38
S'\x01\x00\x00\x00'
tRp19686
sg22
V
sS'trials_2.thisRepN'
p19687
I3
sS'trials_2.thisTrialN'
p19688
I0
sS'trials.thisRepN'
p19689
I51
sS'trials_2.thisTrial'
p19690
NsS'trials.thisN'
p19691
I103
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19692
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19693
I1
sS'trials_2.thisN'
p19694
I3
sa(dp19695
g20
g21
sS'trials.thisIndex'
p19696
g36
(g38
S'\x00\x00\x00\x00'
tRp19697
sg22
V
sS'trials_2.thisRepN'
p19698
I3
sS'trials_2.thisTrialN'
p19699
I0
sS'trials.thisRepN'
p19700
I52
sS'trials_2.thisTrial'
p19701
NsS'trials.thisN'
p19702
I104
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19703
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19704
I0
sS'trials_2.thisN'
p19705
I3
sa(dp19706
g20
g21
sS'trials.thisIndex'
p19707
g36
(g38
S'\x01\x00\x00\x00'
tRp19708
sg22
V
sS'trials_2.thisRepN'
p19709
I3
sS'trials_2.thisTrialN'
p19710
I0
sS'trials.thisRepN'
p19711
I52
sS'trials_2.thisTrial'
p19712
NsS'trials.thisN'
p19713
I105
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19714
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19715
I1
sS'trials_2.thisN'
p19716
I3
sa(dp19717
g20
g21
sS'trials.thisIndex'
p19718
g36
(g38
S'\x00\x00\x00\x00'
tRp19719
sg22
V
sS'trials_2.thisRepN'
p19720
I3
sS'trials_2.thisTrialN'
p19721
I0
sS'trials.thisRepN'
p19722
I53
sS'trials_2.thisTrial'
p19723
NsS'trials.thisN'
p19724
I106
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19725
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19726
I0
sS'trials_2.thisN'
p19727
I3
sa(dp19728
g20
g21
sS'trials.thisIndex'
p19729
g36
(g38
S'\x01\x00\x00\x00'
tRp19730
sg22
V
sS'trials_2.thisRepN'
p19731
I3
sS'trials_2.thisTrialN'
p19732
I0
sS'trials.thisRepN'
p19733
I53
sS'trials_2.thisTrial'
p19734
NsS'trials.thisN'
p19735
I107
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19736
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19737
I1
sS'trials_2.thisN'
p19738
I3
sa(dp19739
g20
g21
sS'trials.thisIndex'
p19740
g36
(g38
S'\x00\x00\x00\x00'
tRp19741
sg22
V
sS'trials_2.thisRepN'
p19742
I3
sS'trials_2.thisTrialN'
p19743
I0
sS'trials.thisRepN'
p19744
I54
sS'trials_2.thisTrial'
p19745
NsS'trials.thisN'
p19746
I108
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19747
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19748
I0
sS'trials_2.thisN'
p19749
I3
sa(dp19750
g20
g21
sS'trials.thisIndex'
p19751
g36
(g38
S'\x01\x00\x00\x00'
tRp19752
sg22
V
sS'trials_2.thisRepN'
p19753
I3
sS'trials_2.thisTrialN'
p19754
I0
sS'trials.thisRepN'
p19755
I54
sS'trials_2.thisTrial'
p19756
NsS'trials.thisN'
p19757
I109
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19758
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19759
I1
sS'trials_2.thisN'
p19760
I3
sa(dp19761
g20
g21
sS'trials.thisIndex'
p19762
g36
(g38
S'\x00\x00\x00\x00'
tRp19763
sg22
V
sS'trials_2.thisRepN'
p19764
I3
sS'trials_2.thisTrialN'
p19765
I0
sS'trials.thisRepN'
p19766
I55
sS'trials_2.thisTrial'
p19767
NsS'trials.thisN'
p19768
I110
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19769
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19770
I0
sS'trials_2.thisN'
p19771
I3
sa(dp19772
g20
g21
sS'trials.thisIndex'
p19773
g36
(g38
S'\x01\x00\x00\x00'
tRp19774
sg22
V
sS'trials_2.thisRepN'
p19775
I3
sS'trials_2.thisTrialN'
p19776
I0
sS'trials.thisRepN'
p19777
I55
sS'trials_2.thisTrial'
p19778
NsS'trials.thisN'
p19779
I111
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19780
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19781
I1
sS'trials_2.thisN'
p19782
I3
sa(dp19783
g20
g21
sS'trials.thisIndex'
p19784
g36
(g38
S'\x00\x00\x00\x00'
tRp19785
sg22
V
sS'trials_2.thisRepN'
p19786
I3
sS'trials_2.thisTrialN'
p19787
I0
sS'trials.thisRepN'
p19788
I56
sS'trials_2.thisTrial'
p19789
NsS'trials.thisN'
p19790
I112
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19791
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19792
I0
sS'trials_2.thisN'
p19793
I3
sa(dp19794
g20
g21
sS'trials.thisIndex'
p19795
g36
(g38
S'\x01\x00\x00\x00'
tRp19796
sg22
V
sS'trials_2.thisRepN'
p19797
I3
sS'trials_2.thisTrialN'
p19798
I0
sS'trials.thisRepN'
p19799
I56
sS'trials_2.thisTrial'
p19800
NsS'trials.thisN'
p19801
I113
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19802
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19803
I1
sS'trials_2.thisN'
p19804
I3
sa(dp19805
g20
g21
sS'trials.thisIndex'
p19806
g36
(g38
S'\x00\x00\x00\x00'
tRp19807
sg22
V
sS'trials_2.thisRepN'
p19808
I3
sS'trials_2.thisTrialN'
p19809
I0
sS'trials.thisRepN'
p19810
I57
sS'trials_2.thisTrial'
p19811
NsS'trials.thisN'
p19812
I114
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19813
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19814
I0
sS'trials_2.thisN'
p19815
I3
sa(dp19816
g20
g21
sS'trials.thisIndex'
p19817
g36
(g38
S'\x01\x00\x00\x00'
tRp19818
sg22
V
sS'trials_2.thisRepN'
p19819
I3
sS'trials_2.thisTrialN'
p19820
I0
sS'trials.thisRepN'
p19821
I57
sS'trials_2.thisTrial'
p19822
NsS'trials.thisN'
p19823
I115
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19824
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19825
I1
sS'trials_2.thisN'
p19826
I3
sa(dp19827
g20
g21
sS'trials.thisIndex'
p19828
g36
(g38
S'\x00\x00\x00\x00'
tRp19829
sg22
V
sS'trials_2.thisRepN'
p19830
I3
sS'trials_2.thisTrialN'
p19831
I0
sS'trials.thisRepN'
p19832
I58
sS'trials_2.thisTrial'
p19833
NsS'trials.thisN'
p19834
I116
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19835
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19836
I0
sS'trials_2.thisN'
p19837
I3
sa(dp19838
g20
g21
sS'trials.thisIndex'
p19839
g36
(g38
S'\x01\x00\x00\x00'
tRp19840
sg22
V
sS'trials_2.thisRepN'
p19841
I3
sS'trials_2.thisTrialN'
p19842
I0
sS'trials.thisRepN'
p19843
I58
sS'trials_2.thisTrial'
p19844
NsS'trials.thisN'
p19845
I117
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19846
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19847
I1
sS'trials_2.thisN'
p19848
I3
sa(dp19849
g20
g21
sS'trials.thisIndex'
p19850
g36
(g38
S'\x00\x00\x00\x00'
tRp19851
sg22
V
sS'trials_2.thisRepN'
p19852
I3
sS'trials_2.thisTrialN'
p19853
I0
sS'trials.thisRepN'
p19854
I59
sS'trials_2.thisTrial'
p19855
NsS'trials.thisN'
p19856
I118
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19857
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19858
I0
sS'trials_2.thisN'
p19859
I3
sa(dp19860
g20
g21
sS'trials.thisIndex'
p19861
g36
(g38
S'\x01\x00\x00\x00'
tRp19862
sg22
V
sS'trials_2.thisRepN'
p19863
I3
sS'trials_2.thisTrialN'
p19864
I0
sS'trials.thisRepN'
p19865
I59
sS'trials_2.thisTrial'
p19866
NsS'trials.thisN'
p19867
I119
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19868
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19869
I1
sS'trials_2.thisN'
p19870
I3
sa(dp19871
g20
g21
sS'trials.thisIndex'
p19872
g36
(g38
S'\x00\x00\x00\x00'
tRp19873
sg22
V
sS'trials_2.thisRepN'
p19874
I3
sS'trials_2.thisTrialN'
p19875
I0
sS'trials.thisRepN'
p19876
I60
sS'trials_2.thisTrial'
p19877
NsS'trials.thisN'
p19878
I120
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19879
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19880
I0
sS'trials_2.thisN'
p19881
I3
sa(dp19882
g20
g21
sS'trials.thisIndex'
p19883
g36
(g38
S'\x01\x00\x00\x00'
tRp19884
sg22
V
sS'trials_2.thisRepN'
p19885
I3
sS'trials_2.thisTrialN'
p19886
I0
sS'trials.thisRepN'
p19887
I60
sS'trials_2.thisTrial'
p19888
NsS'trials.thisN'
p19889
I121
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19890
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19891
I1
sS'trials_2.thisN'
p19892
I3
sa(dp19893
g20
g21
sS'trials.thisIndex'
p19894
g36
(g38
S'\x00\x00\x00\x00'
tRp19895
sg22
V
sS'trials_2.thisRepN'
p19896
I3
sS'trials_2.thisTrialN'
p19897
I0
sS'trials.thisRepN'
p19898
I61
sS'trials_2.thisTrial'
p19899
NsS'trials.thisN'
p19900
I122
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19901
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19902
I0
sS'trials_2.thisN'
p19903
I3
sa(dp19904
g20
g21
sS'trials.thisIndex'
p19905
g36
(g38
S'\x01\x00\x00\x00'
tRp19906
sg22
V
sS'trials_2.thisRepN'
p19907
I3
sS'trials_2.thisTrialN'
p19908
I0
sS'trials.thisRepN'
p19909
I61
sS'trials_2.thisTrial'
p19910
NsS'trials.thisN'
p19911
I123
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19912
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19913
I1
sS'trials_2.thisN'
p19914
I3
sa(dp19915
g20
g21
sS'trials.thisIndex'
p19916
g36
(g38
S'\x00\x00\x00\x00'
tRp19917
sg22
V
sS'trials_2.thisRepN'
p19918
I3
sS'trials_2.thisTrialN'
p19919
I0
sS'trials.thisRepN'
p19920
I62
sS'trials_2.thisTrial'
p19921
NsS'trials.thisN'
p19922
I124
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19923
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19924
I0
sS'trials_2.thisN'
p19925
I3
sa(dp19926
g20
g21
sS'trials.thisIndex'
p19927
g36
(g38
S'\x01\x00\x00\x00'
tRp19928
sg22
V
sS'trials_2.thisRepN'
p19929
I3
sS'trials_2.thisTrialN'
p19930
I0
sS'trials.thisRepN'
p19931
I62
sS'trials_2.thisTrial'
p19932
NsS'trials.thisN'
p19933
I125
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19934
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19935
I1
sS'trials_2.thisN'
p19936
I3
sa(dp19937
g20
g21
sS'trials.thisIndex'
p19938
g36
(g38
S'\x00\x00\x00\x00'
tRp19939
sg22
V
sS'trials_2.thisRepN'
p19940
I3
sS'trials_2.thisTrialN'
p19941
I0
sS'trials.thisRepN'
p19942
I63
sS'trials_2.thisTrial'
p19943
NsS'trials.thisN'
p19944
I126
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19945
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19946
I0
sS'trials_2.thisN'
p19947
I3
sa(dp19948
g20
g21
sS'trials.thisIndex'
p19949
g36
(g38
S'\x01\x00\x00\x00'
tRp19950
sg22
V
sS'trials_2.thisRepN'
p19951
I3
sS'trials_2.thisTrialN'
p19952
I0
sS'trials.thisRepN'
p19953
I63
sS'trials_2.thisTrial'
p19954
NsS'trials.thisN'
p19955
I127
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19956
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19957
I1
sS'trials_2.thisN'
p19958
I3
sa(dp19959
g20
g21
sS'trials.thisIndex'
p19960
g36
(g38
S'\x00\x00\x00\x00'
tRp19961
sg22
V
sS'trials_2.thisRepN'
p19962
I3
sS'trials_2.thisTrialN'
p19963
I0
sS'trials.thisRepN'
p19964
I64
sS'trials_2.thisTrial'
p19965
NsS'trials.thisN'
p19966
I128
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19967
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19968
I0
sS'trials_2.thisN'
p19969
I3
sa(dp19970
g20
g21
sS'trials.thisIndex'
p19971
g36
(g38
S'\x01\x00\x00\x00'
tRp19972
sg22
V
sS'trials_2.thisRepN'
p19973
I3
sS'trials_2.thisTrialN'
p19974
I0
sS'trials.thisRepN'
p19975
I64
sS'trials_2.thisTrial'
p19976
NsS'trials.thisN'
p19977
I129
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19978
g18556
sg18557
g18570
sS'trials.thisTrialN'
p19979
I1
sS'trials_2.thisN'
p19980
I3
sa(dp19981
g20
g21
sS'trials.thisIndex'
p19982
g36
(g38
S'\x00\x00\x00\x00'
tRp19983
sg22
V
sS'trials_2.thisRepN'
p19984
I3
sS'trials_2.thisTrialN'
p19985
I0
sS'trials.thisRepN'
p19986
I65
sS'trials_2.thisTrial'
p19987
NsS'trials.thisN'
p19988
I130
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p19989
g18556
sg18557
g18558
sS'trials.thisTrialN'
p19990
I0
sS'trials_2.thisN'
p19991
I3
sa(dp19992
g20
g21
sS'trials.thisIndex'
p19993
g36
(g38
S'\x01\x00\x00\x00'
tRp19994
sg22
V
sS'trials_2.thisRepN'
p19995
I3
sS'trials_2.thisTrialN'
p19996
I0
sS'trials.thisRepN'
p19997
I65
sS'trials_2.thisTrial'
p19998
NsS'trials.thisN'
p19999
I131
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20000
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20001
I1
sS'trials_2.thisN'
p20002
I3
sa(dp20003
g20
g21
sS'trials.thisIndex'
p20004
g36
(g38
S'\x00\x00\x00\x00'
tRp20005
sg22
V
sS'trials_2.thisRepN'
p20006
I3
sS'trials_2.thisTrialN'
p20007
I0
sS'trials.thisRepN'
p20008
I66
sS'trials_2.thisTrial'
p20009
NsS'trials.thisN'
p20010
I132
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20011
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20012
I0
sS'trials_2.thisN'
p20013
I3
sa(dp20014
g20
g21
sS'trials.thisIndex'
p20015
g36
(g38
S'\x01\x00\x00\x00'
tRp20016
sg22
V
sS'trials_2.thisRepN'
p20017
I3
sS'trials_2.thisTrialN'
p20018
I0
sS'trials.thisRepN'
p20019
I66
sS'trials_2.thisTrial'
p20020
NsS'trials.thisN'
p20021
I133
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20022
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20023
I1
sS'trials_2.thisN'
p20024
I3
sa(dp20025
g20
g21
sS'trials.thisIndex'
p20026
g36
(g38
S'\x00\x00\x00\x00'
tRp20027
sg22
V
sS'trials_2.thisRepN'
p20028
I3
sS'trials_2.thisTrialN'
p20029
I0
sS'trials.thisRepN'
p20030
I67
sS'trials_2.thisTrial'
p20031
NsS'trials.thisN'
p20032
I134
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20033
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20034
I0
sS'trials_2.thisN'
p20035
I3
sa(dp20036
g20
g21
sS'trials.thisIndex'
p20037
g36
(g38
S'\x01\x00\x00\x00'
tRp20038
sg22
V
sS'trials_2.thisRepN'
p20039
I3
sS'trials_2.thisTrialN'
p20040
I0
sS'trials.thisRepN'
p20041
I67
sS'trials_2.thisTrial'
p20042
NsS'trials.thisN'
p20043
I135
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20044
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20045
I1
sS'trials_2.thisN'
p20046
I3
sa(dp20047
g20
g21
sS'trials.thisIndex'
p20048
g36
(g38
S'\x00\x00\x00\x00'
tRp20049
sg22
V
sS'trials_2.thisRepN'
p20050
I3
sS'trials_2.thisTrialN'
p20051
I0
sS'trials.thisRepN'
p20052
I68
sS'trials_2.thisTrial'
p20053
NsS'trials.thisN'
p20054
I136
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20055
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20056
I0
sS'trials_2.thisN'
p20057
I3
sa(dp20058
g20
g21
sS'trials.thisIndex'
p20059
g36
(g38
S'\x01\x00\x00\x00'
tRp20060
sg22
V
sS'trials_2.thisRepN'
p20061
I3
sS'trials_2.thisTrialN'
p20062
I0
sS'trials.thisRepN'
p20063
I68
sS'trials_2.thisTrial'
p20064
NsS'trials.thisN'
p20065
I137
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20066
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20067
I1
sS'trials_2.thisN'
p20068
I3
sa(dp20069
g20
g21
sS'trials.thisIndex'
p20070
g36
(g38
S'\x00\x00\x00\x00'
tRp20071
sg22
V
sS'trials_2.thisRepN'
p20072
I3
sS'trials_2.thisTrialN'
p20073
I0
sS'trials.thisRepN'
p20074
I69
sS'trials_2.thisTrial'
p20075
NsS'trials.thisN'
p20076
I138
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20077
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20078
I0
sS'trials_2.thisN'
p20079
I3
sa(dp20080
g20
g21
sS'trials.thisIndex'
p20081
g36
(g38
S'\x01\x00\x00\x00'
tRp20082
sg22
V
sS'trials_2.thisRepN'
p20083
I3
sS'trials_2.thisTrialN'
p20084
I0
sS'trials.thisRepN'
p20085
I69
sS'trials_2.thisTrial'
p20086
NsS'trials.thisN'
p20087
I139
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20088
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20089
I1
sS'trials_2.thisN'
p20090
I3
sa(dp20091
g20
g21
sS'trials.thisIndex'
p20092
g36
(g38
S'\x00\x00\x00\x00'
tRp20093
sg22
V
sS'trials_2.thisRepN'
p20094
I3
sS'trials_2.thisTrialN'
p20095
I0
sS'trials.thisRepN'
p20096
I70
sS'trials_2.thisTrial'
p20097
NsS'trials.thisN'
p20098
I140
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20099
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20100
I0
sS'trials_2.thisN'
p20101
I3
sa(dp20102
g20
g21
sS'trials.thisIndex'
p20103
g36
(g38
S'\x01\x00\x00\x00'
tRp20104
sg22
V
sS'trials_2.thisRepN'
p20105
I3
sS'trials_2.thisTrialN'
p20106
I0
sS'trials.thisRepN'
p20107
I70
sS'trials_2.thisTrial'
p20108
NsS'trials.thisN'
p20109
I141
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20110
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20111
I1
sS'trials_2.thisN'
p20112
I3
sa(dp20113
g20
g21
sS'trials.thisIndex'
p20114
g36
(g38
S'\x00\x00\x00\x00'
tRp20115
sg22
V
sS'trials_2.thisRepN'
p20116
I3
sS'trials_2.thisTrialN'
p20117
I0
sS'trials.thisRepN'
p20118
I71
sS'trials_2.thisTrial'
p20119
NsS'trials.thisN'
p20120
I142
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20121
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20122
I0
sS'trials_2.thisN'
p20123
I3
sa(dp20124
g20
g21
sS'trials.thisIndex'
p20125
g36
(g38
S'\x01\x00\x00\x00'
tRp20126
sg22
V
sS'trials_2.thisRepN'
p20127
I3
sS'trials_2.thisTrialN'
p20128
I0
sS'trials.thisRepN'
p20129
I71
sS'trials_2.thisTrial'
p20130
NsS'trials.thisN'
p20131
I143
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20132
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20133
I1
sS'trials_2.thisN'
p20134
I3
sa(dp20135
g20
g21
sS'trials.thisIndex'
p20136
g36
(g38
S'\x00\x00\x00\x00'
tRp20137
sg22
V
sS'trials_2.thisRepN'
p20138
I3
sS'trials_2.thisTrialN'
p20139
I0
sS'trials.thisRepN'
p20140
I72
sS'trials_2.thisTrial'
p20141
NsS'trials.thisN'
p20142
I144
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20143
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20144
I0
sS'trials_2.thisN'
p20145
I3
sa(dp20146
g20
g21
sS'trials.thisIndex'
p20147
g36
(g38
S'\x01\x00\x00\x00'
tRp20148
sg22
V
sS'trials_2.thisRepN'
p20149
I3
sS'trials_2.thisTrialN'
p20150
I0
sS'trials.thisRepN'
p20151
I72
sS'trials_2.thisTrial'
p20152
NsS'trials.thisN'
p20153
I145
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20154
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20155
I1
sS'trials_2.thisN'
p20156
I3
sa(dp20157
g20
g21
sS'trials.thisIndex'
p20158
g36
(g38
S'\x00\x00\x00\x00'
tRp20159
sg22
V
sS'trials_2.thisRepN'
p20160
I3
sS'trials_2.thisTrialN'
p20161
I0
sS'trials.thisRepN'
p20162
I73
sS'trials_2.thisTrial'
p20163
NsS'trials.thisN'
p20164
I146
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20165
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20166
I0
sS'trials_2.thisN'
p20167
I3
sa(dp20168
g20
g21
sS'trials.thisIndex'
p20169
g36
(g38
S'\x01\x00\x00\x00'
tRp20170
sg22
V
sS'trials_2.thisRepN'
p20171
I3
sS'trials_2.thisTrialN'
p20172
I0
sS'trials.thisRepN'
p20173
I73
sS'trials_2.thisTrial'
p20174
NsS'trials.thisN'
p20175
I147
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20176
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20177
I1
sS'trials_2.thisN'
p20178
I3
sa(dp20179
g20
g21
sS'trials.thisIndex'
p20180
g36
(g38
S'\x00\x00\x00\x00'
tRp20181
sg22
V
sS'trials_2.thisRepN'
p20182
I3
sS'trials_2.thisTrialN'
p20183
I0
sS'trials.thisRepN'
p20184
I74
sS'trials_2.thisTrial'
p20185
NsS'trials.thisN'
p20186
I148
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20187
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20188
I0
sS'trials_2.thisN'
p20189
I3
sa(dp20190
g20
g21
sS'trials.thisIndex'
p20191
g36
(g38
S'\x01\x00\x00\x00'
tRp20192
sg22
V
sS'trials_2.thisRepN'
p20193
I3
sS'trials_2.thisTrialN'
p20194
I0
sS'trials.thisRepN'
p20195
I74
sS'trials_2.thisTrial'
p20196
NsS'trials.thisN'
p20197
I149
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20198
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20199
I1
sS'trials_2.thisN'
p20200
I3
sa(dp20201
g20
g21
sS'trials.thisIndex'
p20202
g36
(g38
S'\x00\x00\x00\x00'
tRp20203
sg22
V
sS'trials_2.thisRepN'
p20204
I3
sS'trials_2.thisTrialN'
p20205
I0
sS'trials.thisRepN'
p20206
I75
sS'trials_2.thisTrial'
p20207
NsS'trials.thisN'
p20208
I150
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20209
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20210
I0
sS'trials_2.thisN'
p20211
I3
sa(dp20212
g20
g21
sS'trials.thisIndex'
p20213
g36
(g38
S'\x01\x00\x00\x00'
tRp20214
sg22
V
sS'trials_2.thisRepN'
p20215
I3
sS'trials_2.thisTrialN'
p20216
I0
sS'trials.thisRepN'
p20217
I75
sS'trials_2.thisTrial'
p20218
NsS'trials.thisN'
p20219
I151
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20220
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20221
I1
sS'trials_2.thisN'
p20222
I3
sa(dp20223
g20
g21
sS'trials.thisIndex'
p20224
g36
(g38
S'\x00\x00\x00\x00'
tRp20225
sg22
V
sS'trials_2.thisRepN'
p20226
I3
sS'trials_2.thisTrialN'
p20227
I0
sS'trials.thisRepN'
p20228
I76
sS'trials_2.thisTrial'
p20229
NsS'trials.thisN'
p20230
I152
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20231
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20232
I0
sS'trials_2.thisN'
p20233
I3
sa(dp20234
g20
g21
sS'trials.thisIndex'
p20235
g36
(g38
S'\x01\x00\x00\x00'
tRp20236
sg22
V
sS'trials_2.thisRepN'
p20237
I3
sS'trials_2.thisTrialN'
p20238
I0
sS'trials.thisRepN'
p20239
I76
sS'trials_2.thisTrial'
p20240
NsS'trials.thisN'
p20241
I153
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20242
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20243
I1
sS'trials_2.thisN'
p20244
I3
sa(dp20245
g20
g21
sS'trials.thisIndex'
p20246
g36
(g38
S'\x00\x00\x00\x00'
tRp20247
sg22
V
sS'trials_2.thisRepN'
p20248
I3
sS'trials_2.thisTrialN'
p20249
I0
sS'trials.thisRepN'
p20250
I77
sS'trials_2.thisTrial'
p20251
NsS'trials.thisN'
p20252
I154
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20253
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20254
I0
sS'trials_2.thisN'
p20255
I3
sa(dp20256
g20
g21
sS'trials.thisIndex'
p20257
g36
(g38
S'\x01\x00\x00\x00'
tRp20258
sg22
V
sS'trials_2.thisRepN'
p20259
I3
sS'trials_2.thisTrialN'
p20260
I0
sS'trials.thisRepN'
p20261
I77
sS'trials_2.thisTrial'
p20262
NsS'trials.thisN'
p20263
I155
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20264
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20265
I1
sS'trials_2.thisN'
p20266
I3
sa(dp20267
g20
g21
sS'trials.thisIndex'
p20268
g36
(g38
S'\x00\x00\x00\x00'
tRp20269
sg22
V
sS'trials_2.thisRepN'
p20270
I3
sS'trials_2.thisTrialN'
p20271
I0
sS'trials.thisRepN'
p20272
I78
sS'trials_2.thisTrial'
p20273
NsS'trials.thisN'
p20274
I156
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20275
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20276
I0
sS'trials_2.thisN'
p20277
I3
sa(dp20278
g20
g21
sS'trials.thisIndex'
p20279
g36
(g38
S'\x01\x00\x00\x00'
tRp20280
sg22
V
sS'trials_2.thisRepN'
p20281
I3
sS'trials_2.thisTrialN'
p20282
I0
sS'trials.thisRepN'
p20283
I78
sS'trials_2.thisTrial'
p20284
NsS'trials.thisN'
p20285
I157
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20286
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20287
I1
sS'trials_2.thisN'
p20288
I3
sa(dp20289
g20
g21
sS'trials.thisIndex'
p20290
g36
(g38
S'\x00\x00\x00\x00'
tRp20291
sg22
V
sS'trials_2.thisRepN'
p20292
I3
sS'trials_2.thisTrialN'
p20293
I0
sS'trials.thisRepN'
p20294
I79
sS'trials_2.thisTrial'
p20295
NsS'trials.thisN'
p20296
I158
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20297
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20298
I0
sS'trials_2.thisN'
p20299
I3
sa(dp20300
g20
g21
sS'trials.thisIndex'
p20301
g36
(g38
S'\x01\x00\x00\x00'
tRp20302
sg22
V
sS'trials_2.thisRepN'
p20303
I3
sS'trials_2.thisTrialN'
p20304
I0
sS'trials.thisRepN'
p20305
I79
sS'trials_2.thisTrial'
p20306
NsS'trials.thisN'
p20307
I159
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20308
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20309
I1
sS'trials_2.thisN'
p20310
I3
sa(dp20311
g20
g21
sS'trials.thisIndex'
p20312
g36
(g38
S'\x00\x00\x00\x00'
tRp20313
sg22
V
sS'trials_2.thisRepN'
p20314
I3
sS'trials_2.thisTrialN'
p20315
I0
sS'trials.thisRepN'
p20316
I80
sS'trials_2.thisTrial'
p20317
NsS'trials.thisN'
p20318
I160
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20319
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20320
I0
sS'trials_2.thisN'
p20321
I3
sa(dp20322
g20
g21
sS'trials.thisIndex'
p20323
g36
(g38
S'\x01\x00\x00\x00'
tRp20324
sg22
V
sS'trials_2.thisRepN'
p20325
I3
sS'trials_2.thisTrialN'
p20326
I0
sS'trials.thisRepN'
p20327
I80
sS'trials_2.thisTrial'
p20328
NsS'trials.thisN'
p20329
I161
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20330
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20331
I1
sS'trials_2.thisN'
p20332
I3
sa(dp20333
g20
g21
sS'trials.thisIndex'
p20334
g36
(g38
S'\x00\x00\x00\x00'
tRp20335
sg22
V
sS'trials_2.thisRepN'
p20336
I3
sS'trials_2.thisTrialN'
p20337
I0
sS'trials.thisRepN'
p20338
I81
sS'trials_2.thisTrial'
p20339
NsS'trials.thisN'
p20340
I162
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20341
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20342
I0
sS'trials_2.thisN'
p20343
I3
sa(dp20344
g20
g21
sS'trials.thisIndex'
p20345
g36
(g38
S'\x01\x00\x00\x00'
tRp20346
sg22
V
sS'trials_2.thisRepN'
p20347
I3
sS'trials_2.thisTrialN'
p20348
I0
sS'trials.thisRepN'
p20349
I81
sS'trials_2.thisTrial'
p20350
NsS'trials.thisN'
p20351
I163
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20352
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20353
I1
sS'trials_2.thisN'
p20354
I3
sa(dp20355
g20
g21
sS'trials.thisIndex'
p20356
g36
(g38
S'\x00\x00\x00\x00'
tRp20357
sg22
V
sS'trials_2.thisRepN'
p20358
I3
sS'trials_2.thisTrialN'
p20359
I0
sS'trials.thisRepN'
p20360
I82
sS'trials_2.thisTrial'
p20361
NsS'trials.thisN'
p20362
I164
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20363
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20364
I0
sS'trials_2.thisN'
p20365
I3
sa(dp20366
g20
g21
sS'trials.thisIndex'
p20367
g36
(g38
S'\x01\x00\x00\x00'
tRp20368
sg22
V
sS'trials_2.thisRepN'
p20369
I3
sS'trials_2.thisTrialN'
p20370
I0
sS'trials.thisRepN'
p20371
I82
sS'trials_2.thisTrial'
p20372
NsS'trials.thisN'
p20373
I165
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20374
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20375
I1
sS'trials_2.thisN'
p20376
I3
sa(dp20377
g20
g21
sS'trials.thisIndex'
p20378
g36
(g38
S'\x00\x00\x00\x00'
tRp20379
sg22
V
sS'trials_2.thisRepN'
p20380
I3
sS'trials_2.thisTrialN'
p20381
I0
sS'trials.thisRepN'
p20382
I83
sS'trials_2.thisTrial'
p20383
NsS'trials.thisN'
p20384
I166
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20385
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20386
I0
sS'trials_2.thisN'
p20387
I3
sa(dp20388
g20
g21
sS'trials.thisIndex'
p20389
g36
(g38
S'\x01\x00\x00\x00'
tRp20390
sg22
V
sS'trials_2.thisRepN'
p20391
I3
sS'trials_2.thisTrialN'
p20392
I0
sS'trials.thisRepN'
p20393
I83
sS'trials_2.thisTrial'
p20394
NsS'trials.thisN'
p20395
I167
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20396
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20397
I1
sS'trials_2.thisN'
p20398
I3
sa(dp20399
g20
g21
sS'trials.thisIndex'
p20400
g36
(g38
S'\x00\x00\x00\x00'
tRp20401
sg22
V
sS'trials_2.thisRepN'
p20402
I3
sS'trials_2.thisTrialN'
p20403
I0
sS'trials.thisRepN'
p20404
I84
sS'trials_2.thisTrial'
p20405
NsS'trials.thisN'
p20406
I168
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20407
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20408
I0
sS'trials_2.thisN'
p20409
I3
sa(dp20410
g20
g21
sS'trials.thisIndex'
p20411
g36
(g38
S'\x01\x00\x00\x00'
tRp20412
sg22
V
sS'trials_2.thisRepN'
p20413
I3
sS'trials_2.thisTrialN'
p20414
I0
sS'trials.thisRepN'
p20415
I84
sS'trials_2.thisTrial'
p20416
NsS'trials.thisN'
p20417
I169
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20418
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20419
I1
sS'trials_2.thisN'
p20420
I3
sa(dp20421
g20
g21
sS'trials.thisIndex'
p20422
g36
(g38
S'\x00\x00\x00\x00'
tRp20423
sg22
V
sS'trials_2.thisRepN'
p20424
I3
sS'trials_2.thisTrialN'
p20425
I0
sS'trials.thisRepN'
p20426
I85
sS'trials_2.thisTrial'
p20427
NsS'trials.thisN'
p20428
I170
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20429
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20430
I0
sS'trials_2.thisN'
p20431
I3
sa(dp20432
g20
g21
sS'trials.thisIndex'
p20433
g36
(g38
S'\x01\x00\x00\x00'
tRp20434
sg22
V
sS'trials_2.thisRepN'
p20435
I3
sS'trials_2.thisTrialN'
p20436
I0
sS'trials.thisRepN'
p20437
I85
sS'trials_2.thisTrial'
p20438
NsS'trials.thisN'
p20439
I171
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20440
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20441
I1
sS'trials_2.thisN'
p20442
I3
sa(dp20443
g20
g21
sS'trials.thisIndex'
p20444
g36
(g38
S'\x00\x00\x00\x00'
tRp20445
sg22
V
sS'trials_2.thisRepN'
p20446
I3
sS'trials_2.thisTrialN'
p20447
I0
sS'trials.thisRepN'
p20448
I86
sS'trials_2.thisTrial'
p20449
NsS'trials.thisN'
p20450
I172
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20451
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20452
I0
sS'trials_2.thisN'
p20453
I3
sa(dp20454
g20
g21
sS'trials.thisIndex'
p20455
g36
(g38
S'\x01\x00\x00\x00'
tRp20456
sg22
V
sS'trials_2.thisRepN'
p20457
I3
sS'trials_2.thisTrialN'
p20458
I0
sS'trials.thisRepN'
p20459
I86
sS'trials_2.thisTrial'
p20460
NsS'trials.thisN'
p20461
I173
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20462
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20463
I1
sS'trials_2.thisN'
p20464
I3
sa(dp20465
g20
g21
sS'trials.thisIndex'
p20466
g36
(g38
S'\x00\x00\x00\x00'
tRp20467
sg22
V
sS'trials_2.thisRepN'
p20468
I3
sS'trials_2.thisTrialN'
p20469
I0
sS'trials.thisRepN'
p20470
I87
sS'trials_2.thisTrial'
p20471
NsS'trials.thisN'
p20472
I174
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20473
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20474
I0
sS'trials_2.thisN'
p20475
I3
sa(dp20476
g20
g21
sS'trials.thisIndex'
p20477
g36
(g38
S'\x01\x00\x00\x00'
tRp20478
sg22
V
sS'trials_2.thisRepN'
p20479
I3
sS'trials_2.thisTrialN'
p20480
I0
sS'trials.thisRepN'
p20481
I87
sS'trials_2.thisTrial'
p20482
NsS'trials.thisN'
p20483
I175
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20484
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20485
I1
sS'trials_2.thisN'
p20486
I3
sa(dp20487
g20
g21
sS'trials.thisIndex'
p20488
g36
(g38
S'\x00\x00\x00\x00'
tRp20489
sg22
V
sS'trials_2.thisRepN'
p20490
I3
sS'trials_2.thisTrialN'
p20491
I0
sS'trials.thisRepN'
p20492
I88
sS'trials_2.thisTrial'
p20493
NsS'trials.thisN'
p20494
I176
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20495
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20496
I0
sS'trials_2.thisN'
p20497
I3
sa(dp20498
g20
g21
sS'trials.thisIndex'
p20499
g36
(g38
S'\x01\x00\x00\x00'
tRp20500
sg22
V
sS'trials_2.thisRepN'
p20501
I3
sS'trials_2.thisTrialN'
p20502
I0
sS'trials.thisRepN'
p20503
I88
sS'trials_2.thisTrial'
p20504
NsS'trials.thisN'
p20505
I177
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20506
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20507
I1
sS'trials_2.thisN'
p20508
I3
sa(dp20509
g20
g21
sS'trials.thisIndex'
p20510
g36
(g38
S'\x00\x00\x00\x00'
tRp20511
sg22
V
sS'trials_2.thisRepN'
p20512
I3
sS'trials_2.thisTrialN'
p20513
I0
sS'trials.thisRepN'
p20514
I89
sS'trials_2.thisTrial'
p20515
NsS'trials.thisN'
p20516
I178
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20517
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20518
I0
sS'trials_2.thisN'
p20519
I3
sa(dp20520
g20
g21
sS'trials.thisIndex'
p20521
g36
(g38
S'\x01\x00\x00\x00'
tRp20522
sg22
V
sS'trials_2.thisRepN'
p20523
I3
sS'trials_2.thisTrialN'
p20524
I0
sS'trials.thisRepN'
p20525
I89
sS'trials_2.thisTrial'
p20526
NsS'trials.thisN'
p20527
I179
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20528
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20529
I1
sS'trials_2.thisN'
p20530
I3
sa(dp20531
g20
g21
sS'trials.thisIndex'
p20532
g36
(g38
S'\x00\x00\x00\x00'
tRp20533
sg22
V
sS'trials_2.thisRepN'
p20534
I3
sS'trials_2.thisTrialN'
p20535
I0
sS'trials.thisRepN'
p20536
I90
sS'trials_2.thisTrial'
p20537
NsS'trials.thisN'
p20538
I180
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20539
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20540
I0
sS'trials_2.thisN'
p20541
I3
sa(dp20542
g20
g21
sS'trials.thisIndex'
p20543
g36
(g38
S'\x01\x00\x00\x00'
tRp20544
sg22
V
sS'trials_2.thisRepN'
p20545
I3
sS'trials_2.thisTrialN'
p20546
I0
sS'trials.thisRepN'
p20547
I90
sS'trials_2.thisTrial'
p20548
NsS'trials.thisN'
p20549
I181
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20550
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20551
I1
sS'trials_2.thisN'
p20552
I3
sa(dp20553
g20
g21
sS'trials.thisIndex'
p20554
g36
(g38
S'\x00\x00\x00\x00'
tRp20555
sg22
V
sS'trials_2.thisRepN'
p20556
I3
sS'trials_2.thisTrialN'
p20557
I0
sS'trials.thisRepN'
p20558
I91
sS'trials_2.thisTrial'
p20559
NsS'trials.thisN'
p20560
I182
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20561
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20562
I0
sS'trials_2.thisN'
p20563
I3
sa(dp20564
g20
g21
sS'trials.thisIndex'
p20565
g36
(g38
S'\x01\x00\x00\x00'
tRp20566
sg22
V
sS'trials_2.thisRepN'
p20567
I3
sS'trials_2.thisTrialN'
p20568
I0
sS'trials.thisRepN'
p20569
I91
sS'trials_2.thisTrial'
p20570
NsS'trials.thisN'
p20571
I183
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20572
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20573
I1
sS'trials_2.thisN'
p20574
I3
sa(dp20575
g20
g21
sS'trials.thisIndex'
p20576
g36
(g38
S'\x00\x00\x00\x00'
tRp20577
sg22
V
sS'trials_2.thisRepN'
p20578
I3
sS'trials_2.thisTrialN'
p20579
I0
sS'trials.thisRepN'
p20580
I92
sS'trials_2.thisTrial'
p20581
NsS'trials.thisN'
p20582
I184
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20583
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20584
I0
sS'trials_2.thisN'
p20585
I3
sa(dp20586
g20
g21
sS'trials.thisIndex'
p20587
g36
(g38
S'\x01\x00\x00\x00'
tRp20588
sg22
V
sS'trials_2.thisRepN'
p20589
I3
sS'trials_2.thisTrialN'
p20590
I0
sS'trials.thisRepN'
p20591
I92
sS'trials_2.thisTrial'
p20592
NsS'trials.thisN'
p20593
I185
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20594
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20595
I1
sS'trials_2.thisN'
p20596
I3
sa(dp20597
g20
g21
sS'trials.thisIndex'
p20598
g36
(g38
S'\x00\x00\x00\x00'
tRp20599
sg22
V
sS'trials_2.thisRepN'
p20600
I3
sS'trials_2.thisTrialN'
p20601
I0
sS'trials.thisRepN'
p20602
I93
sS'trials_2.thisTrial'
p20603
NsS'trials.thisN'
p20604
I186
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20605
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20606
I0
sS'trials_2.thisN'
p20607
I3
sa(dp20608
g20
g21
sS'trials.thisIndex'
p20609
g36
(g38
S'\x01\x00\x00\x00'
tRp20610
sg22
V
sS'trials_2.thisRepN'
p20611
I3
sS'trials_2.thisTrialN'
p20612
I0
sS'trials.thisRepN'
p20613
I93
sS'trials_2.thisTrial'
p20614
NsS'trials.thisN'
p20615
I187
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20616
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20617
I1
sS'trials_2.thisN'
p20618
I3
sa(dp20619
g20
g21
sS'trials.thisIndex'
p20620
g36
(g38
S'\x00\x00\x00\x00'
tRp20621
sg22
V
sS'trials_2.thisRepN'
p20622
I3
sS'trials_2.thisTrialN'
p20623
I0
sS'trials.thisRepN'
p20624
I94
sS'trials_2.thisTrial'
p20625
NsS'trials.thisN'
p20626
I188
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20627
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20628
I0
sS'trials_2.thisN'
p20629
I3
sa(dp20630
g20
g21
sS'trials.thisIndex'
p20631
g36
(g38
S'\x01\x00\x00\x00'
tRp20632
sg22
V
sS'trials_2.thisRepN'
p20633
I3
sS'trials_2.thisTrialN'
p20634
I0
sS'trials.thisRepN'
p20635
I94
sS'trials_2.thisTrial'
p20636
NsS'trials.thisN'
p20637
I189
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20638
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20639
I1
sS'trials_2.thisN'
p20640
I3
sa(dp20641
g20
g21
sS'trials.thisIndex'
p20642
g36
(g38
S'\x00\x00\x00\x00'
tRp20643
sg22
V
sS'trials_2.thisRepN'
p20644
I3
sS'trials_2.thisTrialN'
p20645
I0
sS'trials.thisRepN'
p20646
I95
sS'trials_2.thisTrial'
p20647
NsS'trials.thisN'
p20648
I190
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20649
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20650
I0
sS'trials_2.thisN'
p20651
I3
sa(dp20652
g20
g21
sS'trials.thisIndex'
p20653
g36
(g38
S'\x01\x00\x00\x00'
tRp20654
sg22
V
sS'trials_2.thisRepN'
p20655
I3
sS'trials_2.thisTrialN'
p20656
I0
sS'trials.thisRepN'
p20657
I95
sS'trials_2.thisTrial'
p20658
NsS'trials.thisN'
p20659
I191
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20660
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20661
I1
sS'trials_2.thisN'
p20662
I3
sa(dp20663
g20
g21
sS'trials.thisIndex'
p20664
g36
(g38
S'\x00\x00\x00\x00'
tRp20665
sg22
V
sS'trials_2.thisRepN'
p20666
I3
sS'trials_2.thisTrialN'
p20667
I0
sS'trials.thisRepN'
p20668
I96
sS'trials_2.thisTrial'
p20669
NsS'trials.thisN'
p20670
I192
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20671
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20672
I0
sS'trials_2.thisN'
p20673
I3
sa(dp20674
g20
g21
sS'trials.thisIndex'
p20675
g36
(g38
S'\x01\x00\x00\x00'
tRp20676
sg22
V
sS'trials_2.thisRepN'
p20677
I3
sS'trials_2.thisTrialN'
p20678
I0
sS'trials.thisRepN'
p20679
I96
sS'trials_2.thisTrial'
p20680
NsS'trials.thisN'
p20681
I193
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20682
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20683
I1
sS'trials_2.thisN'
p20684
I3
sa(dp20685
g20
g21
sS'trials.thisIndex'
p20686
g36
(g38
S'\x00\x00\x00\x00'
tRp20687
sg22
V
sS'trials_2.thisRepN'
p20688
I3
sS'trials_2.thisTrialN'
p20689
I0
sS'trials.thisRepN'
p20690
I97
sS'trials_2.thisTrial'
p20691
NsS'trials.thisN'
p20692
I194
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20693
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20694
I0
sS'trials_2.thisN'
p20695
I3
sa(dp20696
g20
g21
sS'trials.thisIndex'
p20697
g36
(g38
S'\x01\x00\x00\x00'
tRp20698
sg22
V
sS'trials_2.thisRepN'
p20699
I3
sS'trials_2.thisTrialN'
p20700
I0
sS'trials.thisRepN'
p20701
I97
sS'trials_2.thisTrial'
p20702
NsS'trials.thisN'
p20703
I195
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20704
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20705
I1
sS'trials_2.thisN'
p20706
I3
sa(dp20707
g20
g21
sS'trials.thisIndex'
p20708
g36
(g38
S'\x00\x00\x00\x00'
tRp20709
sg22
V
sS'trials_2.thisRepN'
p20710
I3
sS'trials_2.thisTrialN'
p20711
I0
sS'trials.thisRepN'
p20712
I98
sS'trials_2.thisTrial'
p20713
NsS'trials.thisN'
p20714
I196
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20715
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20716
I0
sS'trials_2.thisN'
p20717
I3
sa(dp20718
g20
g21
sS'trials.thisIndex'
p20719
g36
(g38
S'\x01\x00\x00\x00'
tRp20720
sg22
V
sS'trials_2.thisRepN'
p20721
I3
sS'trials_2.thisTrialN'
p20722
I0
sS'trials.thisRepN'
p20723
I98
sS'trials_2.thisTrial'
p20724
NsS'trials.thisN'
p20725
I197
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20726
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20727
I1
sS'trials_2.thisN'
p20728
I3
sa(dp20729
g20
g21
sS'trials.thisIndex'
p20730
g36
(g38
S'\x00\x00\x00\x00'
tRp20731
sg22
V
sS'trials_2.thisRepN'
p20732
I3
sS'trials_2.thisTrialN'
p20733
I0
sS'trials.thisRepN'
p20734
I99
sS'trials_2.thisTrial'
p20735
NsS'trials.thisN'
p20736
I198
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20737
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20738
I0
sS'trials_2.thisN'
p20739
I3
sa(dp20740
g20
g21
sS'trials.thisIndex'
p20741
g36
(g38
S'\x01\x00\x00\x00'
tRp20742
sg22
V
sS'trials_2.thisRepN'
p20743
I3
sS'trials_2.thisTrialN'
p20744
I0
sS'trials.thisRepN'
p20745
I99
sS'trials_2.thisTrial'
p20746
NsS'trials.thisN'
p20747
I199
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20748
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20749
I1
sS'trials_2.thisN'
p20750
I3
sa(dp20751
g20
g21
sS'trials.thisIndex'
p20752
g36
(g38
S'\x00\x00\x00\x00'
tRp20753
sg22
V
sS'trials_2.thisRepN'
p20754
I3
sS'trials_2.thisTrialN'
p20755
I0
sS'trials.thisRepN'
p20756
I100
sS'trials_2.thisTrial'
p20757
NsS'trials.thisN'
p20758
I200
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20759
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20760
I0
sS'trials_2.thisN'
p20761
I3
sa(dp20762
g20
g21
sS'trials.thisIndex'
p20763
g36
(g38
S'\x01\x00\x00\x00'
tRp20764
sg22
V
sS'trials_2.thisRepN'
p20765
I3
sS'trials_2.thisTrialN'
p20766
I0
sS'trials.thisRepN'
p20767
I100
sS'trials_2.thisTrial'
p20768
NsS'trials.thisN'
p20769
I201
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20770
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20771
I1
sS'trials_2.thisN'
p20772
I3
sa(dp20773
g20
g21
sS'trials.thisIndex'
p20774
g36
(g38
S'\x00\x00\x00\x00'
tRp20775
sg22
V
sS'trials_2.thisRepN'
p20776
I3
sS'trials_2.thisTrialN'
p20777
I0
sS'trials.thisRepN'
p20778
I101
sS'trials_2.thisTrial'
p20779
NsS'trials.thisN'
p20780
I202
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20781
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20782
I0
sS'trials_2.thisN'
p20783
I3
sa(dp20784
g20
g21
sS'trials.thisIndex'
p20785
g36
(g38
S'\x01\x00\x00\x00'
tRp20786
sg22
V
sS'trials_2.thisRepN'
p20787
I3
sS'trials_2.thisTrialN'
p20788
I0
sS'trials.thisRepN'
p20789
I101
sS'trials_2.thisTrial'
p20790
NsS'trials.thisN'
p20791
I203
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20792
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20793
I1
sS'trials_2.thisN'
p20794
I3
sa(dp20795
g20
g21
sS'trials.thisIndex'
p20796
g36
(g38
S'\x00\x00\x00\x00'
tRp20797
sg22
V
sS'trials_2.thisRepN'
p20798
I3
sS'trials_2.thisTrialN'
p20799
I0
sS'trials.thisRepN'
p20800
I102
sS'trials_2.thisTrial'
p20801
NsS'trials.thisN'
p20802
I204
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20803
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20804
I0
sS'trials_2.thisN'
p20805
I3
sa(dp20806
g20
g21
sS'trials.thisIndex'
p20807
g36
(g38
S'\x01\x00\x00\x00'
tRp20808
sg22
V
sS'trials_2.thisRepN'
p20809
I3
sS'trials_2.thisTrialN'
p20810
I0
sS'trials.thisRepN'
p20811
I102
sS'trials_2.thisTrial'
p20812
NsS'trials.thisN'
p20813
I205
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20814
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20815
I1
sS'trials_2.thisN'
p20816
I3
sa(dp20817
g20
g21
sS'trials.thisIndex'
p20818
g36
(g38
S'\x00\x00\x00\x00'
tRp20819
sg22
V
sS'trials_2.thisRepN'
p20820
I3
sS'trials_2.thisTrialN'
p20821
I0
sS'trials.thisRepN'
p20822
I103
sS'trials_2.thisTrial'
p20823
NsS'trials.thisN'
p20824
I206
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20825
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20826
I0
sS'trials_2.thisN'
p20827
I3
sa(dp20828
g20
g21
sS'trials.thisIndex'
p20829
g36
(g38
S'\x01\x00\x00\x00'
tRp20830
sg22
V
sS'trials_2.thisRepN'
p20831
I3
sS'trials_2.thisTrialN'
p20832
I0
sS'trials.thisRepN'
p20833
I103
sS'trials_2.thisTrial'
p20834
NsS'trials.thisN'
p20835
I207
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20836
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20837
I1
sS'trials_2.thisN'
p20838
I3
sa(dp20839
g20
g21
sS'trials.thisIndex'
p20840
g36
(g38
S'\x00\x00\x00\x00'
tRp20841
sg22
V
sS'trials_2.thisRepN'
p20842
I3
sS'trials_2.thisTrialN'
p20843
I0
sS'trials.thisRepN'
p20844
I104
sS'trials_2.thisTrial'
p20845
NsS'trials.thisN'
p20846
I208
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20847
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20848
I0
sS'trials_2.thisN'
p20849
I3
sa(dp20850
g20
g21
sS'trials.thisIndex'
p20851
g36
(g38
S'\x01\x00\x00\x00'
tRp20852
sg22
V
sS'trials_2.thisRepN'
p20853
I3
sS'trials_2.thisTrialN'
p20854
I0
sS'trials.thisRepN'
p20855
I104
sS'trials_2.thisTrial'
p20856
NsS'trials.thisN'
p20857
I209
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20858
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20859
I1
sS'trials_2.thisN'
p20860
I3
sa(dp20861
g20
g21
sS'trials.thisIndex'
p20862
g36
(g38
S'\x00\x00\x00\x00'
tRp20863
sg22
V
sS'trials_2.thisRepN'
p20864
I3
sS'trials_2.thisTrialN'
p20865
I0
sS'trials.thisRepN'
p20866
I105
sS'trials_2.thisTrial'
p20867
NsS'trials.thisN'
p20868
I210
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20869
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20870
I0
sS'trials_2.thisN'
p20871
I3
sa(dp20872
g20
g21
sS'trials.thisIndex'
p20873
g36
(g38
S'\x01\x00\x00\x00'
tRp20874
sg22
V
sS'trials_2.thisRepN'
p20875
I3
sS'trials_2.thisTrialN'
p20876
I0
sS'trials.thisRepN'
p20877
I105
sS'trials_2.thisTrial'
p20878
NsS'trials.thisN'
p20879
I211
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20880
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20881
I1
sS'trials_2.thisN'
p20882
I3
sa(dp20883
g20
g21
sS'trials.thisIndex'
p20884
g36
(g38
S'\x00\x00\x00\x00'
tRp20885
sg22
V
sS'trials_2.thisRepN'
p20886
I3
sS'trials_2.thisTrialN'
p20887
I0
sS'trials.thisRepN'
p20888
I106
sS'trials_2.thisTrial'
p20889
NsS'trials.thisN'
p20890
I212
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20891
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20892
I0
sS'trials_2.thisN'
p20893
I3
sa(dp20894
g20
g21
sS'trials.thisIndex'
p20895
g36
(g38
S'\x01\x00\x00\x00'
tRp20896
sg22
V
sS'trials_2.thisRepN'
p20897
I3
sS'trials_2.thisTrialN'
p20898
I0
sS'trials.thisRepN'
p20899
I106
sS'trials_2.thisTrial'
p20900
NsS'trials.thisN'
p20901
I213
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20902
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20903
I1
sS'trials_2.thisN'
p20904
I3
sa(dp20905
g20
g21
sS'trials.thisIndex'
p20906
g36
(g38
S'\x00\x00\x00\x00'
tRp20907
sg22
V
sS'trials_2.thisRepN'
p20908
I3
sS'trials_2.thisTrialN'
p20909
I0
sS'trials.thisRepN'
p20910
I107
sS'trials_2.thisTrial'
p20911
NsS'trials.thisN'
p20912
I214
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20913
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20914
I0
sS'trials_2.thisN'
p20915
I3
sa(dp20916
g20
g21
sS'trials.thisIndex'
p20917
g36
(g38
S'\x01\x00\x00\x00'
tRp20918
sg22
V
sS'trials_2.thisRepN'
p20919
I3
sS'trials_2.thisTrialN'
p20920
I0
sS'trials.thisRepN'
p20921
I107
sS'trials_2.thisTrial'
p20922
NsS'trials.thisN'
p20923
I215
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20924
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20925
I1
sS'trials_2.thisN'
p20926
I3
sa(dp20927
g20
g21
sS'trials.thisIndex'
p20928
g36
(g38
S'\x00\x00\x00\x00'
tRp20929
sg22
V
sS'trials_2.thisRepN'
p20930
I3
sS'trials_2.thisTrialN'
p20931
I0
sS'trials.thisRepN'
p20932
I108
sS'trials_2.thisTrial'
p20933
NsS'trials.thisN'
p20934
I216
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20935
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20936
I0
sS'trials_2.thisN'
p20937
I3
sa(dp20938
g20
g21
sS'trials.thisIndex'
p20939
g36
(g38
S'\x01\x00\x00\x00'
tRp20940
sg22
V
sS'trials_2.thisRepN'
p20941
I3
sS'trials_2.thisTrialN'
p20942
I0
sS'trials.thisRepN'
p20943
I108
sS'trials_2.thisTrial'
p20944
NsS'trials.thisN'
p20945
I217
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20946
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20947
I1
sS'trials_2.thisN'
p20948
I3
sa(dp20949
g20
g21
sS'trials.thisIndex'
p20950
g36
(g38
S'\x00\x00\x00\x00'
tRp20951
sg22
V
sS'trials_2.thisRepN'
p20952
I3
sS'trials_2.thisTrialN'
p20953
I0
sS'trials.thisRepN'
p20954
I109
sS'trials_2.thisTrial'
p20955
NsS'trials.thisN'
p20956
I218
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20957
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20958
I0
sS'trials_2.thisN'
p20959
I3
sa(dp20960
g20
g21
sS'trials.thisIndex'
p20961
g36
(g38
S'\x01\x00\x00\x00'
tRp20962
sg22
V
sS'trials_2.thisRepN'
p20963
I3
sS'trials_2.thisTrialN'
p20964
I0
sS'trials.thisRepN'
p20965
I109
sS'trials_2.thisTrial'
p20966
NsS'trials.thisN'
p20967
I219
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20968
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20969
I1
sS'trials_2.thisN'
p20970
I3
sa(dp20971
g20
g21
sS'trials.thisIndex'
p20972
g36
(g38
S'\x00\x00\x00\x00'
tRp20973
sg22
V
sS'trials_2.thisRepN'
p20974
I3
sS'trials_2.thisTrialN'
p20975
I0
sS'trials.thisRepN'
p20976
I110
sS'trials_2.thisTrial'
p20977
NsS'trials.thisN'
p20978
I220
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20979
g18556
sg18557
g18558
sS'trials.thisTrialN'
p20980
I0
sS'trials_2.thisN'
p20981
I3
sa(dp20982
g20
g21
sS'trials.thisIndex'
p20983
g36
(g38
S'\x01\x00\x00\x00'
tRp20984
sg22
V
sS'trials_2.thisRepN'
p20985
I3
sS'trials_2.thisTrialN'
p20986
I0
sS'trials.thisRepN'
p20987
I110
sS'trials_2.thisTrial'
p20988
NsS'trials.thisN'
p20989
I221
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p20990
g18556
sg18557
g18570
sS'trials.thisTrialN'
p20991
I1
sS'trials_2.thisN'
p20992
I3
sa(dp20993
g20
g21
sS'trials.thisIndex'
p20994
g36
(g38
S'\x00\x00\x00\x00'
tRp20995
sg22
V
sS'trials_2.thisRepN'
p20996
I3
sS'trials_2.thisTrialN'
p20997
I0
sS'trials.thisRepN'
p20998
I111
sS'trials_2.thisTrial'
p20999
NsS'trials.thisN'
p21000
I222
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21001
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21002
I0
sS'trials_2.thisN'
p21003
I3
sa(dp21004
g20
g21
sS'trials.thisIndex'
p21005
g36
(g38
S'\x01\x00\x00\x00'
tRp21006
sg22
V
sS'trials_2.thisRepN'
p21007
I3
sS'trials_2.thisTrialN'
p21008
I0
sS'trials.thisRepN'
p21009
I111
sS'trials_2.thisTrial'
p21010
NsS'trials.thisN'
p21011
I223
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21012
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21013
I1
sS'trials_2.thisN'
p21014
I3
sa(dp21015
g20
g21
sS'trials.thisIndex'
p21016
g36
(g38
S'\x00\x00\x00\x00'
tRp21017
sg22
V
sS'trials_2.thisRepN'
p21018
I3
sS'trials_2.thisTrialN'
p21019
I0
sS'trials.thisRepN'
p21020
I112
sS'trials_2.thisTrial'
p21021
NsS'trials.thisN'
p21022
I224
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21023
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21024
I0
sS'trials_2.thisN'
p21025
I3
sa(dp21026
g20
g21
sS'trials.thisIndex'
p21027
g36
(g38
S'\x01\x00\x00\x00'
tRp21028
sg22
V
sS'trials_2.thisRepN'
p21029
I3
sS'trials_2.thisTrialN'
p21030
I0
sS'trials.thisRepN'
p21031
I112
sS'trials_2.thisTrial'
p21032
NsS'trials.thisN'
p21033
I225
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21034
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21035
I1
sS'trials_2.thisN'
p21036
I3
sa(dp21037
g20
g21
sS'trials.thisIndex'
p21038
g36
(g38
S'\x00\x00\x00\x00'
tRp21039
sg22
V
sS'trials_2.thisRepN'
p21040
I3
sS'trials_2.thisTrialN'
p21041
I0
sS'trials.thisRepN'
p21042
I113
sS'trials_2.thisTrial'
p21043
NsS'trials.thisN'
p21044
I226
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21045
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21046
I0
sS'trials_2.thisN'
p21047
I3
sa(dp21048
g20
g21
sS'trials.thisIndex'
p21049
g36
(g38
S'\x01\x00\x00\x00'
tRp21050
sg22
V
sS'trials_2.thisRepN'
p21051
I3
sS'trials_2.thisTrialN'
p21052
I0
sS'trials.thisRepN'
p21053
I113
sS'trials_2.thisTrial'
p21054
NsS'trials.thisN'
p21055
I227
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21056
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21057
I1
sS'trials_2.thisN'
p21058
I3
sa(dp21059
g20
g21
sS'trials.thisIndex'
p21060
g36
(g38
S'\x00\x00\x00\x00'
tRp21061
sg22
V
sS'trials_2.thisRepN'
p21062
I3
sS'trials_2.thisTrialN'
p21063
I0
sS'trials.thisRepN'
p21064
I114
sS'trials_2.thisTrial'
p21065
NsS'trials.thisN'
p21066
I228
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21067
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21068
I0
sS'trials_2.thisN'
p21069
I3
sa(dp21070
g20
g21
sS'trials.thisIndex'
p21071
g36
(g38
S'\x01\x00\x00\x00'
tRp21072
sg22
V
sS'trials_2.thisRepN'
p21073
I3
sS'trials_2.thisTrialN'
p21074
I0
sS'trials.thisRepN'
p21075
I114
sS'trials_2.thisTrial'
p21076
NsS'trials.thisN'
p21077
I229
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21078
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21079
I1
sS'trials_2.thisN'
p21080
I3
sa(dp21081
g20
g21
sS'trials.thisIndex'
p21082
g36
(g38
S'\x00\x00\x00\x00'
tRp21083
sg22
V
sS'trials_2.thisRepN'
p21084
I3
sS'trials_2.thisTrialN'
p21085
I0
sS'trials.thisRepN'
p21086
I115
sS'trials_2.thisTrial'
p21087
NsS'trials.thisN'
p21088
I230
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21089
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21090
I0
sS'trials_2.thisN'
p21091
I3
sa(dp21092
g20
g21
sS'trials.thisIndex'
p21093
g36
(g38
S'\x01\x00\x00\x00'
tRp21094
sg22
V
sS'trials_2.thisRepN'
p21095
I3
sS'trials_2.thisTrialN'
p21096
I0
sS'trials.thisRepN'
p21097
I115
sS'trials_2.thisTrial'
p21098
NsS'trials.thisN'
p21099
I231
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21100
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21101
I1
sS'trials_2.thisN'
p21102
I3
sa(dp21103
g20
g21
sS'trials.thisIndex'
p21104
g36
(g38
S'\x00\x00\x00\x00'
tRp21105
sg22
V
sS'trials_2.thisRepN'
p21106
I3
sS'trials_2.thisTrialN'
p21107
I0
sS'trials.thisRepN'
p21108
I116
sS'trials_2.thisTrial'
p21109
NsS'trials.thisN'
p21110
I232
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21111
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21112
I0
sS'trials_2.thisN'
p21113
I3
sa(dp21114
g20
g21
sS'trials.thisIndex'
p21115
g36
(g38
S'\x01\x00\x00\x00'
tRp21116
sg22
V
sS'trials_2.thisRepN'
p21117
I3
sS'trials_2.thisTrialN'
p21118
I0
sS'trials.thisRepN'
p21119
I116
sS'trials_2.thisTrial'
p21120
NsS'trials.thisN'
p21121
I233
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21122
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21123
I1
sS'trials_2.thisN'
p21124
I3
sa(dp21125
g20
g21
sS'trials.thisIndex'
p21126
g36
(g38
S'\x00\x00\x00\x00'
tRp21127
sg22
V
sS'trials_2.thisRepN'
p21128
I3
sS'trials_2.thisTrialN'
p21129
I0
sS'trials.thisRepN'
p21130
I117
sS'trials_2.thisTrial'
p21131
NsS'trials.thisN'
p21132
I234
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21133
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21134
I0
sS'trials_2.thisN'
p21135
I3
sa(dp21136
g20
g21
sS'trials.thisIndex'
p21137
g36
(g38
S'\x01\x00\x00\x00'
tRp21138
sg22
V
sS'trials_2.thisRepN'
p21139
I3
sS'trials_2.thisTrialN'
p21140
I0
sS'trials.thisRepN'
p21141
I117
sS'trials_2.thisTrial'
p21142
NsS'trials.thisN'
p21143
I235
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21144
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21145
I1
sS'trials_2.thisN'
p21146
I3
sa(dp21147
g20
g21
sS'trials.thisIndex'
p21148
g36
(g38
S'\x00\x00\x00\x00'
tRp21149
sg22
V
sS'trials_2.thisRepN'
p21150
I3
sS'trials_2.thisTrialN'
p21151
I0
sS'trials.thisRepN'
p21152
I118
sS'trials_2.thisTrial'
p21153
NsS'trials.thisN'
p21154
I236
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21155
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21156
I0
sS'trials_2.thisN'
p21157
I3
sa(dp21158
g20
g21
sS'trials.thisIndex'
p21159
g36
(g38
S'\x01\x00\x00\x00'
tRp21160
sg22
V
sS'trials_2.thisRepN'
p21161
I3
sS'trials_2.thisTrialN'
p21162
I0
sS'trials.thisRepN'
p21163
I118
sS'trials_2.thisTrial'
p21164
NsS'trials.thisN'
p21165
I237
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21166
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21167
I1
sS'trials_2.thisN'
p21168
I3
sa(dp21169
g20
g21
sS'trials.thisIndex'
p21170
g36
(g38
S'\x00\x00\x00\x00'
tRp21171
sg22
V
sS'trials_2.thisRepN'
p21172
I3
sS'trials_2.thisTrialN'
p21173
I0
sS'trials.thisRepN'
p21174
I119
sS'trials_2.thisTrial'
p21175
NsS'trials.thisN'
p21176
I238
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21177
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21178
I0
sS'trials_2.thisN'
p21179
I3
sa(dp21180
g20
g21
sS'trials.thisIndex'
p21181
g36
(g38
S'\x01\x00\x00\x00'
tRp21182
sg22
V
sS'trials_2.thisRepN'
p21183
I3
sS'trials_2.thisTrialN'
p21184
I0
sS'trials.thisRepN'
p21185
I119
sS'trials_2.thisTrial'
p21186
NsS'trials.thisN'
p21187
I239
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21188
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21189
I1
sS'trials_2.thisN'
p21190
I3
sa(dp21191
g20
g21
sS'trials.thisIndex'
p21192
g36
(g38
S'\x00\x00\x00\x00'
tRp21193
sg22
V
sS'trials_2.thisRepN'
p21194
I3
sS'trials_2.thisTrialN'
p21195
I0
sS'trials.thisRepN'
p21196
I120
sS'trials_2.thisTrial'
p21197
NsS'trials.thisN'
p21198
I240
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21199
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21200
I0
sS'trials_2.thisN'
p21201
I3
sa(dp21202
g20
g21
sS'trials.thisIndex'
p21203
g36
(g38
S'\x01\x00\x00\x00'
tRp21204
sg22
V
sS'trials_2.thisRepN'
p21205
I3
sS'trials_2.thisTrialN'
p21206
I0
sS'trials.thisRepN'
p21207
I120
sS'trials_2.thisTrial'
p21208
NsS'trials.thisN'
p21209
I241
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21210
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21211
I1
sS'trials_2.thisN'
p21212
I3
sa(dp21213
g20
g21
sS'trials.thisIndex'
p21214
g36
(g38
S'\x00\x00\x00\x00'
tRp21215
sg22
V
sS'trials_2.thisRepN'
p21216
I3
sS'trials_2.thisTrialN'
p21217
I0
sS'trials.thisRepN'
p21218
I121
sS'trials_2.thisTrial'
p21219
NsS'trials.thisN'
p21220
I242
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21221
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21222
I0
sS'trials_2.thisN'
p21223
I3
sa(dp21224
g20
g21
sS'trials.thisIndex'
p21225
g36
(g38
S'\x01\x00\x00\x00'
tRp21226
sg22
V
sS'trials_2.thisRepN'
p21227
I3
sS'trials_2.thisTrialN'
p21228
I0
sS'trials.thisRepN'
p21229
I121
sS'trials_2.thisTrial'
p21230
NsS'trials.thisN'
p21231
I243
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21232
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21233
I1
sS'trials_2.thisN'
p21234
I3
sa(dp21235
g20
g21
sS'trials.thisIndex'
p21236
g36
(g38
S'\x00\x00\x00\x00'
tRp21237
sg22
V
sS'trials_2.thisRepN'
p21238
I3
sS'trials_2.thisTrialN'
p21239
I0
sS'trials.thisRepN'
p21240
I122
sS'trials_2.thisTrial'
p21241
NsS'trials.thisN'
p21242
I244
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21243
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21244
I0
sS'trials_2.thisN'
p21245
I3
sa(dp21246
g20
g21
sS'trials.thisIndex'
p21247
g36
(g38
S'\x01\x00\x00\x00'
tRp21248
sg22
V
sS'trials_2.thisRepN'
p21249
I3
sS'trials_2.thisTrialN'
p21250
I0
sS'trials.thisRepN'
p21251
I122
sS'trials_2.thisTrial'
p21252
NsS'trials.thisN'
p21253
I245
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21254
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21255
I1
sS'trials_2.thisN'
p21256
I3
sa(dp21257
g20
g21
sS'trials.thisIndex'
p21258
g36
(g38
S'\x00\x00\x00\x00'
tRp21259
sg22
V
sS'trials_2.thisRepN'
p21260
I3
sS'trials_2.thisTrialN'
p21261
I0
sS'trials.thisRepN'
p21262
I123
sS'trials_2.thisTrial'
p21263
NsS'trials.thisN'
p21264
I246
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21265
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21266
I0
sS'trials_2.thisN'
p21267
I3
sa(dp21268
g20
g21
sS'trials.thisIndex'
p21269
g36
(g38
S'\x01\x00\x00\x00'
tRp21270
sg22
V
sS'trials_2.thisRepN'
p21271
I3
sS'trials_2.thisTrialN'
p21272
I0
sS'trials.thisRepN'
p21273
I123
sS'trials_2.thisTrial'
p21274
NsS'trials.thisN'
p21275
I247
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21276
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21277
I1
sS'trials_2.thisN'
p21278
I3
sa(dp21279
g20
g21
sS'trials.thisIndex'
p21280
g36
(g38
S'\x00\x00\x00\x00'
tRp21281
sg22
V
sS'trials_2.thisRepN'
p21282
I3
sS'trials_2.thisTrialN'
p21283
I0
sS'trials.thisRepN'
p21284
I124
sS'trials_2.thisTrial'
p21285
NsS'trials.thisN'
p21286
I248
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21287
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21288
I0
sS'trials_2.thisN'
p21289
I3
sa(dp21290
g20
g21
sS'trials.thisIndex'
p21291
g36
(g38
S'\x01\x00\x00\x00'
tRp21292
sg22
V
sS'trials_2.thisRepN'
p21293
I3
sS'trials_2.thisTrialN'
p21294
I0
sS'trials.thisRepN'
p21295
I124
sS'trials_2.thisTrial'
p21296
NsS'trials.thisN'
p21297
I249
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21298
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21299
I1
sS'trials_2.thisN'
p21300
I3
sa(dp21301
g20
g21
sS'trials.thisIndex'
p21302
g36
(g38
S'\x00\x00\x00\x00'
tRp21303
sg22
V
sS'trials_2.thisRepN'
p21304
I3
sS'trials_2.thisTrialN'
p21305
I0
sS'trials.thisRepN'
p21306
I125
sS'trials_2.thisTrial'
p21307
NsS'trials.thisN'
p21308
I250
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21309
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21310
I0
sS'trials_2.thisN'
p21311
I3
sa(dp21312
g20
g21
sS'trials.thisIndex'
p21313
g36
(g38
S'\x01\x00\x00\x00'
tRp21314
sg22
V
sS'trials_2.thisRepN'
p21315
I3
sS'trials_2.thisTrialN'
p21316
I0
sS'trials.thisRepN'
p21317
I125
sS'trials_2.thisTrial'
p21318
NsS'trials.thisN'
p21319
I251
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21320
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21321
I1
sS'trials_2.thisN'
p21322
I3
sa(dp21323
g20
g21
sS'trials.thisIndex'
p21324
g36
(g38
S'\x00\x00\x00\x00'
tRp21325
sg22
V
sS'trials_2.thisRepN'
p21326
I3
sS'trials_2.thisTrialN'
p21327
I0
sS'trials.thisRepN'
p21328
I126
sS'trials_2.thisTrial'
p21329
NsS'trials.thisN'
p21330
I252
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21331
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21332
I0
sS'trials_2.thisN'
p21333
I3
sa(dp21334
g20
g21
sS'trials.thisIndex'
p21335
g36
(g38
S'\x01\x00\x00\x00'
tRp21336
sg22
V
sS'trials_2.thisRepN'
p21337
I3
sS'trials_2.thisTrialN'
p21338
I0
sS'trials.thisRepN'
p21339
I126
sS'trials_2.thisTrial'
p21340
NsS'trials.thisN'
p21341
I253
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21342
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21343
I1
sS'trials_2.thisN'
p21344
I3
sa(dp21345
g20
g21
sS'trials.thisIndex'
p21346
g36
(g38
S'\x00\x00\x00\x00'
tRp21347
sg22
V
sS'trials_2.thisRepN'
p21348
I3
sS'trials_2.thisTrialN'
p21349
I0
sS'trials.thisRepN'
p21350
I127
sS'trials_2.thisTrial'
p21351
NsS'trials.thisN'
p21352
I254
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21353
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21354
I0
sS'trials_2.thisN'
p21355
I3
sa(dp21356
g20
g21
sS'trials.thisIndex'
p21357
g36
(g38
S'\x01\x00\x00\x00'
tRp21358
sg22
V
sS'trials_2.thisRepN'
p21359
I3
sS'trials_2.thisTrialN'
p21360
I0
sS'trials.thisRepN'
p21361
I127
sS'trials_2.thisTrial'
p21362
NsS'trials.thisN'
p21363
I255
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21364
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21365
I1
sS'trials_2.thisN'
p21366
I3
sa(dp21367
g20
g21
sS'trials.thisIndex'
p21368
g36
(g38
S'\x00\x00\x00\x00'
tRp21369
sg22
V
sS'trials_2.thisRepN'
p21370
I3
sS'trials_2.thisTrialN'
p21371
I0
sS'trials.thisRepN'
p21372
I128
sS'trials_2.thisTrial'
p21373
NsS'trials.thisN'
p21374
I256
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21375
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21376
I0
sS'trials_2.thisN'
p21377
I3
sa(dp21378
g20
g21
sS'trials.thisIndex'
p21379
g36
(g38
S'\x01\x00\x00\x00'
tRp21380
sg22
V
sS'trials_2.thisRepN'
p21381
I3
sS'trials_2.thisTrialN'
p21382
I0
sS'trials.thisRepN'
p21383
I128
sS'trials_2.thisTrial'
p21384
NsS'trials.thisN'
p21385
I257
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21386
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21387
I1
sS'trials_2.thisN'
p21388
I3
sa(dp21389
g20
g21
sS'trials.thisIndex'
p21390
g36
(g38
S'\x00\x00\x00\x00'
tRp21391
sg22
V
sS'trials_2.thisRepN'
p21392
I3
sS'trials_2.thisTrialN'
p21393
I0
sS'trials.thisRepN'
p21394
I129
sS'trials_2.thisTrial'
p21395
NsS'trials.thisN'
p21396
I258
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21397
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21398
I0
sS'trials_2.thisN'
p21399
I3
sa(dp21400
g20
g21
sS'trials.thisIndex'
p21401
g36
(g38
S'\x01\x00\x00\x00'
tRp21402
sg22
V
sS'trials_2.thisRepN'
p21403
I3
sS'trials_2.thisTrialN'
p21404
I0
sS'trials.thisRepN'
p21405
I129
sS'trials_2.thisTrial'
p21406
NsS'trials.thisN'
p21407
I259
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21408
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21409
I1
sS'trials_2.thisN'
p21410
I3
sa(dp21411
g20
g21
sS'trials.thisIndex'
p21412
g36
(g38
S'\x00\x00\x00\x00'
tRp21413
sg22
V
sS'trials_2.thisRepN'
p21414
I3
sS'trials_2.thisTrialN'
p21415
I0
sS'trials.thisRepN'
p21416
I130
sS'trials_2.thisTrial'
p21417
NsS'trials.thisN'
p21418
I260
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21419
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21420
I0
sS'trials_2.thisN'
p21421
I3
sa(dp21422
g20
g21
sS'trials.thisIndex'
p21423
g36
(g38
S'\x01\x00\x00\x00'
tRp21424
sg22
V
sS'trials_2.thisRepN'
p21425
I3
sS'trials_2.thisTrialN'
p21426
I0
sS'trials.thisRepN'
p21427
I130
sS'trials_2.thisTrial'
p21428
NsS'trials.thisN'
p21429
I261
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21430
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21431
I1
sS'trials_2.thisN'
p21432
I3
sa(dp21433
g20
g21
sS'trials.thisIndex'
p21434
g36
(g38
S'\x00\x00\x00\x00'
tRp21435
sg22
V
sS'trials_2.thisRepN'
p21436
I3
sS'trials_2.thisTrialN'
p21437
I0
sS'trials.thisRepN'
p21438
I131
sS'trials_2.thisTrial'
p21439
NsS'trials.thisN'
p21440
I262
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21441
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21442
I0
sS'trials_2.thisN'
p21443
I3
sa(dp21444
g20
g21
sS'trials.thisIndex'
p21445
g36
(g38
S'\x01\x00\x00\x00'
tRp21446
sg22
V
sS'trials_2.thisRepN'
p21447
I3
sS'trials_2.thisTrialN'
p21448
I0
sS'trials.thisRepN'
p21449
I131
sS'trials_2.thisTrial'
p21450
NsS'trials.thisN'
p21451
I263
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21452
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21453
I1
sS'trials_2.thisN'
p21454
I3
sa(dp21455
g20
g21
sS'trials.thisIndex'
p21456
g36
(g38
S'\x00\x00\x00\x00'
tRp21457
sg22
V
sS'trials_2.thisRepN'
p21458
I3
sS'trials_2.thisTrialN'
p21459
I0
sS'trials.thisRepN'
p21460
I132
sS'trials_2.thisTrial'
p21461
NsS'trials.thisN'
p21462
I264
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21463
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21464
I0
sS'trials_2.thisN'
p21465
I3
sa(dp21466
g20
g21
sS'trials.thisIndex'
p21467
g36
(g38
S'\x01\x00\x00\x00'
tRp21468
sg22
V
sS'trials_2.thisRepN'
p21469
I3
sS'trials_2.thisTrialN'
p21470
I0
sS'trials.thisRepN'
p21471
I132
sS'trials_2.thisTrial'
p21472
NsS'trials.thisN'
p21473
I265
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21474
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21475
I1
sS'trials_2.thisN'
p21476
I3
sa(dp21477
g20
g21
sS'trials.thisIndex'
p21478
g36
(g38
S'\x00\x00\x00\x00'
tRp21479
sg22
V
sS'trials_2.thisRepN'
p21480
I3
sS'trials_2.thisTrialN'
p21481
I0
sS'trials.thisRepN'
p21482
I133
sS'trials_2.thisTrial'
p21483
NsS'trials.thisN'
p21484
I266
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21485
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21486
I0
sS'trials_2.thisN'
p21487
I3
sa(dp21488
g20
g21
sS'trials.thisIndex'
p21489
g36
(g38
S'\x01\x00\x00\x00'
tRp21490
sg22
V
sS'trials_2.thisRepN'
p21491
I3
sS'trials_2.thisTrialN'
p21492
I0
sS'trials.thisRepN'
p21493
I133
sS'trials_2.thisTrial'
p21494
NsS'trials.thisN'
p21495
I267
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21496
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21497
I1
sS'trials_2.thisN'
p21498
I3
sa(dp21499
g20
g21
sS'trials.thisIndex'
p21500
g36
(g38
S'\x00\x00\x00\x00'
tRp21501
sg22
V
sS'trials_2.thisRepN'
p21502
I3
sS'trials_2.thisTrialN'
p21503
I0
sS'trials.thisRepN'
p21504
I134
sS'trials_2.thisTrial'
p21505
NsS'trials.thisN'
p21506
I268
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21507
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21508
I0
sS'trials_2.thisN'
p21509
I3
sa(dp21510
g20
g21
sS'trials.thisIndex'
p21511
g36
(g38
S'\x01\x00\x00\x00'
tRp21512
sg22
V
sS'trials_2.thisRepN'
p21513
I3
sS'trials_2.thisTrialN'
p21514
I0
sS'trials.thisRepN'
p21515
I134
sS'trials_2.thisTrial'
p21516
NsS'trials.thisN'
p21517
I269
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21518
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21519
I1
sS'trials_2.thisN'
p21520
I3
sa(dp21521
g20
g21
sS'trials.thisIndex'
p21522
g36
(g38
S'\x00\x00\x00\x00'
tRp21523
sg22
V
sS'trials_2.thisRepN'
p21524
I3
sS'trials_2.thisTrialN'
p21525
I0
sS'trials.thisRepN'
p21526
I135
sS'trials_2.thisTrial'
p21527
NsS'trials.thisN'
p21528
I270
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21529
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21530
I0
sS'trials_2.thisN'
p21531
I3
sa(dp21532
g20
g21
sS'trials.thisIndex'
p21533
g36
(g38
S'\x01\x00\x00\x00'
tRp21534
sg22
V
sS'trials_2.thisRepN'
p21535
I3
sS'trials_2.thisTrialN'
p21536
I0
sS'trials.thisRepN'
p21537
I135
sS'trials_2.thisTrial'
p21538
NsS'trials.thisN'
p21539
I271
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21540
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21541
I1
sS'trials_2.thisN'
p21542
I3
sa(dp21543
g20
g21
sS'trials.thisIndex'
p21544
g36
(g38
S'\x00\x00\x00\x00'
tRp21545
sg22
V
sS'trials_2.thisRepN'
p21546
I3
sS'trials_2.thisTrialN'
p21547
I0
sS'trials.thisRepN'
p21548
I136
sS'trials_2.thisTrial'
p21549
NsS'trials.thisN'
p21550
I272
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21551
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21552
I0
sS'trials_2.thisN'
p21553
I3
sa(dp21554
g20
g21
sS'trials.thisIndex'
p21555
g36
(g38
S'\x01\x00\x00\x00'
tRp21556
sg22
V
sS'trials_2.thisRepN'
p21557
I3
sS'trials_2.thisTrialN'
p21558
I0
sS'trials.thisRepN'
p21559
I136
sS'trials_2.thisTrial'
p21560
NsS'trials.thisN'
p21561
I273
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21562
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21563
I1
sS'trials_2.thisN'
p21564
I3
sa(dp21565
g20
g21
sS'trials.thisIndex'
p21566
g36
(g38
S'\x00\x00\x00\x00'
tRp21567
sg22
V
sS'trials_2.thisRepN'
p21568
I3
sS'trials_2.thisTrialN'
p21569
I0
sS'trials.thisRepN'
p21570
I137
sS'trials_2.thisTrial'
p21571
NsS'trials.thisN'
p21572
I274
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21573
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21574
I0
sS'trials_2.thisN'
p21575
I3
sa(dp21576
g20
g21
sS'trials.thisIndex'
p21577
g36
(g38
S'\x01\x00\x00\x00'
tRp21578
sg22
V
sS'trials_2.thisRepN'
p21579
I3
sS'trials_2.thisTrialN'
p21580
I0
sS'trials.thisRepN'
p21581
I137
sS'trials_2.thisTrial'
p21582
NsS'trials.thisN'
p21583
I275
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21584
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21585
I1
sS'trials_2.thisN'
p21586
I3
sa(dp21587
g20
g21
sS'trials.thisIndex'
p21588
g36
(g38
S'\x00\x00\x00\x00'
tRp21589
sg22
V
sS'trials_2.thisRepN'
p21590
I3
sS'trials_2.thisTrialN'
p21591
I0
sS'trials.thisRepN'
p21592
I138
sS'trials_2.thisTrial'
p21593
NsS'trials.thisN'
p21594
I276
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21595
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21596
I0
sS'trials_2.thisN'
p21597
I3
sa(dp21598
g20
g21
sS'trials.thisIndex'
p21599
g36
(g38
S'\x01\x00\x00\x00'
tRp21600
sg22
V
sS'trials_2.thisRepN'
p21601
I3
sS'trials_2.thisTrialN'
p21602
I0
sS'trials.thisRepN'
p21603
I138
sS'trials_2.thisTrial'
p21604
NsS'trials.thisN'
p21605
I277
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21606
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21607
I1
sS'trials_2.thisN'
p21608
I3
sa(dp21609
g20
g21
sS'trials.thisIndex'
p21610
g36
(g38
S'\x00\x00\x00\x00'
tRp21611
sg22
V
sS'trials_2.thisRepN'
p21612
I3
sS'trials_2.thisTrialN'
p21613
I0
sS'trials.thisRepN'
p21614
I139
sS'trials_2.thisTrial'
p21615
NsS'trials.thisN'
p21616
I278
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21617
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21618
I0
sS'trials_2.thisN'
p21619
I3
sa(dp21620
g20
g21
sS'trials.thisIndex'
p21621
g36
(g38
S'\x01\x00\x00\x00'
tRp21622
sg22
V
sS'trials_2.thisRepN'
p21623
I3
sS'trials_2.thisTrialN'
p21624
I0
sS'trials.thisRepN'
p21625
I139
sS'trials_2.thisTrial'
p21626
NsS'trials.thisN'
p21627
I279
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21628
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21629
I1
sS'trials_2.thisN'
p21630
I3
sa(dp21631
g20
g21
sS'trials.thisIndex'
p21632
g36
(g38
S'\x00\x00\x00\x00'
tRp21633
sg22
V
sS'trials_2.thisRepN'
p21634
I3
sS'trials_2.thisTrialN'
p21635
I0
sS'trials.thisRepN'
p21636
I140
sS'trials_2.thisTrial'
p21637
NsS'trials.thisN'
p21638
I280
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21639
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21640
I0
sS'trials_2.thisN'
p21641
I3
sa(dp21642
g20
g21
sS'trials.thisIndex'
p21643
g36
(g38
S'\x01\x00\x00\x00'
tRp21644
sg22
V
sS'trials_2.thisRepN'
p21645
I3
sS'trials_2.thisTrialN'
p21646
I0
sS'trials.thisRepN'
p21647
I140
sS'trials_2.thisTrial'
p21648
NsS'trials.thisN'
p21649
I281
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21650
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21651
I1
sS'trials_2.thisN'
p21652
I3
sa(dp21653
g20
g21
sS'trials.thisIndex'
p21654
g36
(g38
S'\x00\x00\x00\x00'
tRp21655
sg22
V
sS'trials_2.thisRepN'
p21656
I3
sS'trials_2.thisTrialN'
p21657
I0
sS'trials.thisRepN'
p21658
I141
sS'trials_2.thisTrial'
p21659
NsS'trials.thisN'
p21660
I282
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21661
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21662
I0
sS'trials_2.thisN'
p21663
I3
sa(dp21664
g20
g21
sS'trials.thisIndex'
p21665
g36
(g38
S'\x01\x00\x00\x00'
tRp21666
sg22
V
sS'trials_2.thisRepN'
p21667
I3
sS'trials_2.thisTrialN'
p21668
I0
sS'trials.thisRepN'
p21669
I141
sS'trials_2.thisTrial'
p21670
NsS'trials.thisN'
p21671
I283
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21672
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21673
I1
sS'trials_2.thisN'
p21674
I3
sa(dp21675
g20
g21
sS'trials.thisIndex'
p21676
g36
(g38
S'\x00\x00\x00\x00'
tRp21677
sg22
V
sS'trials_2.thisRepN'
p21678
I3
sS'trials_2.thisTrialN'
p21679
I0
sS'trials.thisRepN'
p21680
I142
sS'trials_2.thisTrial'
p21681
NsS'trials.thisN'
p21682
I284
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21683
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21684
I0
sS'trials_2.thisN'
p21685
I3
sa(dp21686
g20
g21
sS'trials.thisIndex'
p21687
g36
(g38
S'\x01\x00\x00\x00'
tRp21688
sg22
V
sS'trials_2.thisRepN'
p21689
I3
sS'trials_2.thisTrialN'
p21690
I0
sS'trials.thisRepN'
p21691
I142
sS'trials_2.thisTrial'
p21692
NsS'trials.thisN'
p21693
I285
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21694
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21695
I1
sS'trials_2.thisN'
p21696
I3
sa(dp21697
g20
g21
sS'trials.thisIndex'
p21698
g36
(g38
S'\x00\x00\x00\x00'
tRp21699
sg22
V
sS'trials_2.thisRepN'
p21700
I3
sS'trials_2.thisTrialN'
p21701
I0
sS'trials.thisRepN'
p21702
I143
sS'trials_2.thisTrial'
p21703
NsS'trials.thisN'
p21704
I286
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21705
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21706
I0
sS'trials_2.thisN'
p21707
I3
sa(dp21708
g20
g21
sS'trials.thisIndex'
p21709
g36
(g38
S'\x01\x00\x00\x00'
tRp21710
sg22
V
sS'trials_2.thisRepN'
p21711
I3
sS'trials_2.thisTrialN'
p21712
I0
sS'trials.thisRepN'
p21713
I143
sS'trials_2.thisTrial'
p21714
NsS'trials.thisN'
p21715
I287
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21716
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21717
I1
sS'trials_2.thisN'
p21718
I3
sa(dp21719
g20
g21
sS'trials.thisIndex'
p21720
g36
(g38
S'\x00\x00\x00\x00'
tRp21721
sg22
V
sS'trials_2.thisRepN'
p21722
I3
sS'trials_2.thisTrialN'
p21723
I0
sS'trials.thisRepN'
p21724
I144
sS'trials_2.thisTrial'
p21725
NsS'trials.thisN'
p21726
I288
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21727
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21728
I0
sS'trials_2.thisN'
p21729
I3
sa(dp21730
g20
g21
sS'trials.thisIndex'
p21731
g36
(g38
S'\x01\x00\x00\x00'
tRp21732
sg22
V
sS'trials_2.thisRepN'
p21733
I3
sS'trials_2.thisTrialN'
p21734
I0
sS'trials.thisRepN'
p21735
I144
sS'trials_2.thisTrial'
p21736
NsS'trials.thisN'
p21737
I289
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21738
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21739
I1
sS'trials_2.thisN'
p21740
I3
sa(dp21741
g20
g21
sS'trials.thisIndex'
p21742
g36
(g38
S'\x00\x00\x00\x00'
tRp21743
sg22
V
sS'trials_2.thisRepN'
p21744
I3
sS'trials_2.thisTrialN'
p21745
I0
sS'trials.thisRepN'
p21746
I145
sS'trials_2.thisTrial'
p21747
NsS'trials.thisN'
p21748
I290
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21749
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21750
I0
sS'trials_2.thisN'
p21751
I3
sa(dp21752
g20
g21
sS'trials.thisIndex'
p21753
g36
(g38
S'\x01\x00\x00\x00'
tRp21754
sg22
V
sS'trials_2.thisRepN'
p21755
I3
sS'trials_2.thisTrialN'
p21756
I0
sS'trials.thisRepN'
p21757
I145
sS'trials_2.thisTrial'
p21758
NsS'trials.thisN'
p21759
I291
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21760
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21761
I1
sS'trials_2.thisN'
p21762
I3
sa(dp21763
g20
g21
sS'trials.thisIndex'
p21764
g36
(g38
S'\x00\x00\x00\x00'
tRp21765
sg22
V
sS'trials_2.thisRepN'
p21766
I3
sS'trials_2.thisTrialN'
p21767
I0
sS'trials.thisRepN'
p21768
I146
sS'trials_2.thisTrial'
p21769
NsS'trials.thisN'
p21770
I292
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21771
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21772
I0
sS'trials_2.thisN'
p21773
I3
sa(dp21774
g20
g21
sS'trials.thisIndex'
p21775
g36
(g38
S'\x01\x00\x00\x00'
tRp21776
sg22
V
sS'trials_2.thisRepN'
p21777
I3
sS'trials_2.thisTrialN'
p21778
I0
sS'trials.thisRepN'
p21779
I146
sS'trials_2.thisTrial'
p21780
NsS'trials.thisN'
p21781
I293
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21782
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21783
I1
sS'trials_2.thisN'
p21784
I3
sa(dp21785
g20
g21
sS'trials.thisIndex'
p21786
g36
(g38
S'\x00\x00\x00\x00'
tRp21787
sg22
V
sS'trials_2.thisRepN'
p21788
I3
sS'trials_2.thisTrialN'
p21789
I0
sS'trials.thisRepN'
p21790
I147
sS'trials_2.thisTrial'
p21791
NsS'trials.thisN'
p21792
I294
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21793
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21794
I0
sS'trials_2.thisN'
p21795
I3
sa(dp21796
g20
g21
sS'trials.thisIndex'
p21797
g36
(g38
S'\x01\x00\x00\x00'
tRp21798
sg22
V
sS'trials_2.thisRepN'
p21799
I3
sS'trials_2.thisTrialN'
p21800
I0
sS'trials.thisRepN'
p21801
I147
sS'trials_2.thisTrial'
p21802
NsS'trials.thisN'
p21803
I295
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21804
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21805
I1
sS'trials_2.thisN'
p21806
I3
sa(dp21807
g20
g21
sS'trials.thisIndex'
p21808
g36
(g38
S'\x00\x00\x00\x00'
tRp21809
sg22
V
sS'trials_2.thisRepN'
p21810
I3
sS'trials_2.thisTrialN'
p21811
I0
sS'trials.thisRepN'
p21812
I148
sS'trials_2.thisTrial'
p21813
NsS'trials.thisN'
p21814
I296
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21815
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21816
I0
sS'trials_2.thisN'
p21817
I3
sa(dp21818
g20
g21
sS'trials.thisIndex'
p21819
g36
(g38
S'\x01\x00\x00\x00'
tRp21820
sg22
V
sS'trials_2.thisRepN'
p21821
I3
sS'trials_2.thisTrialN'
p21822
I0
sS'trials.thisRepN'
p21823
I148
sS'trials_2.thisTrial'
p21824
NsS'trials.thisN'
p21825
I297
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21826
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21827
I1
sS'trials_2.thisN'
p21828
I3
sa(dp21829
g20
g21
sS'trials.thisIndex'
p21830
g36
(g38
S'\x00\x00\x00\x00'
tRp21831
sg22
V
sS'trials_2.thisRepN'
p21832
I3
sS'trials_2.thisTrialN'
p21833
I0
sS'trials.thisRepN'
p21834
I149
sS'trials_2.thisTrial'
p21835
NsS'trials.thisN'
p21836
I298
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21837
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21838
I0
sS'trials_2.thisN'
p21839
I3
sa(dp21840
g20
g21
sS'trials.thisIndex'
p21841
g36
(g38
S'\x01\x00\x00\x00'
tRp21842
sg22
V
sS'trials_2.thisRepN'
p21843
I3
sS'trials_2.thisTrialN'
p21844
I0
sS'trials.thisRepN'
p21845
I149
sS'trials_2.thisTrial'
p21846
NsS'trials.thisN'
p21847
I299
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21848
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21849
I1
sS'trials_2.thisN'
p21850
I3
sa(dp21851
g20
g21
sS'trials.thisIndex'
p21852
g36
(g38
S'\x00\x00\x00\x00'
tRp21853
sg22
V
sS'trials_2.thisRepN'
p21854
I3
sS'trials_2.thisTrialN'
p21855
I0
sS'trials.thisRepN'
p21856
I150
sS'trials_2.thisTrial'
p21857
NsS'trials.thisN'
p21858
I300
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21859
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21860
I0
sS'trials_2.thisN'
p21861
I3
sa(dp21862
g20
g21
sS'trials.thisIndex'
p21863
g36
(g38
S'\x01\x00\x00\x00'
tRp21864
sg22
V
sS'trials_2.thisRepN'
p21865
I3
sS'trials_2.thisTrialN'
p21866
I0
sS'trials.thisRepN'
p21867
I150
sS'trials_2.thisTrial'
p21868
NsS'trials.thisN'
p21869
I301
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21870
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21871
I1
sS'trials_2.thisN'
p21872
I3
sa(dp21873
g20
g21
sS'trials.thisIndex'
p21874
g36
(g38
S'\x00\x00\x00\x00'
tRp21875
sg22
V
sS'trials_2.thisRepN'
p21876
I3
sS'trials_2.thisTrialN'
p21877
I0
sS'trials.thisRepN'
p21878
I151
sS'trials_2.thisTrial'
p21879
NsS'trials.thisN'
p21880
I302
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21881
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21882
I0
sS'trials_2.thisN'
p21883
I3
sa(dp21884
g20
g21
sS'trials.thisIndex'
p21885
g36
(g38
S'\x01\x00\x00\x00'
tRp21886
sg22
V
sS'trials_2.thisRepN'
p21887
I3
sS'trials_2.thisTrialN'
p21888
I0
sS'trials.thisRepN'
p21889
I151
sS'trials_2.thisTrial'
p21890
NsS'trials.thisN'
p21891
I303
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21892
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21893
I1
sS'trials_2.thisN'
p21894
I3
sa(dp21895
g20
g21
sS'trials.thisIndex'
p21896
g36
(g38
S'\x00\x00\x00\x00'
tRp21897
sg22
V
sS'trials_2.thisRepN'
p21898
I3
sS'trials_2.thisTrialN'
p21899
I0
sS'trials.thisRepN'
p21900
I152
sS'trials_2.thisTrial'
p21901
NsS'trials.thisN'
p21902
I304
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21903
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21904
I0
sS'trials_2.thisN'
p21905
I3
sa(dp21906
g20
g21
sS'trials.thisIndex'
p21907
g36
(g38
S'\x01\x00\x00\x00'
tRp21908
sg22
V
sS'trials_2.thisRepN'
p21909
I3
sS'trials_2.thisTrialN'
p21910
I0
sS'trials.thisRepN'
p21911
I152
sS'trials_2.thisTrial'
p21912
NsS'trials.thisN'
p21913
I305
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21914
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21915
I1
sS'trials_2.thisN'
p21916
I3
sa(dp21917
g20
g21
sS'trials.thisIndex'
p21918
g36
(g38
S'\x00\x00\x00\x00'
tRp21919
sg22
V
sS'trials_2.thisRepN'
p21920
I3
sS'trials_2.thisTrialN'
p21921
I0
sS'trials.thisRepN'
p21922
I153
sS'trials_2.thisTrial'
p21923
NsS'trials.thisN'
p21924
I306
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21925
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21926
I0
sS'trials_2.thisN'
p21927
I3
sa(dp21928
g20
g21
sS'trials.thisIndex'
p21929
g36
(g38
S'\x01\x00\x00\x00'
tRp21930
sg22
V
sS'trials_2.thisRepN'
p21931
I3
sS'trials_2.thisTrialN'
p21932
I0
sS'trials.thisRepN'
p21933
I153
sS'trials_2.thisTrial'
p21934
NsS'trials.thisN'
p21935
I307
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21936
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21937
I1
sS'trials_2.thisN'
p21938
I3
sa(dp21939
g20
g21
sS'trials.thisIndex'
p21940
g36
(g38
S'\x00\x00\x00\x00'
tRp21941
sg22
V
sS'trials_2.thisRepN'
p21942
I3
sS'trials_2.thisTrialN'
p21943
I0
sS'trials.thisRepN'
p21944
I154
sS'trials_2.thisTrial'
p21945
NsS'trials.thisN'
p21946
I308
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21947
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21948
I0
sS'trials_2.thisN'
p21949
I3
sa(dp21950
g20
g21
sS'trials.thisIndex'
p21951
g36
(g38
S'\x01\x00\x00\x00'
tRp21952
sg22
V
sS'trials_2.thisRepN'
p21953
I3
sS'trials_2.thisTrialN'
p21954
I0
sS'trials.thisRepN'
p21955
I154
sS'trials_2.thisTrial'
p21956
NsS'trials.thisN'
p21957
I309
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21958
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21959
I1
sS'trials_2.thisN'
p21960
I3
sa(dp21961
g20
g21
sS'trials.thisIndex'
p21962
g36
(g38
S'\x00\x00\x00\x00'
tRp21963
sg22
V
sS'trials_2.thisRepN'
p21964
I3
sS'trials_2.thisTrialN'
p21965
I0
sS'trials.thisRepN'
p21966
I155
sS'trials_2.thisTrial'
p21967
NsS'trials.thisN'
p21968
I310
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21969
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21970
I0
sS'trials_2.thisN'
p21971
I3
sa(dp21972
g20
g21
sS'trials.thisIndex'
p21973
g36
(g38
S'\x01\x00\x00\x00'
tRp21974
sg22
V
sS'trials_2.thisRepN'
p21975
I3
sS'trials_2.thisTrialN'
p21976
I0
sS'trials.thisRepN'
p21977
I155
sS'trials_2.thisTrial'
p21978
NsS'trials.thisN'
p21979
I311
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21980
g18556
sg18557
g18570
sS'trials.thisTrialN'
p21981
I1
sS'trials_2.thisN'
p21982
I3
sa(dp21983
g20
g21
sS'trials.thisIndex'
p21984
g36
(g38
S'\x00\x00\x00\x00'
tRp21985
sg22
V
sS'trials_2.thisRepN'
p21986
I3
sS'trials_2.thisTrialN'
p21987
I0
sS'trials.thisRepN'
p21988
I156
sS'trials_2.thisTrial'
p21989
NsS'trials.thisN'
p21990
I312
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p21991
g18556
sg18557
g18558
sS'trials.thisTrialN'
p21992
I0
sS'trials_2.thisN'
p21993
I3
sa(dp21994
g20
g21
sS'trials.thisIndex'
p21995
g36
(g38
S'\x01\x00\x00\x00'
tRp21996
sg22
V
sS'trials_2.thisRepN'
p21997
I3
sS'trials_2.thisTrialN'
p21998
I0
sS'trials.thisRepN'
p21999
I156
sS'trials_2.thisTrial'
p22000
NsS'trials.thisN'
p22001
I313
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22002
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22003
I1
sS'trials_2.thisN'
p22004
I3
sa(dp22005
g20
g21
sS'trials.thisIndex'
p22006
g36
(g38
S'\x00\x00\x00\x00'
tRp22007
sg22
V
sS'trials_2.thisRepN'
p22008
I3
sS'trials_2.thisTrialN'
p22009
I0
sS'trials.thisRepN'
p22010
I157
sS'trials_2.thisTrial'
p22011
NsS'trials.thisN'
p22012
I314
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22013
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22014
I0
sS'trials_2.thisN'
p22015
I3
sa(dp22016
g20
g21
sS'trials.thisIndex'
p22017
g36
(g38
S'\x01\x00\x00\x00'
tRp22018
sg22
V
sS'trials_2.thisRepN'
p22019
I3
sS'trials_2.thisTrialN'
p22020
I0
sS'trials.thisRepN'
p22021
I157
sS'trials_2.thisTrial'
p22022
NsS'trials.thisN'
p22023
I315
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22024
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22025
I1
sS'trials_2.thisN'
p22026
I3
sa(dp22027
g20
g21
sS'trials.thisIndex'
p22028
g36
(g38
S'\x00\x00\x00\x00'
tRp22029
sg22
V
sS'trials_2.thisRepN'
p22030
I3
sS'trials_2.thisTrialN'
p22031
I0
sS'trials.thisRepN'
p22032
I158
sS'trials_2.thisTrial'
p22033
NsS'trials.thisN'
p22034
I316
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22035
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22036
I0
sS'trials_2.thisN'
p22037
I3
sa(dp22038
g20
g21
sS'trials.thisIndex'
p22039
g36
(g38
S'\x01\x00\x00\x00'
tRp22040
sg22
V
sS'trials_2.thisRepN'
p22041
I3
sS'trials_2.thisTrialN'
p22042
I0
sS'trials.thisRepN'
p22043
I158
sS'trials_2.thisTrial'
p22044
NsS'trials.thisN'
p22045
I317
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22046
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22047
I1
sS'trials_2.thisN'
p22048
I3
sa(dp22049
g20
g21
sS'trials.thisIndex'
p22050
g36
(g38
S'\x00\x00\x00\x00'
tRp22051
sg22
V
sS'trials_2.thisRepN'
p22052
I3
sS'trials_2.thisTrialN'
p22053
I0
sS'trials.thisRepN'
p22054
I159
sS'trials_2.thisTrial'
p22055
NsS'trials.thisN'
p22056
I318
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22057
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22058
I0
sS'trials_2.thisN'
p22059
I3
sa(dp22060
g20
g21
sS'trials.thisIndex'
p22061
g36
(g38
S'\x01\x00\x00\x00'
tRp22062
sg22
V
sS'trials_2.thisRepN'
p22063
I3
sS'trials_2.thisTrialN'
p22064
I0
sS'trials.thisRepN'
p22065
I159
sS'trials_2.thisTrial'
p22066
NsS'trials.thisN'
p22067
I319
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22068
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22069
I1
sS'trials_2.thisN'
p22070
I3
sa(dp22071
g20
g21
sS'trials.thisIndex'
p22072
g36
(g38
S'\x00\x00\x00\x00'
tRp22073
sg22
V
sS'trials_2.thisRepN'
p22074
I3
sS'trials_2.thisTrialN'
p22075
I0
sS'trials.thisRepN'
p22076
I160
sS'trials_2.thisTrial'
p22077
NsS'trials.thisN'
p22078
I320
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22079
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22080
I0
sS'trials_2.thisN'
p22081
I3
sa(dp22082
g20
g21
sS'trials.thisIndex'
p22083
g36
(g38
S'\x01\x00\x00\x00'
tRp22084
sg22
V
sS'trials_2.thisRepN'
p22085
I3
sS'trials_2.thisTrialN'
p22086
I0
sS'trials.thisRepN'
p22087
I160
sS'trials_2.thisTrial'
p22088
NsS'trials.thisN'
p22089
I321
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22090
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22091
I1
sS'trials_2.thisN'
p22092
I3
sa(dp22093
g20
g21
sS'trials.thisIndex'
p22094
g36
(g38
S'\x00\x00\x00\x00'
tRp22095
sg22
V
sS'trials_2.thisRepN'
p22096
I3
sS'trials_2.thisTrialN'
p22097
I0
sS'trials.thisRepN'
p22098
I161
sS'trials_2.thisTrial'
p22099
NsS'trials.thisN'
p22100
I322
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22101
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22102
I0
sS'trials_2.thisN'
p22103
I3
sa(dp22104
g20
g21
sS'trials.thisIndex'
p22105
g36
(g38
S'\x01\x00\x00\x00'
tRp22106
sg22
V
sS'trials_2.thisRepN'
p22107
I3
sS'trials_2.thisTrialN'
p22108
I0
sS'trials.thisRepN'
p22109
I161
sS'trials_2.thisTrial'
p22110
NsS'trials.thisN'
p22111
I323
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22112
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22113
I1
sS'trials_2.thisN'
p22114
I3
sa(dp22115
g20
g21
sS'trials.thisIndex'
p22116
g36
(g38
S'\x00\x00\x00\x00'
tRp22117
sg22
V
sS'trials_2.thisRepN'
p22118
I3
sS'trials_2.thisTrialN'
p22119
I0
sS'trials.thisRepN'
p22120
I162
sS'trials_2.thisTrial'
p22121
NsS'trials.thisN'
p22122
I324
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22123
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22124
I0
sS'trials_2.thisN'
p22125
I3
sa(dp22126
g20
g21
sS'trials.thisIndex'
p22127
g36
(g38
S'\x01\x00\x00\x00'
tRp22128
sg22
V
sS'trials_2.thisRepN'
p22129
I3
sS'trials_2.thisTrialN'
p22130
I0
sS'trials.thisRepN'
p22131
I162
sS'trials_2.thisTrial'
p22132
NsS'trials.thisN'
p22133
I325
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22134
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22135
I1
sS'trials_2.thisN'
p22136
I3
sa(dp22137
g20
g21
sS'trials.thisIndex'
p22138
g36
(g38
S'\x00\x00\x00\x00'
tRp22139
sg22
V
sS'trials_2.thisRepN'
p22140
I3
sS'trials_2.thisTrialN'
p22141
I0
sS'trials.thisRepN'
p22142
I163
sS'trials_2.thisTrial'
p22143
NsS'trials.thisN'
p22144
I326
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22145
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22146
I0
sS'trials_2.thisN'
p22147
I3
sa(dp22148
g20
g21
sS'trials.thisIndex'
p22149
g36
(g38
S'\x01\x00\x00\x00'
tRp22150
sg22
V
sS'trials_2.thisRepN'
p22151
I3
sS'trials_2.thisTrialN'
p22152
I0
sS'trials.thisRepN'
p22153
I163
sS'trials_2.thisTrial'
p22154
NsS'trials.thisN'
p22155
I327
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22156
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22157
I1
sS'trials_2.thisN'
p22158
I3
sa(dp22159
g20
g21
sS'trials.thisIndex'
p22160
g36
(g38
S'\x00\x00\x00\x00'
tRp22161
sg22
V
sS'trials_2.thisRepN'
p22162
I3
sS'trials_2.thisTrialN'
p22163
I0
sS'trials.thisRepN'
p22164
I164
sS'trials_2.thisTrial'
p22165
NsS'trials.thisN'
p22166
I328
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22167
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22168
I0
sS'trials_2.thisN'
p22169
I3
sa(dp22170
g20
g21
sS'trials.thisIndex'
p22171
g36
(g38
S'\x01\x00\x00\x00'
tRp22172
sg22
V
sS'trials_2.thisRepN'
p22173
I3
sS'trials_2.thisTrialN'
p22174
I0
sS'trials.thisRepN'
p22175
I164
sS'trials_2.thisTrial'
p22176
NsS'trials.thisN'
p22177
I329
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22178
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22179
I1
sS'trials_2.thisN'
p22180
I3
sa(dp22181
g20
g21
sS'trials.thisIndex'
p22182
g36
(g38
S'\x00\x00\x00\x00'
tRp22183
sg22
V
sS'trials_2.thisRepN'
p22184
I3
sS'trials_2.thisTrialN'
p22185
I0
sS'trials.thisRepN'
p22186
I165
sS'trials_2.thisTrial'
p22187
NsS'trials.thisN'
p22188
I330
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22189
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22190
I0
sS'trials_2.thisN'
p22191
I3
sa(dp22192
g20
g21
sS'trials.thisIndex'
p22193
g36
(g38
S'\x01\x00\x00\x00'
tRp22194
sg22
V
sS'trials_2.thisRepN'
p22195
I3
sS'trials_2.thisTrialN'
p22196
I0
sS'trials.thisRepN'
p22197
I165
sS'trials_2.thisTrial'
p22198
NsS'trials.thisN'
p22199
I331
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22200
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22201
I1
sS'trials_2.thisN'
p22202
I3
sa(dp22203
g20
g21
sS'trials.thisIndex'
p22204
g36
(g38
S'\x00\x00\x00\x00'
tRp22205
sg22
V
sS'trials_2.thisRepN'
p22206
I3
sS'trials_2.thisTrialN'
p22207
I0
sS'trials.thisRepN'
p22208
I166
sS'trials_2.thisTrial'
p22209
NsS'trials.thisN'
p22210
I332
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22211
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22212
I0
sS'trials_2.thisN'
p22213
I3
sa(dp22214
g20
g21
sS'trials.thisIndex'
p22215
g36
(g38
S'\x01\x00\x00\x00'
tRp22216
sg22
V
sS'trials_2.thisRepN'
p22217
I3
sS'trials_2.thisTrialN'
p22218
I0
sS'trials.thisRepN'
p22219
I166
sS'trials_2.thisTrial'
p22220
NsS'trials.thisN'
p22221
I333
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22222
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22223
I1
sS'trials_2.thisN'
p22224
I3
sa(dp22225
g20
g21
sS'trials.thisIndex'
p22226
g36
(g38
S'\x00\x00\x00\x00'
tRp22227
sg22
V
sS'trials_2.thisRepN'
p22228
I3
sS'trials_2.thisTrialN'
p22229
I0
sS'trials.thisRepN'
p22230
I167
sS'trials_2.thisTrial'
p22231
NsS'trials.thisN'
p22232
I334
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22233
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22234
I0
sS'trials_2.thisN'
p22235
I3
sa(dp22236
g20
g21
sS'trials.thisIndex'
p22237
g36
(g38
S'\x01\x00\x00\x00'
tRp22238
sg22
V
sS'trials_2.thisRepN'
p22239
I3
sS'trials_2.thisTrialN'
p22240
I0
sS'trials.thisRepN'
p22241
I167
sS'trials_2.thisTrial'
p22242
NsS'trials.thisN'
p22243
I335
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22244
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22245
I1
sS'trials_2.thisN'
p22246
I3
sa(dp22247
g20
g21
sS'trials.thisIndex'
p22248
g36
(g38
S'\x00\x00\x00\x00'
tRp22249
sg22
V
sS'trials_2.thisRepN'
p22250
I3
sS'trials_2.thisTrialN'
p22251
I0
sS'trials.thisRepN'
p22252
I168
sS'trials_2.thisTrial'
p22253
NsS'trials.thisN'
p22254
I336
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22255
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22256
I0
sS'trials_2.thisN'
p22257
I3
sa(dp22258
g20
g21
sS'trials.thisIndex'
p22259
g36
(g38
S'\x01\x00\x00\x00'
tRp22260
sg22
V
sS'trials_2.thisRepN'
p22261
I3
sS'trials_2.thisTrialN'
p22262
I0
sS'trials.thisRepN'
p22263
I168
sS'trials_2.thisTrial'
p22264
NsS'trials.thisN'
p22265
I337
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22266
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22267
I1
sS'trials_2.thisN'
p22268
I3
sa(dp22269
g20
g21
sS'trials.thisIndex'
p22270
g36
(g38
S'\x00\x00\x00\x00'
tRp22271
sg22
V
sS'trials_2.thisRepN'
p22272
I3
sS'trials_2.thisTrialN'
p22273
I0
sS'trials.thisRepN'
p22274
I169
sS'trials_2.thisTrial'
p22275
NsS'trials.thisN'
p22276
I338
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22277
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22278
I0
sS'trials_2.thisN'
p22279
I3
sa(dp22280
g20
g21
sS'trials.thisIndex'
p22281
g36
(g38
S'\x01\x00\x00\x00'
tRp22282
sg22
V
sS'trials_2.thisRepN'
p22283
I3
sS'trials_2.thisTrialN'
p22284
I0
sS'trials.thisRepN'
p22285
I169
sS'trials_2.thisTrial'
p22286
NsS'trials.thisN'
p22287
I339
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22288
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22289
I1
sS'trials_2.thisN'
p22290
I3
sa(dp22291
g20
g21
sS'trials.thisIndex'
p22292
g36
(g38
S'\x00\x00\x00\x00'
tRp22293
sg22
V
sS'trials_2.thisRepN'
p22294
I3
sS'trials_2.thisTrialN'
p22295
I0
sS'trials.thisRepN'
p22296
I170
sS'trials_2.thisTrial'
p22297
NsS'trials.thisN'
p22298
I340
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22299
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22300
I0
sS'trials_2.thisN'
p22301
I3
sa(dp22302
g20
g21
sS'trials.thisIndex'
p22303
g36
(g38
S'\x01\x00\x00\x00'
tRp22304
sg22
V
sS'trials_2.thisRepN'
p22305
I3
sS'trials_2.thisTrialN'
p22306
I0
sS'trials.thisRepN'
p22307
I170
sS'trials_2.thisTrial'
p22308
NsS'trials.thisN'
p22309
I341
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22310
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22311
I1
sS'trials_2.thisN'
p22312
I3
sa(dp22313
g20
g21
sS'trials.thisIndex'
p22314
g36
(g38
S'\x00\x00\x00\x00'
tRp22315
sg22
V
sS'trials_2.thisRepN'
p22316
I3
sS'trials_2.thisTrialN'
p22317
I0
sS'trials.thisRepN'
p22318
I171
sS'trials_2.thisTrial'
p22319
NsS'trials.thisN'
p22320
I342
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22321
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22322
I0
sS'trials_2.thisN'
p22323
I3
sa(dp22324
g20
g21
sS'trials.thisIndex'
p22325
g36
(g38
S'\x01\x00\x00\x00'
tRp22326
sg22
V
sS'trials_2.thisRepN'
p22327
I3
sS'trials_2.thisTrialN'
p22328
I0
sS'trials.thisRepN'
p22329
I171
sS'trials_2.thisTrial'
p22330
NsS'trials.thisN'
p22331
I343
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22332
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22333
I1
sS'trials_2.thisN'
p22334
I3
sa(dp22335
g20
g21
sS'trials.thisIndex'
p22336
g36
(g38
S'\x00\x00\x00\x00'
tRp22337
sg22
V
sS'trials_2.thisRepN'
p22338
I3
sS'trials_2.thisTrialN'
p22339
I0
sS'trials.thisRepN'
p22340
I172
sS'trials_2.thisTrial'
p22341
NsS'trials.thisN'
p22342
I344
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22343
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22344
I0
sS'trials_2.thisN'
p22345
I3
sa(dp22346
g20
g21
sS'trials.thisIndex'
p22347
g36
(g38
S'\x01\x00\x00\x00'
tRp22348
sg22
V
sS'trials_2.thisRepN'
p22349
I3
sS'trials_2.thisTrialN'
p22350
I0
sS'trials.thisRepN'
p22351
I172
sS'trials_2.thisTrial'
p22352
NsS'trials.thisN'
p22353
I345
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22354
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22355
I1
sS'trials_2.thisN'
p22356
I3
sa(dp22357
g20
g21
sS'trials.thisIndex'
p22358
g36
(g38
S'\x00\x00\x00\x00'
tRp22359
sg22
V
sS'trials_2.thisRepN'
p22360
I3
sS'trials_2.thisTrialN'
p22361
I0
sS'trials.thisRepN'
p22362
I173
sS'trials_2.thisTrial'
p22363
NsS'trials.thisN'
p22364
I346
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22365
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22366
I0
sS'trials_2.thisN'
p22367
I3
sa(dp22368
g20
g21
sS'trials.thisIndex'
p22369
g36
(g38
S'\x01\x00\x00\x00'
tRp22370
sg22
V
sS'trials_2.thisRepN'
p22371
I3
sS'trials_2.thisTrialN'
p22372
I0
sS'trials.thisRepN'
p22373
I173
sS'trials_2.thisTrial'
p22374
NsS'trials.thisN'
p22375
I347
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22376
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22377
I1
sS'trials_2.thisN'
p22378
I3
sa(dp22379
g20
g21
sS'trials.thisIndex'
p22380
g36
(g38
S'\x00\x00\x00\x00'
tRp22381
sg22
V
sS'trials_2.thisRepN'
p22382
I3
sS'trials_2.thisTrialN'
p22383
I0
sS'trials.thisRepN'
p22384
I174
sS'trials_2.thisTrial'
p22385
NsS'trials.thisN'
p22386
I348
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22387
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22388
I0
sS'trials_2.thisN'
p22389
I3
sa(dp22390
g20
g21
sS'trials.thisIndex'
p22391
g36
(g38
S'\x01\x00\x00\x00'
tRp22392
sg22
V
sS'trials_2.thisRepN'
p22393
I3
sS'trials_2.thisTrialN'
p22394
I0
sS'trials.thisRepN'
p22395
I174
sS'trials_2.thisTrial'
p22396
NsS'trials.thisN'
p22397
I349
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22398
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22399
I1
sS'trials_2.thisN'
p22400
I3
sa(dp22401
g20
g21
sS'trials.thisIndex'
p22402
g36
(g38
S'\x00\x00\x00\x00'
tRp22403
sg22
V
sS'trials_2.thisRepN'
p22404
I3
sS'trials_2.thisTrialN'
p22405
I0
sS'trials.thisRepN'
p22406
I175
sS'trials_2.thisTrial'
p22407
NsS'trials.thisN'
p22408
I350
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22409
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22410
I0
sS'trials_2.thisN'
p22411
I3
sa(dp22412
g20
g21
sS'trials.thisIndex'
p22413
g36
(g38
S'\x01\x00\x00\x00'
tRp22414
sg22
V
sS'trials_2.thisRepN'
p22415
I3
sS'trials_2.thisTrialN'
p22416
I0
sS'trials.thisRepN'
p22417
I175
sS'trials_2.thisTrial'
p22418
NsS'trials.thisN'
p22419
I351
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22420
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22421
I1
sS'trials_2.thisN'
p22422
I3
sa(dp22423
g20
g21
sS'trials.thisIndex'
p22424
g36
(g38
S'\x00\x00\x00\x00'
tRp22425
sg22
V
sS'trials_2.thisRepN'
p22426
I3
sS'trials_2.thisTrialN'
p22427
I0
sS'trials.thisRepN'
p22428
I176
sS'trials_2.thisTrial'
p22429
NsS'trials.thisN'
p22430
I352
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22431
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22432
I0
sS'trials_2.thisN'
p22433
I3
sa(dp22434
g20
g21
sS'trials.thisIndex'
p22435
g36
(g38
S'\x01\x00\x00\x00'
tRp22436
sg22
V
sS'trials_2.thisRepN'
p22437
I3
sS'trials_2.thisTrialN'
p22438
I0
sS'trials.thisRepN'
p22439
I176
sS'trials_2.thisTrial'
p22440
NsS'trials.thisN'
p22441
I353
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22442
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22443
I1
sS'trials_2.thisN'
p22444
I3
sa(dp22445
g20
g21
sS'trials.thisIndex'
p22446
g36
(g38
S'\x00\x00\x00\x00'
tRp22447
sg22
V
sS'trials_2.thisRepN'
p22448
I3
sS'trials_2.thisTrialN'
p22449
I0
sS'trials.thisRepN'
p22450
I177
sS'trials_2.thisTrial'
p22451
NsS'trials.thisN'
p22452
I354
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22453
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22454
I0
sS'trials_2.thisN'
p22455
I3
sa(dp22456
g20
g21
sS'trials.thisIndex'
p22457
g36
(g38
S'\x01\x00\x00\x00'
tRp22458
sg22
V
sS'trials_2.thisRepN'
p22459
I3
sS'trials_2.thisTrialN'
p22460
I0
sS'trials.thisRepN'
p22461
I177
sS'trials_2.thisTrial'
p22462
NsS'trials.thisN'
p22463
I355
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22464
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22465
I1
sS'trials_2.thisN'
p22466
I3
sa(dp22467
g20
g21
sS'trials.thisIndex'
p22468
g36
(g38
S'\x00\x00\x00\x00'
tRp22469
sg22
V
sS'trials_2.thisRepN'
p22470
I3
sS'trials_2.thisTrialN'
p22471
I0
sS'trials.thisRepN'
p22472
I178
sS'trials_2.thisTrial'
p22473
NsS'trials.thisN'
p22474
I356
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22475
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22476
I0
sS'trials_2.thisN'
p22477
I3
sa(dp22478
g20
g21
sS'trials.thisIndex'
p22479
g36
(g38
S'\x01\x00\x00\x00'
tRp22480
sg22
V
sS'trials_2.thisRepN'
p22481
I3
sS'trials_2.thisTrialN'
p22482
I0
sS'trials.thisRepN'
p22483
I178
sS'trials_2.thisTrial'
p22484
NsS'trials.thisN'
p22485
I357
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22486
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22487
I1
sS'trials_2.thisN'
p22488
I3
sa(dp22489
g20
g21
sS'trials.thisIndex'
p22490
g36
(g38
S'\x00\x00\x00\x00'
tRp22491
sg22
V
sS'trials_2.thisRepN'
p22492
I3
sS'trials_2.thisTrialN'
p22493
I0
sS'trials.thisRepN'
p22494
I179
sS'trials_2.thisTrial'
p22495
NsS'trials.thisN'
p22496
I358
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22497
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22498
I0
sS'trials_2.thisN'
p22499
I3
sa(dp22500
g20
g21
sS'trials.thisIndex'
p22501
g36
(g38
S'\x01\x00\x00\x00'
tRp22502
sg22
V
sS'trials_2.thisRepN'
p22503
I3
sS'trials_2.thisTrialN'
p22504
I0
sS'trials.thisRepN'
p22505
I179
sS'trials_2.thisTrial'
p22506
NsS'trials.thisN'
p22507
I359
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22508
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22509
I1
sS'trials_2.thisN'
p22510
I3
sa(dp22511
g20
g21
sS'trials.thisIndex'
p22512
g36
(g38
S'\x00\x00\x00\x00'
tRp22513
sg22
V
sS'trials_2.thisRepN'
p22514
I3
sS'trials_2.thisTrialN'
p22515
I0
sS'trials.thisRepN'
p22516
I180
sS'trials_2.thisTrial'
p22517
NsS'trials.thisN'
p22518
I360
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22519
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22520
I0
sS'trials_2.thisN'
p22521
I3
sa(dp22522
g20
g21
sS'trials.thisIndex'
p22523
g36
(g38
S'\x01\x00\x00\x00'
tRp22524
sg22
V
sS'trials_2.thisRepN'
p22525
I3
sS'trials_2.thisTrialN'
p22526
I0
sS'trials.thisRepN'
p22527
I180
sS'trials_2.thisTrial'
p22528
NsS'trials.thisN'
p22529
I361
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22530
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22531
I1
sS'trials_2.thisN'
p22532
I3
sa(dp22533
g20
g21
sS'trials.thisIndex'
p22534
g36
(g38
S'\x00\x00\x00\x00'
tRp22535
sg22
V
sS'trials_2.thisRepN'
p22536
I3
sS'trials_2.thisTrialN'
p22537
I0
sS'trials.thisRepN'
p22538
I181
sS'trials_2.thisTrial'
p22539
NsS'trials.thisN'
p22540
I362
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22541
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22542
I0
sS'trials_2.thisN'
p22543
I3
sa(dp22544
g20
g21
sS'trials.thisIndex'
p22545
g36
(g38
S'\x01\x00\x00\x00'
tRp22546
sg22
V
sS'trials_2.thisRepN'
p22547
I3
sS'trials_2.thisTrialN'
p22548
I0
sS'trials.thisRepN'
p22549
I181
sS'trials_2.thisTrial'
p22550
NsS'trials.thisN'
p22551
I363
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22552
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22553
I1
sS'trials_2.thisN'
p22554
I3
sa(dp22555
g20
g21
sS'trials.thisIndex'
p22556
g36
(g38
S'\x00\x00\x00\x00'
tRp22557
sg22
V
sS'trials_2.thisRepN'
p22558
I3
sS'trials_2.thisTrialN'
p22559
I0
sS'trials.thisRepN'
p22560
I182
sS'trials_2.thisTrial'
p22561
NsS'trials.thisN'
p22562
I364
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22563
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22564
I0
sS'trials_2.thisN'
p22565
I3
sa(dp22566
g20
g21
sS'trials.thisIndex'
p22567
g36
(g38
S'\x01\x00\x00\x00'
tRp22568
sg22
V
sS'trials_2.thisRepN'
p22569
I3
sS'trials_2.thisTrialN'
p22570
I0
sS'trials.thisRepN'
p22571
I182
sS'trials_2.thisTrial'
p22572
NsS'trials.thisN'
p22573
I365
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22574
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22575
I1
sS'trials_2.thisN'
p22576
I3
sa(dp22577
g20
g21
sS'trials.thisIndex'
p22578
g36
(g38
S'\x00\x00\x00\x00'
tRp22579
sg22
V
sS'trials_2.thisRepN'
p22580
I3
sS'trials_2.thisTrialN'
p22581
I0
sS'trials.thisRepN'
p22582
I183
sS'trials_2.thisTrial'
p22583
NsS'trials.thisN'
p22584
I366
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22585
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22586
I0
sS'trials_2.thisN'
p22587
I3
sa(dp22588
g20
g21
sS'trials.thisIndex'
p22589
g36
(g38
S'\x01\x00\x00\x00'
tRp22590
sg22
V
sS'trials_2.thisRepN'
p22591
I3
sS'trials_2.thisTrialN'
p22592
I0
sS'trials.thisRepN'
p22593
I183
sS'trials_2.thisTrial'
p22594
NsS'trials.thisN'
p22595
I367
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22596
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22597
I1
sS'trials_2.thisN'
p22598
I3
sa(dp22599
g20
g21
sS'trials.thisIndex'
p22600
g36
(g38
S'\x00\x00\x00\x00'
tRp22601
sg22
V
sS'trials_2.thisRepN'
p22602
I3
sS'trials_2.thisTrialN'
p22603
I0
sS'trials.thisRepN'
p22604
I184
sS'trials_2.thisTrial'
p22605
NsS'trials.thisN'
p22606
I368
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22607
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22608
I0
sS'trials_2.thisN'
p22609
I3
sa(dp22610
g20
g21
sS'trials.thisIndex'
p22611
g36
(g38
S'\x01\x00\x00\x00'
tRp22612
sg22
V
sS'trials_2.thisRepN'
p22613
I3
sS'trials_2.thisTrialN'
p22614
I0
sS'trials.thisRepN'
p22615
I184
sS'trials_2.thisTrial'
p22616
NsS'trials.thisN'
p22617
I369
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22618
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22619
I1
sS'trials_2.thisN'
p22620
I3
sa(dp22621
g20
g21
sS'trials.thisIndex'
p22622
g36
(g38
S'\x00\x00\x00\x00'
tRp22623
sg22
V
sS'trials_2.thisRepN'
p22624
I3
sS'trials_2.thisTrialN'
p22625
I0
sS'trials.thisRepN'
p22626
I185
sS'trials_2.thisTrial'
p22627
NsS'trials.thisN'
p22628
I370
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22629
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22630
I0
sS'trials_2.thisN'
p22631
I3
sa(dp22632
g20
g21
sS'trials.thisIndex'
p22633
g36
(g38
S'\x01\x00\x00\x00'
tRp22634
sg22
V
sS'trials_2.thisRepN'
p22635
I3
sS'trials_2.thisTrialN'
p22636
I0
sS'trials.thisRepN'
p22637
I185
sS'trials_2.thisTrial'
p22638
NsS'trials.thisN'
p22639
I371
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22640
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22641
I1
sS'trials_2.thisN'
p22642
I3
sa(dp22643
g20
g21
sS'trials.thisIndex'
p22644
g36
(g38
S'\x00\x00\x00\x00'
tRp22645
sg22
V
sS'trials_2.thisRepN'
p22646
I3
sS'trials_2.thisTrialN'
p22647
I0
sS'trials.thisRepN'
p22648
I186
sS'trials_2.thisTrial'
p22649
NsS'trials.thisN'
p22650
I372
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22651
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22652
I0
sS'trials_2.thisN'
p22653
I3
sa(dp22654
g20
g21
sS'trials.thisIndex'
p22655
g36
(g38
S'\x01\x00\x00\x00'
tRp22656
sg22
V
sS'trials_2.thisRepN'
p22657
I3
sS'trials_2.thisTrialN'
p22658
I0
sS'trials.thisRepN'
p22659
I186
sS'trials_2.thisTrial'
p22660
NsS'trials.thisN'
p22661
I373
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22662
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22663
I1
sS'trials_2.thisN'
p22664
I3
sa(dp22665
g20
g21
sS'trials.thisIndex'
p22666
g36
(g38
S'\x00\x00\x00\x00'
tRp22667
sg22
V
sS'trials_2.thisRepN'
p22668
I3
sS'trials_2.thisTrialN'
p22669
I0
sS'trials.thisRepN'
p22670
I187
sS'trials_2.thisTrial'
p22671
NsS'trials.thisN'
p22672
I374
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22673
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22674
I0
sS'trials_2.thisN'
p22675
I3
sa(dp22676
g20
g21
sS'trials.thisIndex'
p22677
g36
(g38
S'\x01\x00\x00\x00'
tRp22678
sg22
V
sS'trials_2.thisRepN'
p22679
I3
sS'trials_2.thisTrialN'
p22680
I0
sS'trials.thisRepN'
p22681
I187
sS'trials_2.thisTrial'
p22682
NsS'trials.thisN'
p22683
I375
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22684
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22685
I1
sS'trials_2.thisN'
p22686
I3
sa(dp22687
g20
g21
sS'trials.thisIndex'
p22688
g36
(g38
S'\x00\x00\x00\x00'
tRp22689
sg22
V
sS'trials_2.thisRepN'
p22690
I3
sS'trials_2.thisTrialN'
p22691
I0
sS'trials.thisRepN'
p22692
I188
sS'trials_2.thisTrial'
p22693
NsS'trials.thisN'
p22694
I376
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22695
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22696
I0
sS'trials_2.thisN'
p22697
I3
sa(dp22698
g20
g21
sS'trials.thisIndex'
p22699
g36
(g38
S'\x01\x00\x00\x00'
tRp22700
sg22
V
sS'trials_2.thisRepN'
p22701
I3
sS'trials_2.thisTrialN'
p22702
I0
sS'trials.thisRepN'
p22703
I188
sS'trials_2.thisTrial'
p22704
NsS'trials.thisN'
p22705
I377
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22706
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22707
I1
sS'trials_2.thisN'
p22708
I3
sa(dp22709
g20
g21
sS'trials.thisIndex'
p22710
g36
(g38
S'\x00\x00\x00\x00'
tRp22711
sg22
V
sS'trials_2.thisRepN'
p22712
I3
sS'trials_2.thisTrialN'
p22713
I0
sS'trials.thisRepN'
p22714
I189
sS'trials_2.thisTrial'
p22715
NsS'trials.thisN'
p22716
I378
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22717
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22718
I0
sS'trials_2.thisN'
p22719
I3
sa(dp22720
g20
g21
sS'trials.thisIndex'
p22721
g36
(g38
S'\x01\x00\x00\x00'
tRp22722
sg22
V
sS'trials_2.thisRepN'
p22723
I3
sS'trials_2.thisTrialN'
p22724
I0
sS'trials.thisRepN'
p22725
I189
sS'trials_2.thisTrial'
p22726
NsS'trials.thisN'
p22727
I379
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22728
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22729
I1
sS'trials_2.thisN'
p22730
I3
sa(dp22731
g20
g21
sS'trials.thisIndex'
p22732
g36
(g38
S'\x00\x00\x00\x00'
tRp22733
sg22
V
sS'trials_2.thisRepN'
p22734
I3
sS'trials_2.thisTrialN'
p22735
I0
sS'trials.thisRepN'
p22736
I190
sS'trials_2.thisTrial'
p22737
NsS'trials.thisN'
p22738
I380
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22739
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22740
I0
sS'trials_2.thisN'
p22741
I3
sa(dp22742
g20
g21
sS'trials.thisIndex'
p22743
g36
(g38
S'\x01\x00\x00\x00'
tRp22744
sg22
V
sS'trials_2.thisRepN'
p22745
I3
sS'trials_2.thisTrialN'
p22746
I0
sS'trials.thisRepN'
p22747
I190
sS'trials_2.thisTrial'
p22748
NsS'trials.thisN'
p22749
I381
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22750
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22751
I1
sS'trials_2.thisN'
p22752
I3
sa(dp22753
g20
g21
sS'trials.thisIndex'
p22754
g36
(g38
S'\x00\x00\x00\x00'
tRp22755
sg22
V
sS'trials_2.thisRepN'
p22756
I3
sS'trials_2.thisTrialN'
p22757
I0
sS'trials.thisRepN'
p22758
I191
sS'trials_2.thisTrial'
p22759
NsS'trials.thisN'
p22760
I382
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22761
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22762
I0
sS'trials_2.thisN'
p22763
I3
sa(dp22764
g20
g21
sS'trials.thisIndex'
p22765
g36
(g38
S'\x01\x00\x00\x00'
tRp22766
sg22
V
sS'trials_2.thisRepN'
p22767
I3
sS'trials_2.thisTrialN'
p22768
I0
sS'trials.thisRepN'
p22769
I191
sS'trials_2.thisTrial'
p22770
NsS'trials.thisN'
p22771
I383
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22772
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22773
I1
sS'trials_2.thisN'
p22774
I3
sa(dp22775
g20
g21
sS'trials.thisIndex'
p22776
g36
(g38
S'\x00\x00\x00\x00'
tRp22777
sg22
V
sS'trials_2.thisRepN'
p22778
I3
sS'trials_2.thisTrialN'
p22779
I0
sS'trials.thisRepN'
p22780
I192
sS'trials_2.thisTrial'
p22781
NsS'trials.thisN'
p22782
I384
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22783
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22784
I0
sS'trials_2.thisN'
p22785
I3
sa(dp22786
g20
g21
sS'trials.thisIndex'
p22787
g36
(g38
S'\x01\x00\x00\x00'
tRp22788
sg22
V
sS'trials_2.thisRepN'
p22789
I3
sS'trials_2.thisTrialN'
p22790
I0
sS'trials.thisRepN'
p22791
I192
sS'trials_2.thisTrial'
p22792
NsS'trials.thisN'
p22793
I385
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22794
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22795
I1
sS'trials_2.thisN'
p22796
I3
sa(dp22797
g20
g21
sS'trials.thisIndex'
p22798
g36
(g38
S'\x00\x00\x00\x00'
tRp22799
sg22
V
sS'trials_2.thisRepN'
p22800
I3
sS'trials_2.thisTrialN'
p22801
I0
sS'trials.thisRepN'
p22802
I193
sS'trials_2.thisTrial'
p22803
NsS'trials.thisN'
p22804
I386
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22805
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22806
I0
sS'trials_2.thisN'
p22807
I3
sa(dp22808
g20
g21
sS'trials.thisIndex'
p22809
g36
(g38
S'\x01\x00\x00\x00'
tRp22810
sg22
V
sS'trials_2.thisRepN'
p22811
I3
sS'trials_2.thisTrialN'
p22812
I0
sS'trials.thisRepN'
p22813
I193
sS'trials_2.thisTrial'
p22814
NsS'trials.thisN'
p22815
I387
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22816
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22817
I1
sS'trials_2.thisN'
p22818
I3
sa(dp22819
g20
g21
sS'trials.thisIndex'
p22820
g36
(g38
S'\x00\x00\x00\x00'
tRp22821
sg22
V
sS'trials_2.thisRepN'
p22822
I3
sS'trials_2.thisTrialN'
p22823
I0
sS'trials.thisRepN'
p22824
I194
sS'trials_2.thisTrial'
p22825
NsS'trials.thisN'
p22826
I388
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22827
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22828
I0
sS'trials_2.thisN'
p22829
I3
sa(dp22830
g20
g21
sS'trials.thisIndex'
p22831
g36
(g38
S'\x01\x00\x00\x00'
tRp22832
sg22
V
sS'trials_2.thisRepN'
p22833
I3
sS'trials_2.thisTrialN'
p22834
I0
sS'trials.thisRepN'
p22835
I194
sS'trials_2.thisTrial'
p22836
NsS'trials.thisN'
p22837
I389
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22838
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22839
I1
sS'trials_2.thisN'
p22840
I3
sa(dp22841
g20
g21
sS'trials.thisIndex'
p22842
g36
(g38
S'\x00\x00\x00\x00'
tRp22843
sg22
V
sS'trials_2.thisRepN'
p22844
I3
sS'trials_2.thisTrialN'
p22845
I0
sS'trials.thisRepN'
p22846
I195
sS'trials_2.thisTrial'
p22847
NsS'trials.thisN'
p22848
I390
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22849
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22850
I0
sS'trials_2.thisN'
p22851
I3
sa(dp22852
g20
g21
sS'trials.thisIndex'
p22853
g36
(g38
S'\x01\x00\x00\x00'
tRp22854
sg22
V
sS'trials_2.thisRepN'
p22855
I3
sS'trials_2.thisTrialN'
p22856
I0
sS'trials.thisRepN'
p22857
I195
sS'trials_2.thisTrial'
p22858
NsS'trials.thisN'
p22859
I391
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22860
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22861
I1
sS'trials_2.thisN'
p22862
I3
sa(dp22863
g20
g21
sS'trials.thisIndex'
p22864
g36
(g38
S'\x00\x00\x00\x00'
tRp22865
sg22
V
sS'trials_2.thisRepN'
p22866
I3
sS'trials_2.thisTrialN'
p22867
I0
sS'trials.thisRepN'
p22868
I196
sS'trials_2.thisTrial'
p22869
NsS'trials.thisN'
p22870
I392
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22871
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22872
I0
sS'trials_2.thisN'
p22873
I3
sa(dp22874
g20
g21
sS'trials.thisIndex'
p22875
g36
(g38
S'\x01\x00\x00\x00'
tRp22876
sg22
V
sS'trials_2.thisRepN'
p22877
I3
sS'trials_2.thisTrialN'
p22878
I0
sS'trials.thisRepN'
p22879
I196
sS'trials_2.thisTrial'
p22880
NsS'trials.thisN'
p22881
I393
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22882
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22883
I1
sS'trials_2.thisN'
p22884
I3
sa(dp22885
g20
g21
sS'trials.thisIndex'
p22886
g36
(g38
S'\x00\x00\x00\x00'
tRp22887
sg22
V
sS'trials_2.thisRepN'
p22888
I3
sS'trials_2.thisTrialN'
p22889
I0
sS'trials.thisRepN'
p22890
I197
sS'trials_2.thisTrial'
p22891
NsS'trials.thisN'
p22892
I394
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22893
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22894
I0
sS'trials_2.thisN'
p22895
I3
sa(dp22896
g20
g21
sS'trials.thisIndex'
p22897
g36
(g38
S'\x01\x00\x00\x00'
tRp22898
sg22
V
sS'trials_2.thisRepN'
p22899
I3
sS'trials_2.thisTrialN'
p22900
I0
sS'trials.thisRepN'
p22901
I197
sS'trials_2.thisTrial'
p22902
NsS'trials.thisN'
p22903
I395
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22904
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22905
I1
sS'trials_2.thisN'
p22906
I3
sa(dp22907
g20
g21
sS'trials.thisIndex'
p22908
g36
(g38
S'\x00\x00\x00\x00'
tRp22909
sg22
V
sS'trials_2.thisRepN'
p22910
I3
sS'trials_2.thisTrialN'
p22911
I0
sS'trials.thisRepN'
p22912
I198
sS'trials_2.thisTrial'
p22913
NsS'trials.thisN'
p22914
I396
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22915
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22916
I0
sS'trials_2.thisN'
p22917
I3
sa(dp22918
g20
g21
sS'trials.thisIndex'
p22919
g36
(g38
S'\x01\x00\x00\x00'
tRp22920
sg22
V
sS'trials_2.thisRepN'
p22921
I3
sS'trials_2.thisTrialN'
p22922
I0
sS'trials.thisRepN'
p22923
I198
sS'trials_2.thisTrial'
p22924
NsS'trials.thisN'
p22925
I397
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22926
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22927
I1
sS'trials_2.thisN'
p22928
I3
sa(dp22929
g20
g21
sS'trials.thisIndex'
p22930
g36
(g38
S'\x00\x00\x00\x00'
tRp22931
sg22
V
sS'trials_2.thisRepN'
p22932
I3
sS'trials_2.thisTrialN'
p22933
I0
sS'trials.thisRepN'
p22934
I199
sS'trials_2.thisTrial'
p22935
NsS'trials.thisN'
p22936
I398
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22937
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22938
I0
sS'trials_2.thisN'
p22939
I3
sa(dp22940
g20
g21
sS'trials.thisIndex'
p22941
g36
(g38
S'\x01\x00\x00\x00'
tRp22942
sg22
V
sS'trials_2.thisRepN'
p22943
I3
sS'trials_2.thisTrialN'
p22944
I0
sS'trials.thisRepN'
p22945
I199
sS'trials_2.thisTrial'
p22946
NsS'trials.thisN'
p22947
I399
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22948
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22949
I1
sS'trials_2.thisN'
p22950
I3
sa(dp22951
g20
g21
sS'trials.thisIndex'
p22952
g36
(g38
S'\x00\x00\x00\x00'
tRp22953
sg22
V
sS'trials_2.thisRepN'
p22954
I3
sS'trials_2.thisTrialN'
p22955
I0
sS'trials.thisRepN'
p22956
I200
sS'trials_2.thisTrial'
p22957
NsS'trials.thisN'
p22958
I400
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22959
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22960
I0
sS'trials_2.thisN'
p22961
I3
sa(dp22962
g20
g21
sS'trials.thisIndex'
p22963
g36
(g38
S'\x01\x00\x00\x00'
tRp22964
sg22
V
sS'trials_2.thisRepN'
p22965
I3
sS'trials_2.thisTrialN'
p22966
I0
sS'trials.thisRepN'
p22967
I200
sS'trials_2.thisTrial'
p22968
NsS'trials.thisN'
p22969
I401
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22970
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22971
I1
sS'trials_2.thisN'
p22972
I3
sa(dp22973
g20
g21
sS'trials.thisIndex'
p22974
g36
(g38
S'\x00\x00\x00\x00'
tRp22975
sg22
V
sS'trials_2.thisRepN'
p22976
I3
sS'trials_2.thisTrialN'
p22977
I0
sS'trials.thisRepN'
p22978
I201
sS'trials_2.thisTrial'
p22979
NsS'trials.thisN'
p22980
I402
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22981
g18556
sg18557
g18558
sS'trials.thisTrialN'
p22982
I0
sS'trials_2.thisN'
p22983
I3
sa(dp22984
g20
g21
sS'trials.thisIndex'
p22985
g36
(g38
S'\x01\x00\x00\x00'
tRp22986
sg22
V
sS'trials_2.thisRepN'
p22987
I3
sS'trials_2.thisTrialN'
p22988
I0
sS'trials.thisRepN'
p22989
I201
sS'trials_2.thisTrial'
p22990
NsS'trials.thisN'
p22991
I403
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p22992
g18556
sg18557
g18570
sS'trials.thisTrialN'
p22993
I1
sS'trials_2.thisN'
p22994
I3
sa(dp22995
g20
g21
sS'trials.thisIndex'
p22996
g36
(g38
S'\x00\x00\x00\x00'
tRp22997
sg22
V
sS'trials_2.thisRepN'
p22998
I3
sS'trials_2.thisTrialN'
p22999
I0
sS'trials.thisRepN'
p23000
I202
sS'trials_2.thisTrial'
p23001
NsS'trials.thisN'
p23002
I404
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23003
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23004
I0
sS'trials_2.thisN'
p23005
I3
sa(dp23006
g20
g21
sS'trials.thisIndex'
p23007
g36
(g38
S'\x01\x00\x00\x00'
tRp23008
sg22
V
sS'trials_2.thisRepN'
p23009
I3
sS'trials_2.thisTrialN'
p23010
I0
sS'trials.thisRepN'
p23011
I202
sS'trials_2.thisTrial'
p23012
NsS'trials.thisN'
p23013
I405
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23014
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23015
I1
sS'trials_2.thisN'
p23016
I3
sa(dp23017
g20
g21
sS'trials.thisIndex'
p23018
g36
(g38
S'\x00\x00\x00\x00'
tRp23019
sg22
V
sS'trials_2.thisRepN'
p23020
I3
sS'trials_2.thisTrialN'
p23021
I0
sS'trials.thisRepN'
p23022
I203
sS'trials_2.thisTrial'
p23023
NsS'trials.thisN'
p23024
I406
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23025
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23026
I0
sS'trials_2.thisN'
p23027
I3
sa(dp23028
g20
g21
sS'trials.thisIndex'
p23029
g36
(g38
S'\x01\x00\x00\x00'
tRp23030
sg22
V
sS'trials_2.thisRepN'
p23031
I3
sS'trials_2.thisTrialN'
p23032
I0
sS'trials.thisRepN'
p23033
I203
sS'trials_2.thisTrial'
p23034
NsS'trials.thisN'
p23035
I407
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23036
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23037
I1
sS'trials_2.thisN'
p23038
I3
sa(dp23039
g20
g21
sS'trials.thisIndex'
p23040
g36
(g38
S'\x00\x00\x00\x00'
tRp23041
sg22
V
sS'trials_2.thisRepN'
p23042
I3
sS'trials_2.thisTrialN'
p23043
I0
sS'trials.thisRepN'
p23044
I204
sS'trials_2.thisTrial'
p23045
NsS'trials.thisN'
p23046
I408
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23047
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23048
I0
sS'trials_2.thisN'
p23049
I3
sa(dp23050
g20
g21
sS'trials.thisIndex'
p23051
g36
(g38
S'\x01\x00\x00\x00'
tRp23052
sg22
V
sS'trials_2.thisRepN'
p23053
I3
sS'trials_2.thisTrialN'
p23054
I0
sS'trials.thisRepN'
p23055
I204
sS'trials_2.thisTrial'
p23056
NsS'trials.thisN'
p23057
I409
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23058
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23059
I1
sS'trials_2.thisN'
p23060
I3
sa(dp23061
g20
g21
sS'trials.thisIndex'
p23062
g36
(g38
S'\x00\x00\x00\x00'
tRp23063
sg22
V
sS'trials_2.thisRepN'
p23064
I3
sS'trials_2.thisTrialN'
p23065
I0
sS'trials.thisRepN'
p23066
I205
sS'trials_2.thisTrial'
p23067
NsS'trials.thisN'
p23068
I410
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23069
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23070
I0
sS'trials_2.thisN'
p23071
I3
sa(dp23072
g20
g21
sS'trials.thisIndex'
p23073
g36
(g38
S'\x01\x00\x00\x00'
tRp23074
sg22
V
sS'trials_2.thisRepN'
p23075
I3
sS'trials_2.thisTrialN'
p23076
I0
sS'trials.thisRepN'
p23077
I205
sS'trials_2.thisTrial'
p23078
NsS'trials.thisN'
p23079
I411
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23080
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23081
I1
sS'trials_2.thisN'
p23082
I3
sa(dp23083
g20
g21
sS'trials.thisIndex'
p23084
g36
(g38
S'\x00\x00\x00\x00'
tRp23085
sg22
V
sS'trials_2.thisRepN'
p23086
I3
sS'trials_2.thisTrialN'
p23087
I0
sS'trials.thisRepN'
p23088
I206
sS'trials_2.thisTrial'
p23089
NsS'trials.thisN'
p23090
I412
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23091
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23092
I0
sS'trials_2.thisN'
p23093
I3
sa(dp23094
g20
g21
sS'trials.thisIndex'
p23095
g36
(g38
S'\x01\x00\x00\x00'
tRp23096
sg22
V
sS'trials_2.thisRepN'
p23097
I3
sS'trials_2.thisTrialN'
p23098
I0
sS'trials.thisRepN'
p23099
I206
sS'trials_2.thisTrial'
p23100
NsS'trials.thisN'
p23101
I413
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23102
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23103
I1
sS'trials_2.thisN'
p23104
I3
sa(dp23105
g20
g21
sS'trials.thisIndex'
p23106
g36
(g38
S'\x00\x00\x00\x00'
tRp23107
sg22
V
sS'trials_2.thisRepN'
p23108
I3
sS'trials_2.thisTrialN'
p23109
I0
sS'trials.thisRepN'
p23110
I207
sS'trials_2.thisTrial'
p23111
NsS'trials.thisN'
p23112
I414
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23113
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23114
I0
sS'trials_2.thisN'
p23115
I3
sa(dp23116
g20
g21
sS'trials.thisIndex'
p23117
g36
(g38
S'\x01\x00\x00\x00'
tRp23118
sg22
V
sS'trials_2.thisRepN'
p23119
I3
sS'trials_2.thisTrialN'
p23120
I0
sS'trials.thisRepN'
p23121
I207
sS'trials_2.thisTrial'
p23122
NsS'trials.thisN'
p23123
I415
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23124
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23125
I1
sS'trials_2.thisN'
p23126
I3
sa(dp23127
g20
g21
sS'trials.thisIndex'
p23128
g36
(g38
S'\x00\x00\x00\x00'
tRp23129
sg22
V
sS'trials_2.thisRepN'
p23130
I3
sS'trials_2.thisTrialN'
p23131
I0
sS'trials.thisRepN'
p23132
I208
sS'trials_2.thisTrial'
p23133
NsS'trials.thisN'
p23134
I416
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23135
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23136
I0
sS'trials_2.thisN'
p23137
I3
sa(dp23138
g20
g21
sS'trials.thisIndex'
p23139
g36
(g38
S'\x01\x00\x00\x00'
tRp23140
sg22
V
sS'trials_2.thisRepN'
p23141
I3
sS'trials_2.thisTrialN'
p23142
I0
sS'trials.thisRepN'
p23143
I208
sS'trials_2.thisTrial'
p23144
NsS'trials.thisN'
p23145
I417
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23146
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23147
I1
sS'trials_2.thisN'
p23148
I3
sa(dp23149
g20
g21
sS'trials.thisIndex'
p23150
g36
(g38
S'\x00\x00\x00\x00'
tRp23151
sg22
V
sS'trials_2.thisRepN'
p23152
I3
sS'trials_2.thisTrialN'
p23153
I0
sS'trials.thisRepN'
p23154
I209
sS'trials_2.thisTrial'
p23155
NsS'trials.thisN'
p23156
I418
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23157
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23158
I0
sS'trials_2.thisN'
p23159
I3
sa(dp23160
g20
g21
sS'trials.thisIndex'
p23161
g36
(g38
S'\x01\x00\x00\x00'
tRp23162
sg22
V
sS'trials_2.thisRepN'
p23163
I3
sS'trials_2.thisTrialN'
p23164
I0
sS'trials.thisRepN'
p23165
I209
sS'trials_2.thisTrial'
p23166
NsS'trials.thisN'
p23167
I419
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23168
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23169
I1
sS'trials_2.thisN'
p23170
I3
sa(dp23171
g20
g21
sS'trials.thisIndex'
p23172
g36
(g38
S'\x00\x00\x00\x00'
tRp23173
sg22
V
sS'trials_2.thisRepN'
p23174
I3
sS'trials_2.thisTrialN'
p23175
I0
sS'trials.thisRepN'
p23176
I210
sS'trials_2.thisTrial'
p23177
NsS'trials.thisN'
p23178
I420
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23179
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23180
I0
sS'trials_2.thisN'
p23181
I3
sa(dp23182
g20
g21
sS'trials.thisIndex'
p23183
g36
(g38
S'\x01\x00\x00\x00'
tRp23184
sg22
V
sS'trials_2.thisRepN'
p23185
I3
sS'trials_2.thisTrialN'
p23186
I0
sS'trials.thisRepN'
p23187
I210
sS'trials_2.thisTrial'
p23188
NsS'trials.thisN'
p23189
I421
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23190
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23191
I1
sS'trials_2.thisN'
p23192
I3
sa(dp23193
g20
g21
sS'trials.thisIndex'
p23194
g36
(g38
S'\x00\x00\x00\x00'
tRp23195
sg22
V
sS'trials_2.thisRepN'
p23196
I3
sS'trials_2.thisTrialN'
p23197
I0
sS'trials.thisRepN'
p23198
I211
sS'trials_2.thisTrial'
p23199
NsS'trials.thisN'
p23200
I422
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23201
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23202
I0
sS'trials_2.thisN'
p23203
I3
sa(dp23204
g20
g21
sS'trials.thisIndex'
p23205
g36
(g38
S'\x01\x00\x00\x00'
tRp23206
sg22
V
sS'trials_2.thisRepN'
p23207
I3
sS'trials_2.thisTrialN'
p23208
I0
sS'trials.thisRepN'
p23209
I211
sS'trials_2.thisTrial'
p23210
NsS'trials.thisN'
p23211
I423
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23212
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23213
I1
sS'trials_2.thisN'
p23214
I3
sa(dp23215
g20
g21
sS'trials.thisIndex'
p23216
g36
(g38
S'\x00\x00\x00\x00'
tRp23217
sg22
V
sS'trials_2.thisRepN'
p23218
I3
sS'trials_2.thisTrialN'
p23219
I0
sS'trials.thisRepN'
p23220
I212
sS'trials_2.thisTrial'
p23221
NsS'trials.thisN'
p23222
I424
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23223
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23224
I0
sS'trials_2.thisN'
p23225
I3
sa(dp23226
g20
g21
sS'trials.thisIndex'
p23227
g36
(g38
S'\x01\x00\x00\x00'
tRp23228
sg22
V
sS'trials_2.thisRepN'
p23229
I3
sS'trials_2.thisTrialN'
p23230
I0
sS'trials.thisRepN'
p23231
I212
sS'trials_2.thisTrial'
p23232
NsS'trials.thisN'
p23233
I425
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23234
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23235
I1
sS'trials_2.thisN'
p23236
I3
sa(dp23237
g20
g21
sS'trials.thisIndex'
p23238
g36
(g38
S'\x00\x00\x00\x00'
tRp23239
sg22
V
sS'trials_2.thisRepN'
p23240
I3
sS'trials_2.thisTrialN'
p23241
I0
sS'trials.thisRepN'
p23242
I213
sS'trials_2.thisTrial'
p23243
NsS'trials.thisN'
p23244
I426
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23245
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23246
I0
sS'trials_2.thisN'
p23247
I3
sa(dp23248
g20
g21
sS'trials.thisIndex'
p23249
g36
(g38
S'\x01\x00\x00\x00'
tRp23250
sg22
V
sS'trials_2.thisRepN'
p23251
I3
sS'trials_2.thisTrialN'
p23252
I0
sS'trials.thisRepN'
p23253
I213
sS'trials_2.thisTrial'
p23254
NsS'trials.thisN'
p23255
I427
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23256
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23257
I1
sS'trials_2.thisN'
p23258
I3
sa(dp23259
g20
g21
sS'trials.thisIndex'
p23260
g36
(g38
S'\x00\x00\x00\x00'
tRp23261
sg22
V
sS'trials_2.thisRepN'
p23262
I3
sS'trials_2.thisTrialN'
p23263
I0
sS'trials.thisRepN'
p23264
I214
sS'trials_2.thisTrial'
p23265
NsS'trials.thisN'
p23266
I428
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23267
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23268
I0
sS'trials_2.thisN'
p23269
I3
sa(dp23270
g20
g21
sS'trials.thisIndex'
p23271
g36
(g38
S'\x01\x00\x00\x00'
tRp23272
sg22
V
sS'trials_2.thisRepN'
p23273
I3
sS'trials_2.thisTrialN'
p23274
I0
sS'trials.thisRepN'
p23275
I214
sS'trials_2.thisTrial'
p23276
NsS'trials.thisN'
p23277
I429
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23278
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23279
I1
sS'trials_2.thisN'
p23280
I3
sa(dp23281
g20
g21
sS'trials.thisIndex'
p23282
g36
(g38
S'\x00\x00\x00\x00'
tRp23283
sg22
V
sS'trials_2.thisRepN'
p23284
I3
sS'trials_2.thisTrialN'
p23285
I0
sS'trials.thisRepN'
p23286
I215
sS'trials_2.thisTrial'
p23287
NsS'trials.thisN'
p23288
I430
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23289
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23290
I0
sS'trials_2.thisN'
p23291
I3
sa(dp23292
g20
g21
sS'trials.thisIndex'
p23293
g36
(g38
S'\x01\x00\x00\x00'
tRp23294
sg22
V
sS'trials_2.thisRepN'
p23295
I3
sS'trials_2.thisTrialN'
p23296
I0
sS'trials.thisRepN'
p23297
I215
sS'trials_2.thisTrial'
p23298
NsS'trials.thisN'
p23299
I431
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23300
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23301
I1
sS'trials_2.thisN'
p23302
I3
sa(dp23303
g20
g21
sS'trials.thisIndex'
p23304
g36
(g38
S'\x00\x00\x00\x00'
tRp23305
sg22
V
sS'trials_2.thisRepN'
p23306
I3
sS'trials_2.thisTrialN'
p23307
I0
sS'trials.thisRepN'
p23308
I216
sS'trials_2.thisTrial'
p23309
NsS'trials.thisN'
p23310
I432
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23311
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23312
I0
sS'trials_2.thisN'
p23313
I3
sa(dp23314
g20
g21
sS'trials.thisIndex'
p23315
g36
(g38
S'\x01\x00\x00\x00'
tRp23316
sg22
V
sS'trials_2.thisRepN'
p23317
I3
sS'trials_2.thisTrialN'
p23318
I0
sS'trials.thisRepN'
p23319
I216
sS'trials_2.thisTrial'
p23320
NsS'trials.thisN'
p23321
I433
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23322
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23323
I1
sS'trials_2.thisN'
p23324
I3
sa(dp23325
g20
g21
sS'trials.thisIndex'
p23326
g36
(g38
S'\x00\x00\x00\x00'
tRp23327
sg22
V
sS'trials_2.thisRepN'
p23328
I3
sS'trials_2.thisTrialN'
p23329
I0
sS'trials.thisRepN'
p23330
I217
sS'trials_2.thisTrial'
p23331
NsS'trials.thisN'
p23332
I434
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23333
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23334
I0
sS'trials_2.thisN'
p23335
I3
sa(dp23336
g20
g21
sS'trials.thisIndex'
p23337
g36
(g38
S'\x01\x00\x00\x00'
tRp23338
sg22
V
sS'trials_2.thisRepN'
p23339
I3
sS'trials_2.thisTrialN'
p23340
I0
sS'trials.thisRepN'
p23341
I217
sS'trials_2.thisTrial'
p23342
NsS'trials.thisN'
p23343
I435
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23344
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23345
I1
sS'trials_2.thisN'
p23346
I3
sa(dp23347
g20
g21
sS'trials.thisIndex'
p23348
g36
(g38
S'\x00\x00\x00\x00'
tRp23349
sg22
V
sS'trials_2.thisRepN'
p23350
I3
sS'trials_2.thisTrialN'
p23351
I0
sS'trials.thisRepN'
p23352
I218
sS'trials_2.thisTrial'
p23353
NsS'trials.thisN'
p23354
I436
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23355
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23356
I0
sS'trials_2.thisN'
p23357
I3
sa(dp23358
g20
g21
sS'trials.thisIndex'
p23359
g36
(g38
S'\x01\x00\x00\x00'
tRp23360
sg22
V
sS'trials_2.thisRepN'
p23361
I3
sS'trials_2.thisTrialN'
p23362
I0
sS'trials.thisRepN'
p23363
I218
sS'trials_2.thisTrial'
p23364
NsS'trials.thisN'
p23365
I437
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23366
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23367
I1
sS'trials_2.thisN'
p23368
I3
sa(dp23369
g20
g21
sS'trials.thisIndex'
p23370
g36
(g38
S'\x00\x00\x00\x00'
tRp23371
sg22
V
sS'trials_2.thisRepN'
p23372
I3
sS'trials_2.thisTrialN'
p23373
I0
sS'trials.thisRepN'
p23374
I219
sS'trials_2.thisTrial'
p23375
NsS'trials.thisN'
p23376
I438
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23377
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23378
I0
sS'trials_2.thisN'
p23379
I3
sa(dp23380
g20
g21
sS'trials.thisIndex'
p23381
g36
(g38
S'\x01\x00\x00\x00'
tRp23382
sg22
V
sS'trials_2.thisRepN'
p23383
I3
sS'trials_2.thisTrialN'
p23384
I0
sS'trials.thisRepN'
p23385
I219
sS'trials_2.thisTrial'
p23386
NsS'trials.thisN'
p23387
I439
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23388
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23389
I1
sS'trials_2.thisN'
p23390
I3
sa(dp23391
g20
g21
sS'trials.thisIndex'
p23392
g36
(g38
S'\x00\x00\x00\x00'
tRp23393
sg22
V
sS'trials_2.thisRepN'
p23394
I3
sS'trials_2.thisTrialN'
p23395
I0
sS'trials.thisRepN'
p23396
I220
sS'trials_2.thisTrial'
p23397
NsS'trials.thisN'
p23398
I440
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23399
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23400
I0
sS'trials_2.thisN'
p23401
I3
sa(dp23402
g20
g21
sS'trials.thisIndex'
p23403
g36
(g38
S'\x01\x00\x00\x00'
tRp23404
sg22
V
sS'trials_2.thisRepN'
p23405
I3
sS'trials_2.thisTrialN'
p23406
I0
sS'trials.thisRepN'
p23407
I220
sS'trials_2.thisTrial'
p23408
NsS'trials.thisN'
p23409
I441
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23410
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23411
I1
sS'trials_2.thisN'
p23412
I3
sa(dp23413
g20
g21
sS'trials.thisIndex'
p23414
g36
(g38
S'\x00\x00\x00\x00'
tRp23415
sg22
V
sS'trials_2.thisRepN'
p23416
I3
sS'trials_2.thisTrialN'
p23417
I0
sS'trials.thisRepN'
p23418
I221
sS'trials_2.thisTrial'
p23419
NsS'trials.thisN'
p23420
I442
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23421
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23422
I0
sS'trials_2.thisN'
p23423
I3
sa(dp23424
g20
g21
sS'trials.thisIndex'
p23425
g36
(g38
S'\x01\x00\x00\x00'
tRp23426
sg22
V
sS'trials_2.thisRepN'
p23427
I3
sS'trials_2.thisTrialN'
p23428
I0
sS'trials.thisRepN'
p23429
I221
sS'trials_2.thisTrial'
p23430
NsS'trials.thisN'
p23431
I443
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23432
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23433
I1
sS'trials_2.thisN'
p23434
I3
sa(dp23435
g20
g21
sS'trials.thisIndex'
p23436
g36
(g38
S'\x00\x00\x00\x00'
tRp23437
sg22
V
sS'trials_2.thisRepN'
p23438
I3
sS'trials_2.thisTrialN'
p23439
I0
sS'trials.thisRepN'
p23440
I222
sS'trials_2.thisTrial'
p23441
NsS'trials.thisN'
p23442
I444
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23443
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23444
I0
sS'trials_2.thisN'
p23445
I3
sa(dp23446
g20
g21
sS'trials.thisIndex'
p23447
g36
(g38
S'\x01\x00\x00\x00'
tRp23448
sg22
V
sS'trials_2.thisRepN'
p23449
I3
sS'trials_2.thisTrialN'
p23450
I0
sS'trials.thisRepN'
p23451
I222
sS'trials_2.thisTrial'
p23452
NsS'trials.thisN'
p23453
I445
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23454
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23455
I1
sS'trials_2.thisN'
p23456
I3
sa(dp23457
g20
g21
sS'trials.thisIndex'
p23458
g36
(g38
S'\x00\x00\x00\x00'
tRp23459
sg22
V
sS'trials_2.thisRepN'
p23460
I3
sS'trials_2.thisTrialN'
p23461
I0
sS'trials.thisRepN'
p23462
I223
sS'trials_2.thisTrial'
p23463
NsS'trials.thisN'
p23464
I446
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23465
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23466
I0
sS'trials_2.thisN'
p23467
I3
sa(dp23468
g20
g21
sS'trials.thisIndex'
p23469
g36
(g38
S'\x01\x00\x00\x00'
tRp23470
sg22
V
sS'trials_2.thisRepN'
p23471
I3
sS'trials_2.thisTrialN'
p23472
I0
sS'trials.thisRepN'
p23473
I223
sS'trials_2.thisTrial'
p23474
NsS'trials.thisN'
p23475
I447
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23476
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23477
I1
sS'trials_2.thisN'
p23478
I3
sa(dp23479
g20
g21
sS'trials.thisIndex'
p23480
g36
(g38
S'\x00\x00\x00\x00'
tRp23481
sg22
V
sS'trials_2.thisRepN'
p23482
I3
sS'trials_2.thisTrialN'
p23483
I0
sS'trials.thisRepN'
p23484
I224
sS'trials_2.thisTrial'
p23485
NsS'trials.thisN'
p23486
I448
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23487
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23488
I0
sS'trials_2.thisN'
p23489
I3
sa(dp23490
g20
g21
sS'trials.thisIndex'
p23491
g36
(g38
S'\x01\x00\x00\x00'
tRp23492
sg22
V
sS'trials_2.thisRepN'
p23493
I3
sS'trials_2.thisTrialN'
p23494
I0
sS'trials.thisRepN'
p23495
I224
sS'trials_2.thisTrial'
p23496
NsS'trials.thisN'
p23497
I449
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23498
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23499
I1
sS'trials_2.thisN'
p23500
I3
sa(dp23501
g20
g21
sS'trials.thisIndex'
p23502
g36
(g38
S'\x00\x00\x00\x00'
tRp23503
sg22
V
sS'trials_2.thisRepN'
p23504
I3
sS'trials_2.thisTrialN'
p23505
I0
sS'trials.thisRepN'
p23506
I225
sS'trials_2.thisTrial'
p23507
NsS'trials.thisN'
p23508
I450
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23509
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23510
I0
sS'trials_2.thisN'
p23511
I3
sa(dp23512
g20
g21
sS'trials.thisIndex'
p23513
g36
(g38
S'\x01\x00\x00\x00'
tRp23514
sg22
V
sS'trials_2.thisRepN'
p23515
I3
sS'trials_2.thisTrialN'
p23516
I0
sS'trials.thisRepN'
p23517
I225
sS'trials_2.thisTrial'
p23518
NsS'trials.thisN'
p23519
I451
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23520
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23521
I1
sS'trials_2.thisN'
p23522
I3
sa(dp23523
g20
g21
sS'trials.thisIndex'
p23524
g36
(g38
S'\x00\x00\x00\x00'
tRp23525
sg22
V
sS'trials_2.thisRepN'
p23526
I3
sS'trials_2.thisTrialN'
p23527
I0
sS'trials.thisRepN'
p23528
I226
sS'trials_2.thisTrial'
p23529
NsS'trials.thisN'
p23530
I452
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23531
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23532
I0
sS'trials_2.thisN'
p23533
I3
sa(dp23534
g20
g21
sS'trials.thisIndex'
p23535
g36
(g38
S'\x01\x00\x00\x00'
tRp23536
sg22
V
sS'trials_2.thisRepN'
p23537
I3
sS'trials_2.thisTrialN'
p23538
I0
sS'trials.thisRepN'
p23539
I226
sS'trials_2.thisTrial'
p23540
NsS'trials.thisN'
p23541
I453
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23542
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23543
I1
sS'trials_2.thisN'
p23544
I3
sa(dp23545
g20
g21
sS'trials.thisIndex'
p23546
g36
(g38
S'\x00\x00\x00\x00'
tRp23547
sg22
V
sS'trials_2.thisRepN'
p23548
I3
sS'trials_2.thisTrialN'
p23549
I0
sS'trials.thisRepN'
p23550
I227
sS'trials_2.thisTrial'
p23551
NsS'trials.thisN'
p23552
I454
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23553
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23554
I0
sS'trials_2.thisN'
p23555
I3
sa(dp23556
g20
g21
sS'trials.thisIndex'
p23557
g36
(g38
S'\x01\x00\x00\x00'
tRp23558
sg22
V
sS'trials_2.thisRepN'
p23559
I3
sS'trials_2.thisTrialN'
p23560
I0
sS'trials.thisRepN'
p23561
I227
sS'trials_2.thisTrial'
p23562
NsS'trials.thisN'
p23563
I455
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23564
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23565
I1
sS'trials_2.thisN'
p23566
I3
sa(dp23567
g20
g21
sS'trials.thisIndex'
p23568
g36
(g38
S'\x00\x00\x00\x00'
tRp23569
sg22
V
sS'trials_2.thisRepN'
p23570
I3
sS'trials_2.thisTrialN'
p23571
I0
sS'trials.thisRepN'
p23572
I228
sS'trials_2.thisTrial'
p23573
NsS'trials.thisN'
p23574
I456
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23575
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23576
I0
sS'trials_2.thisN'
p23577
I3
sa(dp23578
g20
g21
sS'trials.thisIndex'
p23579
g36
(g38
S'\x01\x00\x00\x00'
tRp23580
sg22
V
sS'trials_2.thisRepN'
p23581
I3
sS'trials_2.thisTrialN'
p23582
I0
sS'trials.thisRepN'
p23583
I228
sS'trials_2.thisTrial'
p23584
NsS'trials.thisN'
p23585
I457
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23586
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23587
I1
sS'trials_2.thisN'
p23588
I3
sa(dp23589
g20
g21
sS'trials.thisIndex'
p23590
g36
(g38
S'\x00\x00\x00\x00'
tRp23591
sg22
V
sS'trials_2.thisRepN'
p23592
I3
sS'trials_2.thisTrialN'
p23593
I0
sS'trials.thisRepN'
p23594
I229
sS'trials_2.thisTrial'
p23595
NsS'trials.thisN'
p23596
I458
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23597
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23598
I0
sS'trials_2.thisN'
p23599
I3
sa(dp23600
g20
g21
sS'trials.thisIndex'
p23601
g36
(g38
S'\x01\x00\x00\x00'
tRp23602
sg22
V
sS'trials_2.thisRepN'
p23603
I3
sS'trials_2.thisTrialN'
p23604
I0
sS'trials.thisRepN'
p23605
I229
sS'trials_2.thisTrial'
p23606
NsS'trials.thisN'
p23607
I459
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23608
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23609
I1
sS'trials_2.thisN'
p23610
I3
sa(dp23611
g20
g21
sS'trials.thisIndex'
p23612
g36
(g38
S'\x00\x00\x00\x00'
tRp23613
sg22
V
sS'trials_2.thisRepN'
p23614
I3
sS'trials_2.thisTrialN'
p23615
I0
sS'trials.thisRepN'
p23616
I230
sS'trials_2.thisTrial'
p23617
NsS'trials.thisN'
p23618
I460
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23619
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23620
I0
sS'trials_2.thisN'
p23621
I3
sa(dp23622
g20
g21
sS'trials.thisIndex'
p23623
g36
(g38
S'\x01\x00\x00\x00'
tRp23624
sg22
V
sS'trials_2.thisRepN'
p23625
I3
sS'trials_2.thisTrialN'
p23626
I0
sS'trials.thisRepN'
p23627
I230
sS'trials_2.thisTrial'
p23628
NsS'trials.thisN'
p23629
I461
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23630
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23631
I1
sS'trials_2.thisN'
p23632
I3
sa(dp23633
g20
g21
sS'trials.thisIndex'
p23634
g36
(g38
S'\x00\x00\x00\x00'
tRp23635
sg22
V
sS'trials_2.thisRepN'
p23636
I3
sS'trials_2.thisTrialN'
p23637
I0
sS'trials.thisRepN'
p23638
I231
sS'trials_2.thisTrial'
p23639
NsS'trials.thisN'
p23640
I462
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23641
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23642
I0
sS'trials_2.thisN'
p23643
I3
sa(dp23644
g20
g21
sS'trials.thisIndex'
p23645
g36
(g38
S'\x01\x00\x00\x00'
tRp23646
sg22
V
sS'trials_2.thisRepN'
p23647
I3
sS'trials_2.thisTrialN'
p23648
I0
sS'trials.thisRepN'
p23649
I231
sS'trials_2.thisTrial'
p23650
NsS'trials.thisN'
p23651
I463
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23652
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23653
I1
sS'trials_2.thisN'
p23654
I3
sa(dp23655
g20
g21
sS'trials.thisIndex'
p23656
g36
(g38
S'\x00\x00\x00\x00'
tRp23657
sg22
V
sS'trials_2.thisRepN'
p23658
I3
sS'trials_2.thisTrialN'
p23659
I0
sS'trials.thisRepN'
p23660
I232
sS'trials_2.thisTrial'
p23661
NsS'trials.thisN'
p23662
I464
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23663
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23664
I0
sS'trials_2.thisN'
p23665
I3
sa(dp23666
g20
g21
sS'trials.thisIndex'
p23667
g36
(g38
S'\x01\x00\x00\x00'
tRp23668
sg22
V
sS'trials_2.thisRepN'
p23669
I3
sS'trials_2.thisTrialN'
p23670
I0
sS'trials.thisRepN'
p23671
I232
sS'trials_2.thisTrial'
p23672
NsS'trials.thisN'
p23673
I465
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23674
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23675
I1
sS'trials_2.thisN'
p23676
I3
sa(dp23677
g20
g21
sS'trials.thisIndex'
p23678
g36
(g38
S'\x00\x00\x00\x00'
tRp23679
sg22
V
sS'trials_2.thisRepN'
p23680
I3
sS'trials_2.thisTrialN'
p23681
I0
sS'trials.thisRepN'
p23682
I233
sS'trials_2.thisTrial'
p23683
NsS'trials.thisN'
p23684
I466
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23685
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23686
I0
sS'trials_2.thisN'
p23687
I3
sa(dp23688
g20
g21
sS'trials.thisIndex'
p23689
g36
(g38
S'\x01\x00\x00\x00'
tRp23690
sg22
V
sS'trials_2.thisRepN'
p23691
I3
sS'trials_2.thisTrialN'
p23692
I0
sS'trials.thisRepN'
p23693
I233
sS'trials_2.thisTrial'
p23694
NsS'trials.thisN'
p23695
I467
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23696
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23697
I1
sS'trials_2.thisN'
p23698
I3
sa(dp23699
g20
g21
sS'trials.thisIndex'
p23700
g36
(g38
S'\x00\x00\x00\x00'
tRp23701
sg22
V
sS'trials_2.thisRepN'
p23702
I3
sS'trials_2.thisTrialN'
p23703
I0
sS'trials.thisRepN'
p23704
I234
sS'trials_2.thisTrial'
p23705
NsS'trials.thisN'
p23706
I468
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23707
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23708
I0
sS'trials_2.thisN'
p23709
I3
sa(dp23710
g20
g21
sS'trials.thisIndex'
p23711
g36
(g38
S'\x01\x00\x00\x00'
tRp23712
sg22
V
sS'trials_2.thisRepN'
p23713
I3
sS'trials_2.thisTrialN'
p23714
I0
sS'trials.thisRepN'
p23715
I234
sS'trials_2.thisTrial'
p23716
NsS'trials.thisN'
p23717
I469
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23718
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23719
I1
sS'trials_2.thisN'
p23720
I3
sa(dp23721
g20
g21
sS'trials.thisIndex'
p23722
g36
(g38
S'\x00\x00\x00\x00'
tRp23723
sg22
V
sS'trials_2.thisRepN'
p23724
I3
sS'trials_2.thisTrialN'
p23725
I0
sS'trials.thisRepN'
p23726
I235
sS'trials_2.thisTrial'
p23727
NsS'trials.thisN'
p23728
I470
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23729
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23730
I0
sS'trials_2.thisN'
p23731
I3
sa(dp23732
g20
g21
sS'trials.thisIndex'
p23733
g36
(g38
S'\x01\x00\x00\x00'
tRp23734
sg22
V
sS'trials_2.thisRepN'
p23735
I3
sS'trials_2.thisTrialN'
p23736
I0
sS'trials.thisRepN'
p23737
I235
sS'trials_2.thisTrial'
p23738
NsS'trials.thisN'
p23739
I471
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23740
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23741
I1
sS'trials_2.thisN'
p23742
I3
sa(dp23743
g20
g21
sS'trials.thisIndex'
p23744
g36
(g38
S'\x00\x00\x00\x00'
tRp23745
sg22
V
sS'trials_2.thisRepN'
p23746
I3
sS'trials_2.thisTrialN'
p23747
I0
sS'trials.thisRepN'
p23748
I236
sS'trials_2.thisTrial'
p23749
NsS'trials.thisN'
p23750
I472
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23751
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23752
I0
sS'trials_2.thisN'
p23753
I3
sa(dp23754
g20
g21
sS'trials.thisIndex'
p23755
g36
(g38
S'\x01\x00\x00\x00'
tRp23756
sg22
V
sS'trials_2.thisRepN'
p23757
I3
sS'trials_2.thisTrialN'
p23758
I0
sS'trials.thisRepN'
p23759
I236
sS'trials_2.thisTrial'
p23760
NsS'trials.thisN'
p23761
I473
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23762
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23763
I1
sS'trials_2.thisN'
p23764
I3
sa(dp23765
g20
g21
sS'trials.thisIndex'
p23766
g36
(g38
S'\x00\x00\x00\x00'
tRp23767
sg22
V
sS'trials_2.thisRepN'
p23768
I3
sS'trials_2.thisTrialN'
p23769
I0
sS'trials.thisRepN'
p23770
I237
sS'trials_2.thisTrial'
p23771
NsS'trials.thisN'
p23772
I474
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23773
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23774
I0
sS'trials_2.thisN'
p23775
I3
sa(dp23776
g20
g21
sS'trials.thisIndex'
p23777
g36
(g38
S'\x01\x00\x00\x00'
tRp23778
sg22
V
sS'trials_2.thisRepN'
p23779
I3
sS'trials_2.thisTrialN'
p23780
I0
sS'trials.thisRepN'
p23781
I237
sS'trials_2.thisTrial'
p23782
NsS'trials.thisN'
p23783
I475
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23784
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23785
I1
sS'trials_2.thisN'
p23786
I3
sa(dp23787
g20
g21
sS'trials.thisIndex'
p23788
g36
(g38
S'\x00\x00\x00\x00'
tRp23789
sg22
V
sS'trials_2.thisRepN'
p23790
I3
sS'trials_2.thisTrialN'
p23791
I0
sS'trials.thisRepN'
p23792
I238
sS'trials_2.thisTrial'
p23793
NsS'trials.thisN'
p23794
I476
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23795
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23796
I0
sS'trials_2.thisN'
p23797
I3
sa(dp23798
g20
g21
sS'trials.thisIndex'
p23799
g36
(g38
S'\x01\x00\x00\x00'
tRp23800
sg22
V
sS'trials_2.thisRepN'
p23801
I3
sS'trials_2.thisTrialN'
p23802
I0
sS'trials.thisRepN'
p23803
I238
sS'trials_2.thisTrial'
p23804
NsS'trials.thisN'
p23805
I477
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23806
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23807
I1
sS'trials_2.thisN'
p23808
I3
sa(dp23809
g20
g21
sS'trials.thisIndex'
p23810
g36
(g38
S'\x00\x00\x00\x00'
tRp23811
sg22
V
sS'trials_2.thisRepN'
p23812
I3
sS'trials_2.thisTrialN'
p23813
I0
sS'trials.thisRepN'
p23814
I239
sS'trials_2.thisTrial'
p23815
NsS'trials.thisN'
p23816
I478
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23817
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23818
I0
sS'trials_2.thisN'
p23819
I3
sa(dp23820
g20
g21
sS'trials.thisIndex'
p23821
g36
(g38
S'\x01\x00\x00\x00'
tRp23822
sg22
V
sS'trials_2.thisRepN'
p23823
I3
sS'trials_2.thisTrialN'
p23824
I0
sS'trials.thisRepN'
p23825
I239
sS'trials_2.thisTrial'
p23826
NsS'trials.thisN'
p23827
I479
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23828
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23829
I1
sS'trials_2.thisN'
p23830
I3
sa(dp23831
g20
g21
sS'trials.thisIndex'
p23832
g36
(g38
S'\x00\x00\x00\x00'
tRp23833
sg22
V
sS'trials_2.thisRepN'
p23834
I3
sS'trials_2.thisTrialN'
p23835
I0
sS'trials.thisRepN'
p23836
I240
sS'trials_2.thisTrial'
p23837
NsS'trials.thisN'
p23838
I480
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23839
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23840
I0
sS'trials_2.thisN'
p23841
I3
sa(dp23842
g20
g21
sS'trials.thisIndex'
p23843
g36
(g38
S'\x01\x00\x00\x00'
tRp23844
sg22
V
sS'trials_2.thisRepN'
p23845
I3
sS'trials_2.thisTrialN'
p23846
I0
sS'trials.thisRepN'
p23847
I240
sS'trials_2.thisTrial'
p23848
NsS'trials.thisN'
p23849
I481
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23850
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23851
I1
sS'trials_2.thisN'
p23852
I3
sa(dp23853
g20
g21
sS'trials.thisIndex'
p23854
g36
(g38
S'\x00\x00\x00\x00'
tRp23855
sg22
V
sS'trials_2.thisRepN'
p23856
I3
sS'trials_2.thisTrialN'
p23857
I0
sS'trials.thisRepN'
p23858
I241
sS'trials_2.thisTrial'
p23859
NsS'trials.thisN'
p23860
I482
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23861
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23862
I0
sS'trials_2.thisN'
p23863
I3
sa(dp23864
g20
g21
sS'trials.thisIndex'
p23865
g36
(g38
S'\x01\x00\x00\x00'
tRp23866
sg22
V
sS'trials_2.thisRepN'
p23867
I3
sS'trials_2.thisTrialN'
p23868
I0
sS'trials.thisRepN'
p23869
I241
sS'trials_2.thisTrial'
p23870
NsS'trials.thisN'
p23871
I483
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23872
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23873
I1
sS'trials_2.thisN'
p23874
I3
sa(dp23875
g20
g21
sS'trials.thisIndex'
p23876
g36
(g38
S'\x00\x00\x00\x00'
tRp23877
sg22
V
sS'trials_2.thisRepN'
p23878
I3
sS'trials_2.thisTrialN'
p23879
I0
sS'trials.thisRepN'
p23880
I242
sS'trials_2.thisTrial'
p23881
NsS'trials.thisN'
p23882
I484
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23883
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23884
I0
sS'trials_2.thisN'
p23885
I3
sa(dp23886
g20
g21
sS'trials.thisIndex'
p23887
g36
(g38
S'\x01\x00\x00\x00'
tRp23888
sg22
V
sS'trials_2.thisRepN'
p23889
I3
sS'trials_2.thisTrialN'
p23890
I0
sS'trials.thisRepN'
p23891
I242
sS'trials_2.thisTrial'
p23892
NsS'trials.thisN'
p23893
I485
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23894
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23895
I1
sS'trials_2.thisN'
p23896
I3
sa(dp23897
g20
g21
sS'trials.thisIndex'
p23898
g36
(g38
S'\x00\x00\x00\x00'
tRp23899
sg22
V
sS'trials_2.thisRepN'
p23900
I3
sS'trials_2.thisTrialN'
p23901
I0
sS'trials.thisRepN'
p23902
I243
sS'trials_2.thisTrial'
p23903
NsS'trials.thisN'
p23904
I486
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23905
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23906
I0
sS'trials_2.thisN'
p23907
I3
sa(dp23908
g20
g21
sS'trials.thisIndex'
p23909
g36
(g38
S'\x01\x00\x00\x00'
tRp23910
sg22
V
sS'trials_2.thisRepN'
p23911
I3
sS'trials_2.thisTrialN'
p23912
I0
sS'trials.thisRepN'
p23913
I243
sS'trials_2.thisTrial'
p23914
NsS'trials.thisN'
p23915
I487
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23916
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23917
I1
sS'trials_2.thisN'
p23918
I3
sa(dp23919
g20
g21
sS'trials.thisIndex'
p23920
g36
(g38
S'\x00\x00\x00\x00'
tRp23921
sg22
V
sS'trials_2.thisRepN'
p23922
I3
sS'trials_2.thisTrialN'
p23923
I0
sS'trials.thisRepN'
p23924
I244
sS'trials_2.thisTrial'
p23925
NsS'trials.thisN'
p23926
I488
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23927
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23928
I0
sS'trials_2.thisN'
p23929
I3
sa(dp23930
g20
g21
sS'trials.thisIndex'
p23931
g36
(g38
S'\x01\x00\x00\x00'
tRp23932
sg22
V
sS'trials_2.thisRepN'
p23933
I3
sS'trials_2.thisTrialN'
p23934
I0
sS'trials.thisRepN'
p23935
I244
sS'trials_2.thisTrial'
p23936
NsS'trials.thisN'
p23937
I489
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23938
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23939
I1
sS'trials_2.thisN'
p23940
I3
sa(dp23941
g20
g21
sS'trials.thisIndex'
p23942
g36
(g38
S'\x00\x00\x00\x00'
tRp23943
sg22
V
sS'trials_2.thisRepN'
p23944
I3
sS'trials_2.thisTrialN'
p23945
I0
sS'trials.thisRepN'
p23946
I245
sS'trials_2.thisTrial'
p23947
NsS'trials.thisN'
p23948
I490
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23949
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23950
I0
sS'trials_2.thisN'
p23951
I3
sa(dp23952
g20
g21
sS'trials.thisIndex'
p23953
g36
(g38
S'\x01\x00\x00\x00'
tRp23954
sg22
V
sS'trials_2.thisRepN'
p23955
I3
sS'trials_2.thisTrialN'
p23956
I0
sS'trials.thisRepN'
p23957
I245
sS'trials_2.thisTrial'
p23958
NsS'trials.thisN'
p23959
I491
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23960
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23961
I1
sS'trials_2.thisN'
p23962
I3
sa(dp23963
g20
g21
sS'trials.thisIndex'
p23964
g36
(g38
S'\x00\x00\x00\x00'
tRp23965
sg22
V
sS'trials_2.thisRepN'
p23966
I3
sS'trials_2.thisTrialN'
p23967
I0
sS'trials.thisRepN'
p23968
I246
sS'trials_2.thisTrial'
p23969
NsS'trials.thisN'
p23970
I492
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23971
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23972
I0
sS'trials_2.thisN'
p23973
I3
sa(dp23974
g20
g21
sS'trials.thisIndex'
p23975
g36
(g38
S'\x01\x00\x00\x00'
tRp23976
sg22
V
sS'trials_2.thisRepN'
p23977
I3
sS'trials_2.thisTrialN'
p23978
I0
sS'trials.thisRepN'
p23979
I246
sS'trials_2.thisTrial'
p23980
NsS'trials.thisN'
p23981
I493
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23982
g18556
sg18557
g18570
sS'trials.thisTrialN'
p23983
I1
sS'trials_2.thisN'
p23984
I3
sa(dp23985
g20
g21
sS'trials.thisIndex'
p23986
g36
(g38
S'\x00\x00\x00\x00'
tRp23987
sg22
V
sS'trials_2.thisRepN'
p23988
I3
sS'trials_2.thisTrialN'
p23989
I0
sS'trials.thisRepN'
p23990
I247
sS'trials_2.thisTrial'
p23991
NsS'trials.thisN'
p23992
I494
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p23993
g18556
sg18557
g18558
sS'trials.thisTrialN'
p23994
I0
sS'trials_2.thisN'
p23995
I3
sa(dp23996
g20
g21
sS'trials.thisIndex'
p23997
g36
(g38
S'\x01\x00\x00\x00'
tRp23998
sg22
V
sS'trials_2.thisRepN'
p23999
I3
sS'trials_2.thisTrialN'
p24000
I0
sS'trials.thisRepN'
p24001
I247
sS'trials_2.thisTrial'
p24002
NsS'trials.thisN'
p24003
I495
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24004
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24005
I1
sS'trials_2.thisN'
p24006
I3
sa(dp24007
g20
g21
sS'trials.thisIndex'
p24008
g36
(g38
S'\x00\x00\x00\x00'
tRp24009
sg22
V
sS'trials_2.thisRepN'
p24010
I3
sS'trials_2.thisTrialN'
p24011
I0
sS'trials.thisRepN'
p24012
I248
sS'trials_2.thisTrial'
p24013
NsS'trials.thisN'
p24014
I496
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24015
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24016
I0
sS'trials_2.thisN'
p24017
I3
sa(dp24018
g20
g21
sS'trials.thisIndex'
p24019
g36
(g38
S'\x01\x00\x00\x00'
tRp24020
sg22
V
sS'trials_2.thisRepN'
p24021
I3
sS'trials_2.thisTrialN'
p24022
I0
sS'trials.thisRepN'
p24023
I248
sS'trials_2.thisTrial'
p24024
NsS'trials.thisN'
p24025
I497
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24026
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24027
I1
sS'trials_2.thisN'
p24028
I3
sa(dp24029
g20
g21
sS'trials.thisIndex'
p24030
g36
(g38
S'\x00\x00\x00\x00'
tRp24031
sg22
V
sS'trials_2.thisRepN'
p24032
I3
sS'trials_2.thisTrialN'
p24033
I0
sS'trials.thisRepN'
p24034
I249
sS'trials_2.thisTrial'
p24035
NsS'trials.thisN'
p24036
I498
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24037
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24038
I0
sS'trials_2.thisN'
p24039
I3
sa(dp24040
g20
g21
sS'trials.thisIndex'
p24041
g36
(g38
S'\x01\x00\x00\x00'
tRp24042
sg22
V
sS'trials_2.thisRepN'
p24043
I3
sS'trials_2.thisTrialN'
p24044
I0
sS'trials.thisRepN'
p24045
I249
sS'trials_2.thisTrial'
p24046
NsS'trials.thisN'
p24047
I499
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24048
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24049
I1
sS'trials_2.thisN'
p24050
I3
sa(dp24051
g20
g21
sS'trials.thisIndex'
p24052
g36
(g38
S'\x00\x00\x00\x00'
tRp24053
sg22
V
sS'trials_2.thisRepN'
p24054
I3
sS'trials_2.thisTrialN'
p24055
I0
sS'trials.thisRepN'
p24056
I250
sS'trials_2.thisTrial'
p24057
NsS'trials.thisN'
p24058
I500
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24059
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24060
I0
sS'trials_2.thisN'
p24061
I3
sa(dp24062
g20
g21
sS'trials.thisIndex'
p24063
g36
(g38
S'\x01\x00\x00\x00'
tRp24064
sg22
V
sS'trials_2.thisRepN'
p24065
I3
sS'trials_2.thisTrialN'
p24066
I0
sS'trials.thisRepN'
p24067
I250
sS'trials_2.thisTrial'
p24068
NsS'trials.thisN'
p24069
I501
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24070
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24071
I1
sS'trials_2.thisN'
p24072
I3
sa(dp24073
g20
g21
sS'trials.thisIndex'
p24074
g36
(g38
S'\x00\x00\x00\x00'
tRp24075
sg22
V
sS'trials_2.thisRepN'
p24076
I3
sS'trials_2.thisTrialN'
p24077
I0
sS'trials.thisRepN'
p24078
I251
sS'trials_2.thisTrial'
p24079
NsS'trials.thisN'
p24080
I502
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24081
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24082
I0
sS'trials_2.thisN'
p24083
I3
sa(dp24084
g20
g21
sS'trials.thisIndex'
p24085
g36
(g38
S'\x01\x00\x00\x00'
tRp24086
sg22
V
sS'trials_2.thisRepN'
p24087
I3
sS'trials_2.thisTrialN'
p24088
I0
sS'trials.thisRepN'
p24089
I251
sS'trials_2.thisTrial'
p24090
NsS'trials.thisN'
p24091
I503
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24092
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24093
I1
sS'trials_2.thisN'
p24094
I3
sa(dp24095
g20
g21
sS'trials.thisIndex'
p24096
g36
(g38
S'\x00\x00\x00\x00'
tRp24097
sg22
V
sS'trials_2.thisRepN'
p24098
I3
sS'trials_2.thisTrialN'
p24099
I0
sS'trials.thisRepN'
p24100
I252
sS'trials_2.thisTrial'
p24101
NsS'trials.thisN'
p24102
I504
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24103
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24104
I0
sS'trials_2.thisN'
p24105
I3
sa(dp24106
g20
g21
sS'trials.thisIndex'
p24107
g36
(g38
S'\x01\x00\x00\x00'
tRp24108
sg22
V
sS'trials_2.thisRepN'
p24109
I3
sS'trials_2.thisTrialN'
p24110
I0
sS'trials.thisRepN'
p24111
I252
sS'trials_2.thisTrial'
p24112
NsS'trials.thisN'
p24113
I505
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24114
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24115
I1
sS'trials_2.thisN'
p24116
I3
sa(dp24117
g20
g21
sS'trials.thisIndex'
p24118
g36
(g38
S'\x00\x00\x00\x00'
tRp24119
sg22
V
sS'trials_2.thisRepN'
p24120
I3
sS'trials_2.thisTrialN'
p24121
I0
sS'trials.thisRepN'
p24122
I253
sS'trials_2.thisTrial'
p24123
NsS'trials.thisN'
p24124
I506
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24125
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24126
I0
sS'trials_2.thisN'
p24127
I3
sa(dp24128
g20
g21
sS'trials.thisIndex'
p24129
g36
(g38
S'\x01\x00\x00\x00'
tRp24130
sg22
V
sS'trials_2.thisRepN'
p24131
I3
sS'trials_2.thisTrialN'
p24132
I0
sS'trials.thisRepN'
p24133
I253
sS'trials_2.thisTrial'
p24134
NsS'trials.thisN'
p24135
I507
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24136
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24137
I1
sS'trials_2.thisN'
p24138
I3
sa(dp24139
g20
g21
sS'trials.thisIndex'
p24140
g36
(g38
S'\x00\x00\x00\x00'
tRp24141
sg22
V
sS'trials_2.thisRepN'
p24142
I3
sS'trials_2.thisTrialN'
p24143
I0
sS'trials.thisRepN'
p24144
I254
sS'trials_2.thisTrial'
p24145
NsS'trials.thisN'
p24146
I508
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24147
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24148
I0
sS'trials_2.thisN'
p24149
I3
sa(dp24150
g20
g21
sS'trials.thisIndex'
p24151
g36
(g38
S'\x01\x00\x00\x00'
tRp24152
sg22
V
sS'trials_2.thisRepN'
p24153
I3
sS'trials_2.thisTrialN'
p24154
I0
sS'trials.thisRepN'
p24155
I254
sS'trials_2.thisTrial'
p24156
NsS'trials.thisN'
p24157
I509
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24158
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24159
I1
sS'trials_2.thisN'
p24160
I3
sa(dp24161
g20
g21
sS'trials.thisIndex'
p24162
g36
(g38
S'\x00\x00\x00\x00'
tRp24163
sg22
V
sS'trials_2.thisRepN'
p24164
I3
sS'trials_2.thisTrialN'
p24165
I0
sS'trials.thisRepN'
p24166
I255
sS'trials_2.thisTrial'
p24167
NsS'trials.thisN'
p24168
I510
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24169
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24170
I0
sS'trials_2.thisN'
p24171
I3
sa(dp24172
g20
g21
sS'trials.thisIndex'
p24173
g36
(g38
S'\x01\x00\x00\x00'
tRp24174
sg22
V
sS'trials_2.thisRepN'
p24175
I3
sS'trials_2.thisTrialN'
p24176
I0
sS'trials.thisRepN'
p24177
I255
sS'trials_2.thisTrial'
p24178
NsS'trials.thisN'
p24179
I511
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24180
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24181
I1
sS'trials_2.thisN'
p24182
I3
sa(dp24183
g20
g21
sS'trials.thisIndex'
p24184
g36
(g38
S'\x00\x00\x00\x00'
tRp24185
sg22
V
sS'trials_2.thisRepN'
p24186
I3
sS'trials_2.thisTrialN'
p24187
I0
sS'trials.thisRepN'
p24188
I256
sS'trials_2.thisTrial'
p24189
NsS'trials.thisN'
p24190
I512
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24191
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24192
I0
sS'trials_2.thisN'
p24193
I3
sa(dp24194
g20
g21
sS'trials.thisIndex'
p24195
g36
(g38
S'\x01\x00\x00\x00'
tRp24196
sg22
V
sS'trials_2.thisRepN'
p24197
I3
sS'trials_2.thisTrialN'
p24198
I0
sS'trials.thisRepN'
p24199
I256
sS'trials_2.thisTrial'
p24200
NsS'trials.thisN'
p24201
I513
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24202
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24203
I1
sS'trials_2.thisN'
p24204
I3
sa(dp24205
g20
g21
sS'trials.thisIndex'
p24206
g36
(g38
S'\x00\x00\x00\x00'
tRp24207
sg22
V
sS'trials_2.thisRepN'
p24208
I3
sS'trials_2.thisTrialN'
p24209
I0
sS'trials.thisRepN'
p24210
I257
sS'trials_2.thisTrial'
p24211
NsS'trials.thisN'
p24212
I514
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24213
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24214
I0
sS'trials_2.thisN'
p24215
I3
sa(dp24216
g20
g21
sS'trials.thisIndex'
p24217
g36
(g38
S'\x01\x00\x00\x00'
tRp24218
sg22
V
sS'trials_2.thisRepN'
p24219
I3
sS'trials_2.thisTrialN'
p24220
I0
sS'trials.thisRepN'
p24221
I257
sS'trials_2.thisTrial'
p24222
NsS'trials.thisN'
p24223
I515
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24224
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24225
I1
sS'trials_2.thisN'
p24226
I3
sa(dp24227
g20
g21
sS'trials.thisIndex'
p24228
g36
(g38
S'\x00\x00\x00\x00'
tRp24229
sg22
V
sS'trials_2.thisRepN'
p24230
I3
sS'trials_2.thisTrialN'
p24231
I0
sS'trials.thisRepN'
p24232
I258
sS'trials_2.thisTrial'
p24233
NsS'trials.thisN'
p24234
I516
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24235
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24236
I0
sS'trials_2.thisN'
p24237
I3
sa(dp24238
g20
g21
sS'trials.thisIndex'
p24239
g36
(g38
S'\x01\x00\x00\x00'
tRp24240
sg22
V
sS'trials_2.thisRepN'
p24241
I3
sS'trials_2.thisTrialN'
p24242
I0
sS'trials.thisRepN'
p24243
I258
sS'trials_2.thisTrial'
p24244
NsS'trials.thisN'
p24245
I517
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24246
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24247
I1
sS'trials_2.thisN'
p24248
I3
sa(dp24249
g20
g21
sS'trials.thisIndex'
p24250
g36
(g38
S'\x00\x00\x00\x00'
tRp24251
sg22
V
sS'trials_2.thisRepN'
p24252
I3
sS'trials_2.thisTrialN'
p24253
I0
sS'trials.thisRepN'
p24254
I259
sS'trials_2.thisTrial'
p24255
NsS'trials.thisN'
p24256
I518
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24257
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24258
I0
sS'trials_2.thisN'
p24259
I3
sa(dp24260
g20
g21
sS'trials.thisIndex'
p24261
g36
(g38
S'\x01\x00\x00\x00'
tRp24262
sg22
V
sS'trials_2.thisRepN'
p24263
I3
sS'trials_2.thisTrialN'
p24264
I0
sS'trials.thisRepN'
p24265
I259
sS'trials_2.thisTrial'
p24266
NsS'trials.thisN'
p24267
I519
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24268
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24269
I1
sS'trials_2.thisN'
p24270
I3
sa(dp24271
g20
g21
sS'trials.thisIndex'
p24272
g36
(g38
S'\x00\x00\x00\x00'
tRp24273
sg22
V
sS'trials_2.thisRepN'
p24274
I3
sS'trials_2.thisTrialN'
p24275
I0
sS'trials.thisRepN'
p24276
I260
sS'trials_2.thisTrial'
p24277
NsS'trials.thisN'
p24278
I520
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24279
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24280
I0
sS'trials_2.thisN'
p24281
I3
sa(dp24282
g20
g21
sS'trials.thisIndex'
p24283
g36
(g38
S'\x01\x00\x00\x00'
tRp24284
sg22
V
sS'trials_2.thisRepN'
p24285
I3
sS'trials_2.thisTrialN'
p24286
I0
sS'trials.thisRepN'
p24287
I260
sS'trials_2.thisTrial'
p24288
NsS'trials.thisN'
p24289
I521
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24290
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24291
I1
sS'trials_2.thisN'
p24292
I3
sa(dp24293
g20
g21
sS'trials.thisIndex'
p24294
g36
(g38
S'\x00\x00\x00\x00'
tRp24295
sg22
V
sS'trials_2.thisRepN'
p24296
I3
sS'trials_2.thisTrialN'
p24297
I0
sS'trials.thisRepN'
p24298
I261
sS'trials_2.thisTrial'
p24299
NsS'trials.thisN'
p24300
I522
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24301
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24302
I0
sS'trials_2.thisN'
p24303
I3
sa(dp24304
g20
g21
sS'trials.thisIndex'
p24305
g36
(g38
S'\x01\x00\x00\x00'
tRp24306
sg22
V
sS'trials_2.thisRepN'
p24307
I3
sS'trials_2.thisTrialN'
p24308
I0
sS'trials.thisRepN'
p24309
I261
sS'trials_2.thisTrial'
p24310
NsS'trials.thisN'
p24311
I523
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24312
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24313
I1
sS'trials_2.thisN'
p24314
I3
sa(dp24315
g20
g21
sS'trials.thisIndex'
p24316
g36
(g38
S'\x00\x00\x00\x00'
tRp24317
sg22
V
sS'trials_2.thisRepN'
p24318
I3
sS'trials_2.thisTrialN'
p24319
I0
sS'trials.thisRepN'
p24320
I262
sS'trials_2.thisTrial'
p24321
NsS'trials.thisN'
p24322
I524
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24323
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24324
I0
sS'trials_2.thisN'
p24325
I3
sa(dp24326
g20
g21
sS'trials.thisIndex'
p24327
g36
(g38
S'\x01\x00\x00\x00'
tRp24328
sg22
V
sS'trials_2.thisRepN'
p24329
I3
sS'trials_2.thisTrialN'
p24330
I0
sS'trials.thisRepN'
p24331
I262
sS'trials_2.thisTrial'
p24332
NsS'trials.thisN'
p24333
I525
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24334
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24335
I1
sS'trials_2.thisN'
p24336
I3
sa(dp24337
g20
g21
sS'trials.thisIndex'
p24338
g36
(g38
S'\x00\x00\x00\x00'
tRp24339
sg22
V
sS'trials_2.thisRepN'
p24340
I3
sS'trials_2.thisTrialN'
p24341
I0
sS'trials.thisRepN'
p24342
I263
sS'trials_2.thisTrial'
p24343
NsS'trials.thisN'
p24344
I526
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24345
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24346
I0
sS'trials_2.thisN'
p24347
I3
sa(dp24348
g20
g21
sS'trials.thisIndex'
p24349
g36
(g38
S'\x01\x00\x00\x00'
tRp24350
sg22
V
sS'trials_2.thisRepN'
p24351
I3
sS'trials_2.thisTrialN'
p24352
I0
sS'trials.thisRepN'
p24353
I263
sS'trials_2.thisTrial'
p24354
NsS'trials.thisN'
p24355
I527
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24356
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24357
I1
sS'trials_2.thisN'
p24358
I3
sa(dp24359
g20
g21
sS'trials.thisIndex'
p24360
g36
(g38
S'\x00\x00\x00\x00'
tRp24361
sg22
V
sS'trials_2.thisRepN'
p24362
I3
sS'trials_2.thisTrialN'
p24363
I0
sS'trials.thisRepN'
p24364
I264
sS'trials_2.thisTrial'
p24365
NsS'trials.thisN'
p24366
I528
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24367
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24368
I0
sS'trials_2.thisN'
p24369
I3
sa(dp24370
g20
g21
sS'trials.thisIndex'
p24371
g36
(g38
S'\x01\x00\x00\x00'
tRp24372
sg22
V
sS'trials_2.thisRepN'
p24373
I3
sS'trials_2.thisTrialN'
p24374
I0
sS'trials.thisRepN'
p24375
I264
sS'trials_2.thisTrial'
p24376
NsS'trials.thisN'
p24377
I529
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24378
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24379
I1
sS'trials_2.thisN'
p24380
I3
sa(dp24381
g20
g21
sS'trials.thisIndex'
p24382
g36
(g38
S'\x00\x00\x00\x00'
tRp24383
sg22
V
sS'trials_2.thisRepN'
p24384
I3
sS'trials_2.thisTrialN'
p24385
I0
sS'trials.thisRepN'
p24386
I265
sS'trials_2.thisTrial'
p24387
NsS'trials.thisN'
p24388
I530
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24389
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24390
I0
sS'trials_2.thisN'
p24391
I3
sa(dp24392
g20
g21
sS'trials.thisIndex'
p24393
g36
(g38
S'\x01\x00\x00\x00'
tRp24394
sg22
V
sS'trials_2.thisRepN'
p24395
I3
sS'trials_2.thisTrialN'
p24396
I0
sS'trials.thisRepN'
p24397
I265
sS'trials_2.thisTrial'
p24398
NsS'trials.thisN'
p24399
I531
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24400
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24401
I1
sS'trials_2.thisN'
p24402
I3
sa(dp24403
g20
g21
sS'trials.thisIndex'
p24404
g36
(g38
S'\x00\x00\x00\x00'
tRp24405
sg22
V
sS'trials_2.thisRepN'
p24406
I3
sS'trials_2.thisTrialN'
p24407
I0
sS'trials.thisRepN'
p24408
I266
sS'trials_2.thisTrial'
p24409
NsS'trials.thisN'
p24410
I532
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24411
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24412
I0
sS'trials_2.thisN'
p24413
I3
sa(dp24414
g20
g21
sS'trials.thisIndex'
p24415
g36
(g38
S'\x01\x00\x00\x00'
tRp24416
sg22
V
sS'trials_2.thisRepN'
p24417
I3
sS'trials_2.thisTrialN'
p24418
I0
sS'trials.thisRepN'
p24419
I266
sS'trials_2.thisTrial'
p24420
NsS'trials.thisN'
p24421
I533
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24422
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24423
I1
sS'trials_2.thisN'
p24424
I3
sa(dp24425
g20
g21
sS'trials.thisIndex'
p24426
g36
(g38
S'\x00\x00\x00\x00'
tRp24427
sg22
V
sS'trials_2.thisRepN'
p24428
I3
sS'trials_2.thisTrialN'
p24429
I0
sS'trials.thisRepN'
p24430
I267
sS'trials_2.thisTrial'
p24431
NsS'trials.thisN'
p24432
I534
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24433
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24434
I0
sS'trials_2.thisN'
p24435
I3
sa(dp24436
g20
g21
sS'trials.thisIndex'
p24437
g36
(g38
S'\x01\x00\x00\x00'
tRp24438
sg22
V
sS'trials_2.thisRepN'
p24439
I3
sS'trials_2.thisTrialN'
p24440
I0
sS'trials.thisRepN'
p24441
I267
sS'trials_2.thisTrial'
p24442
NsS'trials.thisN'
p24443
I535
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24444
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24445
I1
sS'trials_2.thisN'
p24446
I3
sa(dp24447
g20
g21
sS'trials.thisIndex'
p24448
g36
(g38
S'\x00\x00\x00\x00'
tRp24449
sg22
V
sS'trials_2.thisRepN'
p24450
I3
sS'trials_2.thisTrialN'
p24451
I0
sS'trials.thisRepN'
p24452
I268
sS'trials_2.thisTrial'
p24453
NsS'trials.thisN'
p24454
I536
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24455
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24456
I0
sS'trials_2.thisN'
p24457
I3
sa(dp24458
g20
g21
sS'trials.thisIndex'
p24459
g36
(g38
S'\x01\x00\x00\x00'
tRp24460
sg22
V
sS'trials_2.thisRepN'
p24461
I3
sS'trials_2.thisTrialN'
p24462
I0
sS'trials.thisRepN'
p24463
I268
sS'trials_2.thisTrial'
p24464
NsS'trials.thisN'
p24465
I537
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24466
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24467
I1
sS'trials_2.thisN'
p24468
I3
sa(dp24469
g20
g21
sS'trials.thisIndex'
p24470
g36
(g38
S'\x00\x00\x00\x00'
tRp24471
sg22
V
sS'trials_2.thisRepN'
p24472
I3
sS'trials_2.thisTrialN'
p24473
I0
sS'trials.thisRepN'
p24474
I269
sS'trials_2.thisTrial'
p24475
NsS'trials.thisN'
p24476
I538
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24477
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24478
I0
sS'trials_2.thisN'
p24479
I3
sa(dp24480
g20
g21
sS'trials.thisIndex'
p24481
g36
(g38
S'\x01\x00\x00\x00'
tRp24482
sg22
V
sS'trials_2.thisRepN'
p24483
I3
sS'trials_2.thisTrialN'
p24484
I0
sS'trials.thisRepN'
p24485
I269
sS'trials_2.thisTrial'
p24486
NsS'trials.thisN'
p24487
I539
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24488
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24489
I1
sS'trials_2.thisN'
p24490
I3
sa(dp24491
g20
g21
sS'trials.thisIndex'
p24492
g36
(g38
S'\x00\x00\x00\x00'
tRp24493
sg22
V
sS'trials_2.thisRepN'
p24494
I3
sS'trials_2.thisTrialN'
p24495
I0
sS'trials.thisRepN'
p24496
I270
sS'trials_2.thisTrial'
p24497
NsS'trials.thisN'
p24498
I540
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24499
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24500
I0
sS'trials_2.thisN'
p24501
I3
sa(dp24502
g20
g21
sS'trials.thisIndex'
p24503
g36
(g38
S'\x01\x00\x00\x00'
tRp24504
sg22
V
sS'trials_2.thisRepN'
p24505
I3
sS'trials_2.thisTrialN'
p24506
I0
sS'trials.thisRepN'
p24507
I270
sS'trials_2.thisTrial'
p24508
NsS'trials.thisN'
p24509
I541
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24510
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24511
I1
sS'trials_2.thisN'
p24512
I3
sa(dp24513
g20
g21
sS'trials.thisIndex'
p24514
g36
(g38
S'\x00\x00\x00\x00'
tRp24515
sg22
V
sS'trials_2.thisRepN'
p24516
I3
sS'trials_2.thisTrialN'
p24517
I0
sS'trials.thisRepN'
p24518
I271
sS'trials_2.thisTrial'
p24519
NsS'trials.thisN'
p24520
I542
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24521
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24522
I0
sS'trials_2.thisN'
p24523
I3
sa(dp24524
g20
g21
sS'trials.thisIndex'
p24525
g36
(g38
S'\x01\x00\x00\x00'
tRp24526
sg22
V
sS'trials_2.thisRepN'
p24527
I3
sS'trials_2.thisTrialN'
p24528
I0
sS'trials.thisRepN'
p24529
I271
sS'trials_2.thisTrial'
p24530
NsS'trials.thisN'
p24531
I543
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24532
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24533
I1
sS'trials_2.thisN'
p24534
I3
sa(dp24535
g20
g21
sS'trials.thisIndex'
p24536
g36
(g38
S'\x00\x00\x00\x00'
tRp24537
sg22
V
sS'trials_2.thisRepN'
p24538
I3
sS'trials_2.thisTrialN'
p24539
I0
sS'trials.thisRepN'
p24540
I272
sS'trials_2.thisTrial'
p24541
NsS'trials.thisN'
p24542
I544
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24543
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24544
I0
sS'trials_2.thisN'
p24545
I3
sa(dp24546
g20
g21
sS'trials.thisIndex'
p24547
g36
(g38
S'\x01\x00\x00\x00'
tRp24548
sg22
V
sS'trials_2.thisRepN'
p24549
I3
sS'trials_2.thisTrialN'
p24550
I0
sS'trials.thisRepN'
p24551
I272
sS'trials_2.thisTrial'
p24552
NsS'trials.thisN'
p24553
I545
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24554
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24555
I1
sS'trials_2.thisN'
p24556
I3
sa(dp24557
g20
g21
sS'trials.thisIndex'
p24558
g36
(g38
S'\x00\x00\x00\x00'
tRp24559
sg22
V
sS'trials_2.thisRepN'
p24560
I3
sS'trials_2.thisTrialN'
p24561
I0
sS'trials.thisRepN'
p24562
I273
sS'trials_2.thisTrial'
p24563
NsS'trials.thisN'
p24564
I546
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24565
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24566
I0
sS'trials_2.thisN'
p24567
I3
sa(dp24568
g20
g21
sS'trials.thisIndex'
p24569
g36
(g38
S'\x01\x00\x00\x00'
tRp24570
sg22
V
sS'trials_2.thisRepN'
p24571
I3
sS'trials_2.thisTrialN'
p24572
I0
sS'trials.thisRepN'
p24573
I273
sS'trials_2.thisTrial'
p24574
NsS'trials.thisN'
p24575
I547
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24576
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24577
I1
sS'trials_2.thisN'
p24578
I3
sa(dp24579
g20
g21
sS'trials.thisIndex'
p24580
g36
(g38
S'\x00\x00\x00\x00'
tRp24581
sg22
V
sS'trials_2.thisRepN'
p24582
I3
sS'trials_2.thisTrialN'
p24583
I0
sS'trials.thisRepN'
p24584
I274
sS'trials_2.thisTrial'
p24585
NsS'trials.thisN'
p24586
I548
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24587
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24588
I0
sS'trials_2.thisN'
p24589
I3
sa(dp24590
g20
g21
sS'trials.thisIndex'
p24591
g36
(g38
S'\x01\x00\x00\x00'
tRp24592
sg22
V
sS'trials_2.thisRepN'
p24593
I3
sS'trials_2.thisTrialN'
p24594
I0
sS'trials.thisRepN'
p24595
I274
sS'trials_2.thisTrial'
p24596
NsS'trials.thisN'
p24597
I549
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24598
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24599
I1
sS'trials_2.thisN'
p24600
I3
sa(dp24601
g20
g21
sS'trials.thisIndex'
p24602
g36
(g38
S'\x00\x00\x00\x00'
tRp24603
sg22
V
sS'trials_2.thisRepN'
p24604
I3
sS'trials_2.thisTrialN'
p24605
I0
sS'trials.thisRepN'
p24606
I275
sS'trials_2.thisTrial'
p24607
NsS'trials.thisN'
p24608
I550
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24609
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24610
I0
sS'trials_2.thisN'
p24611
I3
sa(dp24612
g20
g21
sS'trials.thisIndex'
p24613
g36
(g38
S'\x01\x00\x00\x00'
tRp24614
sg22
V
sS'trials_2.thisRepN'
p24615
I3
sS'trials_2.thisTrialN'
p24616
I0
sS'trials.thisRepN'
p24617
I275
sS'trials_2.thisTrial'
p24618
NsS'trials.thisN'
p24619
I551
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24620
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24621
I1
sS'trials_2.thisN'
p24622
I3
sa(dp24623
g20
g21
sS'trials.thisIndex'
p24624
g36
(g38
S'\x00\x00\x00\x00'
tRp24625
sg22
V
sS'trials_2.thisRepN'
p24626
I3
sS'trials_2.thisTrialN'
p24627
I0
sS'trials.thisRepN'
p24628
I276
sS'trials_2.thisTrial'
p24629
NsS'trials.thisN'
p24630
I552
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24631
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24632
I0
sS'trials_2.thisN'
p24633
I3
sa(dp24634
g20
g21
sS'trials.thisIndex'
p24635
g36
(g38
S'\x01\x00\x00\x00'
tRp24636
sg22
V
sS'trials_2.thisRepN'
p24637
I3
sS'trials_2.thisTrialN'
p24638
I0
sS'trials.thisRepN'
p24639
I276
sS'trials_2.thisTrial'
p24640
NsS'trials.thisN'
p24641
I553
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24642
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24643
I1
sS'trials_2.thisN'
p24644
I3
sa(dp24645
g20
g21
sS'trials.thisIndex'
p24646
g36
(g38
S'\x00\x00\x00\x00'
tRp24647
sg22
V
sS'trials_2.thisRepN'
p24648
I3
sS'trials_2.thisTrialN'
p24649
I0
sS'trials.thisRepN'
p24650
I277
sS'trials_2.thisTrial'
p24651
NsS'trials.thisN'
p24652
I554
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24653
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24654
I0
sS'trials_2.thisN'
p24655
I3
sa(dp24656
g20
g21
sS'trials.thisIndex'
p24657
g36
(g38
S'\x01\x00\x00\x00'
tRp24658
sg22
V
sS'trials_2.thisRepN'
p24659
I3
sS'trials_2.thisTrialN'
p24660
I0
sS'trials.thisRepN'
p24661
I277
sS'trials_2.thisTrial'
p24662
NsS'trials.thisN'
p24663
I555
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24664
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24665
I1
sS'trials_2.thisN'
p24666
I3
sa(dp24667
g20
g21
sS'trials.thisIndex'
p24668
g36
(g38
S'\x00\x00\x00\x00'
tRp24669
sg22
V
sS'trials_2.thisRepN'
p24670
I3
sS'trials_2.thisTrialN'
p24671
I0
sS'trials.thisRepN'
p24672
I278
sS'trials_2.thisTrial'
p24673
NsS'trials.thisN'
p24674
I556
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24675
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24676
I0
sS'trials_2.thisN'
p24677
I3
sa(dp24678
g20
g21
sS'trials.thisIndex'
p24679
g36
(g38
S'\x01\x00\x00\x00'
tRp24680
sg22
V
sS'trials_2.thisRepN'
p24681
I3
sS'trials_2.thisTrialN'
p24682
I0
sS'trials.thisRepN'
p24683
I278
sS'trials_2.thisTrial'
p24684
NsS'trials.thisN'
p24685
I557
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24686
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24687
I1
sS'trials_2.thisN'
p24688
I3
sa(dp24689
g20
g21
sS'trials.thisIndex'
p24690
g36
(g38
S'\x00\x00\x00\x00'
tRp24691
sg22
V
sS'trials_2.thisRepN'
p24692
I3
sS'trials_2.thisTrialN'
p24693
I0
sS'trials.thisRepN'
p24694
I279
sS'trials_2.thisTrial'
p24695
NsS'trials.thisN'
p24696
I558
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24697
g18556
sg18557
g18558
sS'trials.thisTrialN'
p24698
I0
sS'trials_2.thisN'
p24699
I3
sa(dp24700
g20
g21
sS'trials.thisIndex'
p24701
g36
(g38
S'\x01\x00\x00\x00'
tRp24702
sg22
V
sS'trials_2.thisRepN'
p24703
I3
sS'trials_2.thisTrialN'
p24704
I0
sS'trials.thisRepN'
p24705
I279
sS'trials_2.thisTrial'
p24706
NsS'trials.thisN'
p24707
I559
sg17
g18
sg19
g11
sS'trials_2.thisIndex'
p24708
g18556
sg18557
g18570
sS'trials.thisTrialN'
p24709
I1
sS'trials_2.thisN'
p24710
I3
sa(dp24711
g20
g21
sg22
V
sS'trials_2.thisRepN'
p24712
I3
sS'trials_2.thisTrialN'
p24713
I0
sS'trials_2.thisTrial'
p24714
Nsg19
g11
sS'trials_2.thisIndex'
p24715
g18556
sg17
g18
sS'trials_2.thisN'
p24716
I3
sasS'loops'
p24717
(lp24718
g1
(cpsychopy.data
TrialHandler
p24719
g3
NtRp24720
(dp24721
S'origin'
p24722
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p24723
sS'thisTrial'
p24724
(lp24725
sS'_exp'
p24726
I172071152
sg10
S'trials_2'
p24727
sg6
S'/Applications/PsychoPy2.app/Contents/Resources/lib/python2.7/psychopy/data.py'
p24728
sS'thisRepN'
p24729
I4
sg14
I01
sg15
g16
sS'data'
p24730
g1
(cpsychopy.data
DataHandler
p24731
c__builtin__
dict
p24732
(dp24733
S'ran'
p24734
cnumpy.ma.core
_mareconstruct
p24735
(cnumpy.ma.core
MaskedArray
p24736
cnumpy
ndarray
p24737
(I0
tp24738
S'b'
tRp24739
(I1
(I1
I4
tg37
(S'f4'
I0
I1
tRp24740
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00'
NtbsS'order'
p24741
g24735
(g24736
g24737
g24738
S'b'
tRp24742
(I1
(I1
I4
tg24740
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@'
S'\x00\x00\x00\x00'
NtbstRp24743
(dp24744
S'isNumeric'
p24745
(dp24746
g24734
I01
sg24741
I01
ssS'trials'
p24747
g24720
sS'dataTypes'
p24748
(lp24749
g24734
ag24741
asS'dataShape'
p24750
(lp24751
I1
aI4
asbsS'method'
p24752
Vsequential
p24753
sS'sequenceIndices'
p24754
cnumpy.core.multiarray
_reconstruct
p24755
(g24737
(I0
tS'b'
tRp24756
(I1
(I1
I4
tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p24757
I01
sS'nReps'
p24758
I4
sS'nRemaining'
p24759
I-1
sS'trialList'
p24760
(lp24761
NasS'seed'
p24762
NsS'thisIndex'
p24763
g18556
sS'thisN'
p24764
I4
sS'thisTrialN'
p24765
I0
sS'nTotal'
p24766
I4
sS'_warnUseOfNext'
p24767
I01
sbag1
(g24719
g3
NtRp24768
(dp24769
g24722
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p24770
sg24724
(lp24771
sg24726
I172071152
sg10
g24747
sg6
g24728
sg24729
I280
sg14
I01
sg15
g16
sg24730
g1
(g24731
g24732
(dp24772
g24734
g24735
(g24736
g24737
g24738
S'b'
tRp24773
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24741
g24735
(g24736
g24737
g24738
S'b'
tRp24774
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@\x00\x00\xc0@\x00\x00\x00A\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\x80A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xb0A\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xe0A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x08B\x00\x00\x10B\x00\x00\x18B\x00\x00 B\x00\x00(B\x00\x000B\x00\x008B\x00\x00@B\x00\x00HB\x00\x00PB\x00\x00XB\x00\x00`B\x00\x00hB\x00\x00pB\x00\x00xB\x00\x00\x80B\x00\x00\x84B\x00\x00\x88B\x00\x00\x8cB\x00\x00\x90B\x00\x00\x94B\x00\x00\x98B\x00\x00\x9cB\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xe0B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\xecB\x00\x00\xf0B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x02C\x00\x00\x04C\x00\x00\x06C\x00\x00\x08C\x00\x00\nC\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x10C\x00\x00\x12C\x00\x00\x14C\x00\x00\x16C\x00\x00\x18C\x00\x00\x1aC\x00\x00\x1cC\x00\x00\x1eC\x00\x00 C\x00\x00"C\x00\x00$C\x00\x00&C\x00\x00(C\x00\x00*C\x00\x00,C\x00\x00.C\x00\x000C\x00\x002C\x00\x004C\x00\x006C\x00\x008C\x00\x00:C\x00\x00<C\x00\x00>C\x00\x00@C\x00\x00BC\x00\x00DC\x00\x00FC\x00\x00HC\x00\x00JC\x00\x00LC\x00\x00NC\x00\x00PC\x00\x00RC\x00\x00TC\x00\x00VC\x00\x00XC\x00\x00ZC\x00\x00\\C\x00\x00^C\x00\x00`C\x00\x00bC\x00\x00dC\x00\x00fC\x00\x00hC\x00\x00jC\x00\x00lC\x00\x00nC\x00\x00pC\x00\x00rC\x00\x00tC\x00\x00vC\x00\x00xC\x00\x00zC\x00\x00|C\x00\x00~C\x00\x00\x80C\x00\x00\x81C\x00\x00\x82C\x00\x00\x83C\x00\x00\x84C\x00\x00\x85C\x00\x00\x86C\x00\x00\x87C\x00\x00\x88C\x00\x00\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x00\x8cC\x00\x00\x8dC\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x90C\x00\x00\x91C\x00\x00\x92C\x00\x00\x93C\x00\x00\x94C\x00\x00\x95C\x00\x00\x96C\x00\x00\x97C\x00\x00\x98C\x00\x00\x99C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9cC\x00\x00\x9dC\x00\x00\x9eC\x00\x00\x9fC\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xa2C\x00\x00\xa3C\x00\x00\xa4C\x00\x00\xa5C\x00\x00\xa6C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xabC\x00\x00\xacC\x00\x00\xadC\x00\x00\xaeC\x00\x00\xafC\x00\x00\xb0C\x00\x00\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbaC\x00\x00\xbbC\x00\x00\xbcC\x00\x00\xbdC\x00\x00\xbeC\x00\x00\xbfC\x00\x00\xc0C\x00\x00\xc1C\x00\x00\xc2C\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xccC\x00\x00\xcdC\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd0C\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd3C\x00\x00\xd4C\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xd7C\x00\x00\xd8C\x00\x00\xd9C\x00\x00\xdaC\x00\x00\xdbC\x00\x00\xdcC\x00\x00\xddC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe0C\x00\x00\xe1C\x00\x00\xe2C\x00\x00\xe3C\x00\x00\xe4C\x00\x00\xe5C\x00\x00\xe6C\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xe9C\x00\x00\xeaC\x00\x00\xebC\x00\x00\xecC\x00\x00\xedC\x00\x00\xeeC\x00\x00\xefC\x00\x00\xf0C\x00\x00\xf1C\x00\x00\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x00\xf5C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xf8C\x00\x00\xf9C\x00\x00\xfaC\x00\x00\xfbC\x00\x00\xfcC\x00\x00\xfdC\x00\x00\xfeC\x00\x00\xffC\x00\x00\x00D\x00\x80\x00D\x00\x00\x01D\x00\x80\x01D\x00\x00\x02D\x00\x80\x02D\x00\x00\x03D\x00\x80\x03D\x00\x00\x04D\x00\x80\x04D\x00\x00\x05D\x00\x80\x05D\x00\x00\x06D\x00\x80\x06D\x00\x00\x07D\x00\x80\x07D\x00\x00\x08D\x00\x80\x08D\x00\x00\tD\x00\x80\tD\x00\x00\nD\x00\x80\nD\x00\x00\x0bD\x00\x80\x0bD\x00\x00\x80?\x00\x00@@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x000A\x00\x00PA\x00\x00pA\x00\x00\x88A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x04B\x00\x00\x0cB\x00\x00\x14B\x00\x00\x1cB\x00\x00$B\x00\x00,B\x00\x004B\x00\x00<B\x00\x00DB\x00\x00LB\x00\x00TB\x00\x00\\B\x00\x00dB\x00\x00lB\x00\x00tB\x00\x00|B\x00\x00\x82B\x00\x00\x86B\x00\x00\x8aB\x00\x00\x8eB\x00\x00\x92B\x00\x00\x96B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xaaB\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xc2B\x00\x00\xc6B\x00\x00\xcaB\x00\x00\xceB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xf2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\xfeB\x00\x00\x01C\x00\x00\x03C\x00\x00\x05C\x00\x00\x07C\x00\x00\tC\x00\x00\x0bC\x00\x00\rC\x00\x00\x0fC\x00\x00\x11C\x00\x00\x13C\x00\x00\x15C\x00\x00\x17C\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1dC\x00\x00\x1fC\x00\x00!C\x00\x00#C\x00\x00%C\x00\x00\'C\x00\x00)C\x00\x00+C\x00\x00-C\x00\x00/C\x00\x001C\x00\x003C\x00\x005C\x00\x007C\x00\x009C\x00\x00;C\x00\x00=C\x00\x00?C\x00\x00AC\x00\x00CC\x00\x00EC\x00\x00GC\x00\x00IC\x00\x00KC\x00\x00MC\x00\x00OC\x00\x00QC\x00\x00SC\x00\x00UC\x00\x00WC\x00\x00YC\x00\x00[C\x00\x00]C\x00\x00_C\x00\x00aC\x00\x00cC\x00\x00eC\x00\x00gC\x00\x00iC\x00\x00kC\x00\x00mC\x00\x00oC\x00\x00qC\x00\x00sC\x00\x00uC\x00\x00wC\x00\x00yC\x00\x00{C\x00\x00}C\x00\x00\x7fC\x00\x80\x80C\x00\x80\x81C\x00\x80\x82C\x00\x80\x83C\x00\x80\x84C\x00\x80\x85C\x00\x80\x86C\x00\x80\x87C\x00\x80\x88C\x00\x80\x89C\x00\x80\x8aC\x00\x80\x8bC\x00\x80\x8cC\x00\x80\x8dC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x91C\x00\x80\x92C\x00\x80\x93C\x00\x80\x94C\x00\x80\x95C\x00\x80\x96C\x00\x80\x97C\x00\x80\x98C\x00\x80\x99C\x00\x80\x9aC\x00\x80\x9bC\x00\x80\x9cC\x00\x80\x9dC\x00\x80\x9eC\x00\x80\x9fC\x00\x80\xa0C\x00\x80\xa1C\x00\x80\xa2C\x00\x80\xa3C\x00\x80\xa4C\x00\x80\xa5C\x00\x80\xa6C\x00\x80\xa7C\x00\x80\xa8C\x00\x80\xa9C\x00\x80\xaaC\x00\x80\xabC\x00\x80\xacC\x00\x80\xadC\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb2C\x00\x80\xb3C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xb8C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xbeC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc1C\x00\x80\xc2C\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xc5C\x00\x80\xc6C\x00\x80\xc7C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x80\xcfC\x00\x80\xd0C\x00\x80\xd1C\x00\x80\xd2C\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xd6C\x00\x80\xd7C\x00\x80\xd8C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xddC\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe1C\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe4C\x00\x80\xe5C\x00\x80\xe6C\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xecC\x00\x80\xedC\x00\x80\xeeC\x00\x80\xefC\x00\x80\xf0C\x00\x80\xf1C\x00\x80\xf2C\x00\x80\xf3C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x80\xf8C\x00\x80\xf9C\x00\x80\xfaC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\xfdC\x00\x80\xfeC\x00\x80\xffC\x00@\x00D\x00\xc0\x00D\x00@\x01D\x00\xc0\x01D\x00@\x02D\x00\xc0\x02D\x00@\x03D\x00\xc0\x03D\x00@\x04D\x00\xc0\x04D\x00@\x05D\x00\xc0\x05D\x00@\x06D\x00\xc0\x06D\x00@\x07D\x00\xc0\x07D\x00@\x08D\x00\xc0\x08D\x00@\tD\x00\xc0\tD\x00@\nD\x00\xc0\nD\x00@\x0bD\x00\xc0\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp24775
(dp24776
g24745
(dp24777
g24734
I01
sg24741
I01
ssg24747
g24768
sg24748
(lp24778
g24734
ag24741
asg24750
(lp24779
I2
aI280
asbsg24752
S'sequential'
p24780
sg24754
g24755
(g24737
(I0
tS'b'
tRp24781
(I1
(I2
I280
tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
tbsg24757
I01
sg24758
I280
sg24759
I-1
sg24760
(lp24782
g1
(cpsychopy.data
TrialType
p24783
g24732
(dp24784
g31
g48
stRp24785
ag1
(g24783
g24732
(dp24786
g31
g60
stRp24787
asg24762
Nsg24763
g6192
sg24764
I560
sg24765
I0
sg24766
I560
sg24767
I01
sbag1
(g24719
g3
NtRp24788
(dp24789
g24722
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p24790
sg24724
(lp24791
sg24726
I172071152
sg10
g24747
sg6
g24728
sg24729
I280
sg14
I01
sg15
g16
sg24730
g1
(g24731
g24732
(dp24792
g24734
g24735
(g24736
g24737
g24738
S'b'
tRp24793
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24741
g24735
(g24736
g24737
g24738
S'b'
tRp24794
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@\x00\x00\xc0@\x00\x00\x00A\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\x80A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xb0A\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xe0A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x08B\x00\x00\x10B\x00\x00\x18B\x00\x00 B\x00\x00(B\x00\x000B\x00\x008B\x00\x00@B\x00\x00HB\x00\x00PB\x00\x00XB\x00\x00`B\x00\x00hB\x00\x00pB\x00\x00xB\x00\x00\x80B\x00\x00\x84B\x00\x00\x88B\x00\x00\x8cB\x00\x00\x90B\x00\x00\x94B\x00\x00\x98B\x00\x00\x9cB\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xe0B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\xecB\x00\x00\xf0B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x02C\x00\x00\x04C\x00\x00\x06C\x00\x00\x08C\x00\x00\nC\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x10C\x00\x00\x12C\x00\x00\x14C\x00\x00\x16C\x00\x00\x18C\x00\x00\x1aC\x00\x00\x1cC\x00\x00\x1eC\x00\x00 C\x00\x00"C\x00\x00$C\x00\x00&C\x00\x00(C\x00\x00*C\x00\x00,C\x00\x00.C\x00\x000C\x00\x002C\x00\x004C\x00\x006C\x00\x008C\x00\x00:C\x00\x00<C\x00\x00>C\x00\x00@C\x00\x00BC\x00\x00DC\x00\x00FC\x00\x00HC\x00\x00JC\x00\x00LC\x00\x00NC\x00\x00PC\x00\x00RC\x00\x00TC\x00\x00VC\x00\x00XC\x00\x00ZC\x00\x00\\C\x00\x00^C\x00\x00`C\x00\x00bC\x00\x00dC\x00\x00fC\x00\x00hC\x00\x00jC\x00\x00lC\x00\x00nC\x00\x00pC\x00\x00rC\x00\x00tC\x00\x00vC\x00\x00xC\x00\x00zC\x00\x00|C\x00\x00~C\x00\x00\x80C\x00\x00\x81C\x00\x00\x82C\x00\x00\x83C\x00\x00\x84C\x00\x00\x85C\x00\x00\x86C\x00\x00\x87C\x00\x00\x88C\x00\x00\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x00\x8cC\x00\x00\x8dC\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x90C\x00\x00\x91C\x00\x00\x92C\x00\x00\x93C\x00\x00\x94C\x00\x00\x95C\x00\x00\x96C\x00\x00\x97C\x00\x00\x98C\x00\x00\x99C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9cC\x00\x00\x9dC\x00\x00\x9eC\x00\x00\x9fC\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xa2C\x00\x00\xa3C\x00\x00\xa4C\x00\x00\xa5C\x00\x00\xa6C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xabC\x00\x00\xacC\x00\x00\xadC\x00\x00\xaeC\x00\x00\xafC\x00\x00\xb0C\x00\x00\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbaC\x00\x00\xbbC\x00\x00\xbcC\x00\x00\xbdC\x00\x00\xbeC\x00\x00\xbfC\x00\x00\xc0C\x00\x00\xc1C\x00\x00\xc2C\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xccC\x00\x00\xcdC\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd0C\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd3C\x00\x00\xd4C\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xd7C\x00\x00\xd8C\x00\x00\xd9C\x00\x00\xdaC\x00\x00\xdbC\x00\x00\xdcC\x00\x00\xddC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe0C\x00\x00\xe1C\x00\x00\xe2C\x00\x00\xe3C\x00\x00\xe4C\x00\x00\xe5C\x00\x00\xe6C\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xe9C\x00\x00\xeaC\x00\x00\xebC\x00\x00\xecC\x00\x00\xedC\x00\x00\xeeC\x00\x00\xefC\x00\x00\xf0C\x00\x00\xf1C\x00\x00\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x00\xf5C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xf8C\x00\x00\xf9C\x00\x00\xfaC\x00\x00\xfbC\x00\x00\xfcC\x00\x00\xfdC\x00\x00\xfeC\x00\x00\xffC\x00\x00\x00D\x00\x80\x00D\x00\x00\x01D\x00\x80\x01D\x00\x00\x02D\x00\x80\x02D\x00\x00\x03D\x00\x80\x03D\x00\x00\x04D\x00\x80\x04D\x00\x00\x05D\x00\x80\x05D\x00\x00\x06D\x00\x80\x06D\x00\x00\x07D\x00\x80\x07D\x00\x00\x08D\x00\x80\x08D\x00\x00\tD\x00\x80\tD\x00\x00\nD\x00\x80\nD\x00\x00\x0bD\x00\x80\x0bD\x00\x00\x80?\x00\x00@@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x000A\x00\x00PA\x00\x00pA\x00\x00\x88A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x04B\x00\x00\x0cB\x00\x00\x14B\x00\x00\x1cB\x00\x00$B\x00\x00,B\x00\x004B\x00\x00<B\x00\x00DB\x00\x00LB\x00\x00TB\x00\x00\\B\x00\x00dB\x00\x00lB\x00\x00tB\x00\x00|B\x00\x00\x82B\x00\x00\x86B\x00\x00\x8aB\x00\x00\x8eB\x00\x00\x92B\x00\x00\x96B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xaaB\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xc2B\x00\x00\xc6B\x00\x00\xcaB\x00\x00\xceB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xf2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\xfeB\x00\x00\x01C\x00\x00\x03C\x00\x00\x05C\x00\x00\x07C\x00\x00\tC\x00\x00\x0bC\x00\x00\rC\x00\x00\x0fC\x00\x00\x11C\x00\x00\x13C\x00\x00\x15C\x00\x00\x17C\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1dC\x00\x00\x1fC\x00\x00!C\x00\x00#C\x00\x00%C\x00\x00\'C\x00\x00)C\x00\x00+C\x00\x00-C\x00\x00/C\x00\x001C\x00\x003C\x00\x005C\x00\x007C\x00\x009C\x00\x00;C\x00\x00=C\x00\x00?C\x00\x00AC\x00\x00CC\x00\x00EC\x00\x00GC\x00\x00IC\x00\x00KC\x00\x00MC\x00\x00OC\x00\x00QC\x00\x00SC\x00\x00UC\x00\x00WC\x00\x00YC\x00\x00[C\x00\x00]C\x00\x00_C\x00\x00aC\x00\x00cC\x00\x00eC\x00\x00gC\x00\x00iC\x00\x00kC\x00\x00mC\x00\x00oC\x00\x00qC\x00\x00sC\x00\x00uC\x00\x00wC\x00\x00yC\x00\x00{C\x00\x00}C\x00\x00\x7fC\x00\x80\x80C\x00\x80\x81C\x00\x80\x82C\x00\x80\x83C\x00\x80\x84C\x00\x80\x85C\x00\x80\x86C\x00\x80\x87C\x00\x80\x88C\x00\x80\x89C\x00\x80\x8aC\x00\x80\x8bC\x00\x80\x8cC\x00\x80\x8dC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x91C\x00\x80\x92C\x00\x80\x93C\x00\x80\x94C\x00\x80\x95C\x00\x80\x96C\x00\x80\x97C\x00\x80\x98C\x00\x80\x99C\x00\x80\x9aC\x00\x80\x9bC\x00\x80\x9cC\x00\x80\x9dC\x00\x80\x9eC\x00\x80\x9fC\x00\x80\xa0C\x00\x80\xa1C\x00\x80\xa2C\x00\x80\xa3C\x00\x80\xa4C\x00\x80\xa5C\x00\x80\xa6C\x00\x80\xa7C\x00\x80\xa8C\x00\x80\xa9C\x00\x80\xaaC\x00\x80\xabC\x00\x80\xacC\x00\x80\xadC\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb2C\x00\x80\xb3C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xb8C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xbeC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc1C\x00\x80\xc2C\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xc5C\x00\x80\xc6C\x00\x80\xc7C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x80\xcfC\x00\x80\xd0C\x00\x80\xd1C\x00\x80\xd2C\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xd6C\x00\x80\xd7C\x00\x80\xd8C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xddC\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe1C\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe4C\x00\x80\xe5C\x00\x80\xe6C\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xecC\x00\x80\xedC\x00\x80\xeeC\x00\x80\xefC\x00\x80\xf0C\x00\x80\xf1C\x00\x80\xf2C\x00\x80\xf3C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x80\xf8C\x00\x80\xf9C\x00\x80\xfaC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\xfdC\x00\x80\xfeC\x00\x80\xffC\x00@\x00D\x00\xc0\x00D\x00@\x01D\x00\xc0\x01D\x00@\x02D\x00\xc0\x02D\x00@\x03D\x00\xc0\x03D\x00@\x04D\x00\xc0\x04D\x00@\x05D\x00\xc0\x05D\x00@\x06D\x00\xc0\x06D\x00@\x07D\x00\xc0\x07D\x00@\x08D\x00\xc0\x08D\x00@\tD\x00\xc0\tD\x00@\nD\x00\xc0\nD\x00@\x0bD\x00\xc0\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp24795
(dp24796
g24745
(dp24797
g24734
I01
sg24741
I01
ssg24747
g24788
sg24748
(lp24798
g24734
ag24741
asg24750
(lp24799
I2
aI280
asbsg24752
g24780
sg24754
g24755
(g24737
(I0
tS'b'
tRp24800
(I1
(I2
I280
tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
tbsg24757
I01
sg24758
I280
sg24759
I-1
sg24760
(lp24801
g1
(g24783
g24732
(dp24802
g6217
g6218
stRp24803
ag1
(g24783
g24732
(dp24804
g6217
g6230
stRp24805
asg24762
Nsg24763
g12362
sg24764
I560
sg24765
I0
sg24766
I560
sg24767
I01
sbag1
(g24719
g3
NtRp24806
(dp24807
g24722
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p24808
sg24724
(lp24809
sg24726
I172071152
sg10
g24747
sg6
g24728
sg24729
I280
sg14
I01
sg15
g16
sg24730
g1
(g24731
g24732
(dp24810
g24734
g24735
(g24736
g24737
g24738
S'b'
tRp24811
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24741
g24735
(g24736
g24737
g24738
S'b'
tRp24812
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@\x00\x00\xc0@\x00\x00\x00A\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\x80A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xb0A\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xe0A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x08B\x00\x00\x10B\x00\x00\x18B\x00\x00 B\x00\x00(B\x00\x000B\x00\x008B\x00\x00@B\x00\x00HB\x00\x00PB\x00\x00XB\x00\x00`B\x00\x00hB\x00\x00pB\x00\x00xB\x00\x00\x80B\x00\x00\x84B\x00\x00\x88B\x00\x00\x8cB\x00\x00\x90B\x00\x00\x94B\x00\x00\x98B\x00\x00\x9cB\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xe0B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\xecB\x00\x00\xf0B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x02C\x00\x00\x04C\x00\x00\x06C\x00\x00\x08C\x00\x00\nC\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x10C\x00\x00\x12C\x00\x00\x14C\x00\x00\x16C\x00\x00\x18C\x00\x00\x1aC\x00\x00\x1cC\x00\x00\x1eC\x00\x00 C\x00\x00"C\x00\x00$C\x00\x00&C\x00\x00(C\x00\x00*C\x00\x00,C\x00\x00.C\x00\x000C\x00\x002C\x00\x004C\x00\x006C\x00\x008C\x00\x00:C\x00\x00<C\x00\x00>C\x00\x00@C\x00\x00BC\x00\x00DC\x00\x00FC\x00\x00HC\x00\x00JC\x00\x00LC\x00\x00NC\x00\x00PC\x00\x00RC\x00\x00TC\x00\x00VC\x00\x00XC\x00\x00ZC\x00\x00\\C\x00\x00^C\x00\x00`C\x00\x00bC\x00\x00dC\x00\x00fC\x00\x00hC\x00\x00jC\x00\x00lC\x00\x00nC\x00\x00pC\x00\x00rC\x00\x00tC\x00\x00vC\x00\x00xC\x00\x00zC\x00\x00|C\x00\x00~C\x00\x00\x80C\x00\x00\x81C\x00\x00\x82C\x00\x00\x83C\x00\x00\x84C\x00\x00\x85C\x00\x00\x86C\x00\x00\x87C\x00\x00\x88C\x00\x00\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x00\x8cC\x00\x00\x8dC\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x90C\x00\x00\x91C\x00\x00\x92C\x00\x00\x93C\x00\x00\x94C\x00\x00\x95C\x00\x00\x96C\x00\x00\x97C\x00\x00\x98C\x00\x00\x99C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9cC\x00\x00\x9dC\x00\x00\x9eC\x00\x00\x9fC\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xa2C\x00\x00\xa3C\x00\x00\xa4C\x00\x00\xa5C\x00\x00\xa6C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xabC\x00\x00\xacC\x00\x00\xadC\x00\x00\xaeC\x00\x00\xafC\x00\x00\xb0C\x00\x00\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbaC\x00\x00\xbbC\x00\x00\xbcC\x00\x00\xbdC\x00\x00\xbeC\x00\x00\xbfC\x00\x00\xc0C\x00\x00\xc1C\x00\x00\xc2C\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xccC\x00\x00\xcdC\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd0C\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd3C\x00\x00\xd4C\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xd7C\x00\x00\xd8C\x00\x00\xd9C\x00\x00\xdaC\x00\x00\xdbC\x00\x00\xdcC\x00\x00\xddC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe0C\x00\x00\xe1C\x00\x00\xe2C\x00\x00\xe3C\x00\x00\xe4C\x00\x00\xe5C\x00\x00\xe6C\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xe9C\x00\x00\xeaC\x00\x00\xebC\x00\x00\xecC\x00\x00\xedC\x00\x00\xeeC\x00\x00\xefC\x00\x00\xf0C\x00\x00\xf1C\x00\x00\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x00\xf5C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xf8C\x00\x00\xf9C\x00\x00\xfaC\x00\x00\xfbC\x00\x00\xfcC\x00\x00\xfdC\x00\x00\xfeC\x00\x00\xffC\x00\x00\x00D\x00\x80\x00D\x00\x00\x01D\x00\x80\x01D\x00\x00\x02D\x00\x80\x02D\x00\x00\x03D\x00\x80\x03D\x00\x00\x04D\x00\x80\x04D\x00\x00\x05D\x00\x80\x05D\x00\x00\x06D\x00\x80\x06D\x00\x00\x07D\x00\x80\x07D\x00\x00\x08D\x00\x80\x08D\x00\x00\tD\x00\x80\tD\x00\x00\nD\x00\x80\nD\x00\x00\x0bD\x00\x80\x0bD\x00\x00\x80?\x00\x00@@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x000A\x00\x00PA\x00\x00pA\x00\x00\x88A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x04B\x00\x00\x0cB\x00\x00\x14B\x00\x00\x1cB\x00\x00$B\x00\x00,B\x00\x004B\x00\x00<B\x00\x00DB\x00\x00LB\x00\x00TB\x00\x00\\B\x00\x00dB\x00\x00lB\x00\x00tB\x00\x00|B\x00\x00\x82B\x00\x00\x86B\x00\x00\x8aB\x00\x00\x8eB\x00\x00\x92B\x00\x00\x96B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xaaB\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xc2B\x00\x00\xc6B\x00\x00\xcaB\x00\x00\xceB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xf2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\xfeB\x00\x00\x01C\x00\x00\x03C\x00\x00\x05C\x00\x00\x07C\x00\x00\tC\x00\x00\x0bC\x00\x00\rC\x00\x00\x0fC\x00\x00\x11C\x00\x00\x13C\x00\x00\x15C\x00\x00\x17C\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1dC\x00\x00\x1fC\x00\x00!C\x00\x00#C\x00\x00%C\x00\x00\'C\x00\x00)C\x00\x00+C\x00\x00-C\x00\x00/C\x00\x001C\x00\x003C\x00\x005C\x00\x007C\x00\x009C\x00\x00;C\x00\x00=C\x00\x00?C\x00\x00AC\x00\x00CC\x00\x00EC\x00\x00GC\x00\x00IC\x00\x00KC\x00\x00MC\x00\x00OC\x00\x00QC\x00\x00SC\x00\x00UC\x00\x00WC\x00\x00YC\x00\x00[C\x00\x00]C\x00\x00_C\x00\x00aC\x00\x00cC\x00\x00eC\x00\x00gC\x00\x00iC\x00\x00kC\x00\x00mC\x00\x00oC\x00\x00qC\x00\x00sC\x00\x00uC\x00\x00wC\x00\x00yC\x00\x00{C\x00\x00}C\x00\x00\x7fC\x00\x80\x80C\x00\x80\x81C\x00\x80\x82C\x00\x80\x83C\x00\x80\x84C\x00\x80\x85C\x00\x80\x86C\x00\x80\x87C\x00\x80\x88C\x00\x80\x89C\x00\x80\x8aC\x00\x80\x8bC\x00\x80\x8cC\x00\x80\x8dC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x91C\x00\x80\x92C\x00\x80\x93C\x00\x80\x94C\x00\x80\x95C\x00\x80\x96C\x00\x80\x97C\x00\x80\x98C\x00\x80\x99C\x00\x80\x9aC\x00\x80\x9bC\x00\x80\x9cC\x00\x80\x9dC\x00\x80\x9eC\x00\x80\x9fC\x00\x80\xa0C\x00\x80\xa1C\x00\x80\xa2C\x00\x80\xa3C\x00\x80\xa4C\x00\x80\xa5C\x00\x80\xa6C\x00\x80\xa7C\x00\x80\xa8C\x00\x80\xa9C\x00\x80\xaaC\x00\x80\xabC\x00\x80\xacC\x00\x80\xadC\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb2C\x00\x80\xb3C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xb8C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xbeC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc1C\x00\x80\xc2C\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xc5C\x00\x80\xc6C\x00\x80\xc7C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x80\xcfC\x00\x80\xd0C\x00\x80\xd1C\x00\x80\xd2C\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xd6C\x00\x80\xd7C\x00\x80\xd8C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xddC\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe1C\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe4C\x00\x80\xe5C\x00\x80\xe6C\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xecC\x00\x80\xedC\x00\x80\xeeC\x00\x80\xefC\x00\x80\xf0C\x00\x80\xf1C\x00\x80\xf2C\x00\x80\xf3C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x80\xf8C\x00\x80\xf9C\x00\x80\xfaC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\xfdC\x00\x80\xfeC\x00\x80\xffC\x00@\x00D\x00\xc0\x00D\x00@\x01D\x00\xc0\x01D\x00@\x02D\x00\xc0\x02D\x00@\x03D\x00\xc0\x03D\x00@\x04D\x00\xc0\x04D\x00@\x05D\x00\xc0\x05D\x00@\x06D\x00\xc0\x06D\x00@\x07D\x00\xc0\x07D\x00@\x08D\x00\xc0\x08D\x00@\tD\x00\xc0\tD\x00@\nD\x00\xc0\nD\x00@\x0bD\x00\xc0\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp24813
(dp24814
g24745
(dp24815
g24734
I01
sg24741
I01
ssg24747
g24806
sg24748
(lp24816
g24734
ag24741
asg24750
(lp24817
I2
aI280
asbsg24752
g24780
sg24754
g24755
(g24737
(I0
tS'b'
tRp24818
(I1
(I2
I280
tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
tbsg24757
I01
sg24758
I280
sg24759
I-1
sg24760
(lp24819
g1
(g24783
g24732
(dp24820
g12387
g12388
stRp24821
ag1
(g24783
g24732
(dp24822
g12387
g12400
stRp24823
asg24762
Nsg24763
g18532
sg24764
I560
sg24765
I0
sg24766
I560
sg24767
I01
sbag1
(g24719
g3
NtRp24824
(dp24825
g24722
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p24826
sg24724
(lp24827
sg24726
I172071152
sg10
g24747
sg6
g24728
sg24729
I280
sg14
I01
sg15
g16
sg24730
g1
(g24731
g24732
(dp24828
g24734
g24735
(g24736
g24737
g24738
S'b'
tRp24829
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24741
g24735
(g24736
g24737
g24738
S'b'
tRp24830
(I1
(I2
I280
tg24740
I00
S'\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x80@\x00\x00\xc0@\x00\x00\x00A\x00\x00 A\x00\x00@A\x00\x00`A\x00\x00\x80A\x00\x00\x90A\x00\x00\xa0A\x00\x00\xb0A\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xe0A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x08B\x00\x00\x10B\x00\x00\x18B\x00\x00 B\x00\x00(B\x00\x000B\x00\x008B\x00\x00@B\x00\x00HB\x00\x00PB\x00\x00XB\x00\x00`B\x00\x00hB\x00\x00pB\x00\x00xB\x00\x00\x80B\x00\x00\x84B\x00\x00\x88B\x00\x00\x8cB\x00\x00\x90B\x00\x00\x94B\x00\x00\x98B\x00\x00\x9cB\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xe0B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\xecB\x00\x00\xf0B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x02C\x00\x00\x04C\x00\x00\x06C\x00\x00\x08C\x00\x00\nC\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x10C\x00\x00\x12C\x00\x00\x14C\x00\x00\x16C\x00\x00\x18C\x00\x00\x1aC\x00\x00\x1cC\x00\x00\x1eC\x00\x00 C\x00\x00"C\x00\x00$C\x00\x00&C\x00\x00(C\x00\x00*C\x00\x00,C\x00\x00.C\x00\x000C\x00\x002C\x00\x004C\x00\x006C\x00\x008C\x00\x00:C\x00\x00<C\x00\x00>C\x00\x00@C\x00\x00BC\x00\x00DC\x00\x00FC\x00\x00HC\x00\x00JC\x00\x00LC\x00\x00NC\x00\x00PC\x00\x00RC\x00\x00TC\x00\x00VC\x00\x00XC\x00\x00ZC\x00\x00\\C\x00\x00^C\x00\x00`C\x00\x00bC\x00\x00dC\x00\x00fC\x00\x00hC\x00\x00jC\x00\x00lC\x00\x00nC\x00\x00pC\x00\x00rC\x00\x00tC\x00\x00vC\x00\x00xC\x00\x00zC\x00\x00|C\x00\x00~C\x00\x00\x80C\x00\x00\x81C\x00\x00\x82C\x00\x00\x83C\x00\x00\x84C\x00\x00\x85C\x00\x00\x86C\x00\x00\x87C\x00\x00\x88C\x00\x00\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x00\x8cC\x00\x00\x8dC\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x90C\x00\x00\x91C\x00\x00\x92C\x00\x00\x93C\x00\x00\x94C\x00\x00\x95C\x00\x00\x96C\x00\x00\x97C\x00\x00\x98C\x00\x00\x99C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9cC\x00\x00\x9dC\x00\x00\x9eC\x00\x00\x9fC\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xa2C\x00\x00\xa3C\x00\x00\xa4C\x00\x00\xa5C\x00\x00\xa6C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xabC\x00\x00\xacC\x00\x00\xadC\x00\x00\xaeC\x00\x00\xafC\x00\x00\xb0C\x00\x00\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbaC\x00\x00\xbbC\x00\x00\xbcC\x00\x00\xbdC\x00\x00\xbeC\x00\x00\xbfC\x00\x00\xc0C\x00\x00\xc1C\x00\x00\xc2C\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xccC\x00\x00\xcdC\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd0C\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd3C\x00\x00\xd4C\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xd7C\x00\x00\xd8C\x00\x00\xd9C\x00\x00\xdaC\x00\x00\xdbC\x00\x00\xdcC\x00\x00\xddC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe0C\x00\x00\xe1C\x00\x00\xe2C\x00\x00\xe3C\x00\x00\xe4C\x00\x00\xe5C\x00\x00\xe6C\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xe9C\x00\x00\xeaC\x00\x00\xebC\x00\x00\xecC\x00\x00\xedC\x00\x00\xeeC\x00\x00\xefC\x00\x00\xf0C\x00\x00\xf1C\x00\x00\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x00\xf5C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xf8C\x00\x00\xf9C\x00\x00\xfaC\x00\x00\xfbC\x00\x00\xfcC\x00\x00\xfdC\x00\x00\xfeC\x00\x00\xffC\x00\x00\x00D\x00\x80\x00D\x00\x00\x01D\x00\x80\x01D\x00\x00\x02D\x00\x80\x02D\x00\x00\x03D\x00\x80\x03D\x00\x00\x04D\x00\x80\x04D\x00\x00\x05D\x00\x80\x05D\x00\x00\x06D\x00\x80\x06D\x00\x00\x07D\x00\x80\x07D\x00\x00\x08D\x00\x80\x08D\x00\x00\tD\x00\x80\tD\x00\x00\nD\x00\x80\nD\x00\x00\x0bD\x00\x80\x0bD\x00\x00\x80?\x00\x00@@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x10A\x00\x000A\x00\x00PA\x00\x00pA\x00\x00\x88A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x04B\x00\x00\x0cB\x00\x00\x14B\x00\x00\x1cB\x00\x00$B\x00\x00,B\x00\x004B\x00\x00<B\x00\x00DB\x00\x00LB\x00\x00TB\x00\x00\\B\x00\x00dB\x00\x00lB\x00\x00tB\x00\x00|B\x00\x00\x82B\x00\x00\x86B\x00\x00\x8aB\x00\x00\x8eB\x00\x00\x92B\x00\x00\x96B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xaaB\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xc2B\x00\x00\xc6B\x00\x00\xcaB\x00\x00\xceB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xf2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\xfeB\x00\x00\x01C\x00\x00\x03C\x00\x00\x05C\x00\x00\x07C\x00\x00\tC\x00\x00\x0bC\x00\x00\rC\x00\x00\x0fC\x00\x00\x11C\x00\x00\x13C\x00\x00\x15C\x00\x00\x17C\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1dC\x00\x00\x1fC\x00\x00!C\x00\x00#C\x00\x00%C\x00\x00\'C\x00\x00)C\x00\x00+C\x00\x00-C\x00\x00/C\x00\x001C\x00\x003C\x00\x005C\x00\x007C\x00\x009C\x00\x00;C\x00\x00=C\x00\x00?C\x00\x00AC\x00\x00CC\x00\x00EC\x00\x00GC\x00\x00IC\x00\x00KC\x00\x00MC\x00\x00OC\x00\x00QC\x00\x00SC\x00\x00UC\x00\x00WC\x00\x00YC\x00\x00[C\x00\x00]C\x00\x00_C\x00\x00aC\x00\x00cC\x00\x00eC\x00\x00gC\x00\x00iC\x00\x00kC\x00\x00mC\x00\x00oC\x00\x00qC\x00\x00sC\x00\x00uC\x00\x00wC\x00\x00yC\x00\x00{C\x00\x00}C\x00\x00\x7fC\x00\x80\x80C\x00\x80\x81C\x00\x80\x82C\x00\x80\x83C\x00\x80\x84C\x00\x80\x85C\x00\x80\x86C\x00\x80\x87C\x00\x80\x88C\x00\x80\x89C\x00\x80\x8aC\x00\x80\x8bC\x00\x80\x8cC\x00\x80\x8dC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x91C\x00\x80\x92C\x00\x80\x93C\x00\x80\x94C\x00\x80\x95C\x00\x80\x96C\x00\x80\x97C\x00\x80\x98C\x00\x80\x99C\x00\x80\x9aC\x00\x80\x9bC\x00\x80\x9cC\x00\x80\x9dC\x00\x80\x9eC\x00\x80\x9fC\x00\x80\xa0C\x00\x80\xa1C\x00\x80\xa2C\x00\x80\xa3C\x00\x80\xa4C\x00\x80\xa5C\x00\x80\xa6C\x00\x80\xa7C\x00\x80\xa8C\x00\x80\xa9C\x00\x80\xaaC\x00\x80\xabC\x00\x80\xacC\x00\x80\xadC\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb2C\x00\x80\xb3C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xb8C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xbeC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc1C\x00\x80\xc2C\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xc5C\x00\x80\xc6C\x00\x80\xc7C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x80\xcfC\x00\x80\xd0C\x00\x80\xd1C\x00\x80\xd2C\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xd6C\x00\x80\xd7C\x00\x80\xd8C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xddC\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe1C\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe4C\x00\x80\xe5C\x00\x80\xe6C\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xecC\x00\x80\xedC\x00\x80\xeeC\x00\x80\xefC\x00\x80\xf0C\x00\x80\xf1C\x00\x80\xf2C\x00\x80\xf3C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x80\xf8C\x00\x80\xf9C\x00\x80\xfaC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\xfdC\x00\x80\xfeC\x00\x80\xffC\x00@\x00D\x00\xc0\x00D\x00@\x01D\x00\xc0\x01D\x00@\x02D\x00\xc0\x02D\x00@\x03D\x00\xc0\x03D\x00@\x04D\x00\xc0\x04D\x00@\x05D\x00\xc0\x05D\x00@\x06D\x00\xc0\x06D\x00@\x07D\x00\xc0\x07D\x00@\x08D\x00\xc0\x08D\x00@\tD\x00\xc0\tD\x00@\nD\x00\xc0\nD\x00@\x0bD\x00\xc0\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp24831
(dp24832
g24745
(dp24833
g24734
I01
sg24741
I01
ssg24747
g24824
sg24748
(lp24834
g24734
ag24741
asg24750
(lp24835
I2
aI280
asbsg24752
g24780
sg24754
g24755
(g24737
(I0
tS'b'
tRp24836
(I1
(I2
I280
tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00'
tbsg24757
I01
sg24758
I280
sg24759
I-1
sg24760
(lp24837
g1
(g24783
g24732
(dp24838
g18557
g18558
stRp24839
ag1
(g24783
g24732
(dp24840
g18557
g18570
stRp24841
asg24762
Nsg24763
g24702
sg24764
I560
sg24765
I0
sg24766
I560
sg24767
I01
sbasS'savePickle'
p24842
I01
sb.